<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Collections</name>
    </assembly>
    <members>
        <member name="T:Common.Collections.Arrays.Array1`1">
            <summary>
            Wrapper for system array using the general IArray1 interface.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.#ctor(System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="count">The size of the arrays 1st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.#ctor(`0[])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="P:Common.Collections.Arrays.Array1`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.Array1`1.Item(System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.InBounds(System.Int32)">
            <summary>
            Is this index in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.NotInBounds(System.Int32)">
            <summary>
            Is this index not in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Resize(System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.GetClamped(System.Int32)">
            <summary>
            Get the element at clamped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.GetWrapped(System.Int32)">
            <summary>
            Get the element at wrapped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.GetMirrored(System.Int32)">
            <summary>
            Get the element at mirrored index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.SetClamped(System.Int32,`0)">
            <summary>
            Set the element at clamped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.SetWrapped(System.Int32,`0)">
            <summary>
            Set the element at wrapped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.SetMirrored(System.Int32,`0)">
            <summary>
            Set the element at mirred index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.BlockSize(System.Int32)">
            <summary>
            Recommended blocks for parallel processing.
            </summary>
            <param name="divisions">Number of divisions on each axis to make.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Iterate(System.Action{System.Int32})">
            <summary>
            Iterate over the array with the action.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Fill(`0)">
            <summary>
            Fill the array with the value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Fill(System.Func{System.Int32,`0})">
            <summary>
            Fill the array with the value from the function.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array1`1.Modify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function.
            </summary>
        </member>
        <member name="T:Common.Collections.Arrays.Array2`1">
            <summary>
            Wrapper for system array using the general IArray2 interface.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="width">The size of the arrays 1st dimention.</param>
            <param name="height">The size of the arrays 2st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a new array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.#ctor(`0[0:,0:])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="P:Common.Collections.Arrays.Array2`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.Array2`1.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.Array2`1.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.Array2`1.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.Array2`1.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.IsSameSize``1(Common.Collections.Arrays.IArray2{``0})">
            <summary>
            Is this array the same size as the other array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.InBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.NotInBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index not in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.InBounds(Common.Core.Numerics.Point2i)">
            <summary>
            Are the x and y index in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.NotInBounds(Common.Core.Numerics.Point2i)">
            <summary>
            Are the x and y index not in the bounds of the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Resize(Common.Core.Numerics.Point2i)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.GetClamped(System.Int32,System.Int32)">
            <summary>
            Get the element at clamped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.GetWrapped(System.Int32,System.Int32)">
            <summary>
            Get the element at wrapped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.GetMirrored(System.Int32,System.Int32)">
            <summary>
            Get the element at mirrored index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.SetClamped(System.Int32,System.Int32,`0)">
            <summary>
            Set the element at clamped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.SetWrapped(System.Int32,System.Int32,`0)">
            <summary>
            Set the element at wrapped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.SetMirrored(System.Int32,System.Int32,`0)">
            <summary>
            Set the element at mirred index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.BlockSize(System.Int32)">
            <summary>
            Recommended blocks for parallel processing.
            </summary>
            <param name="divisions">Number of divisions on each axis to make.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Iterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelIterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelIterate(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Fill(`0)">
            <summary>
            Fill the array with the value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Fill(System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelFill(System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelFill(System.Int32,System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.Modify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelModify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.Array2`1.ParallelModify(System.Int32,System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.#ctor(System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="count">The size of the arrays 1st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.#ctor(Common.Core.Colors.ColorRGB[])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.GetClamped(System.Single)">
            <summary>
            Sample the array by clamped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.GetWrapped(System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray1.GetMirrored(System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="width">The size of the arrays 1st dimention.</param>
            <param name="height">The size of the arrays 2st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a new array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.#ctor(Common.Core.Colors.ColorRGB[0:,0:])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.GetClamped(System.Single,System.Single)">
            <summary>
            Sample the array by clamped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.GetWrapped(System.Single,System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.ColorArray2.GetMirrored(System.Single,System.Single)">
            <summary>
            Sample the array by mirrored bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.#ctor(System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="count">The size of the arrays 1st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.#ctor(System.Single[])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.GetClamped(System.Single)">
            <summary>
            Sample the array by clamped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.GetWrapped(System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.GetMirrored(System.Single)">
            <summary>
            Sample the array by mirrored bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray1.Sum">
            <summary>
            The sum of all the values in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new array.
            </summary>
            <param name="width">The size of the arrays 1st dimention.</param>
            <param name="height">The size of the arrays 2st dimention.</param>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a new array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.#ctor(System.Single[0:,0:])">
            <summary>
            Create a new array.
            </summary>
            <param name="data">The data form the array. Will be deep copied.</param>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.GetClamped(System.Single,System.Single)">
            <summary>
            Sample the array by clamped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.GetWrapped(System.Single,System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.GetMirrored(System.Single,System.Single)">
            <summary>
            Sample the array by wrapped bilinear interpolation.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.FloatArray2.Sum">
            <summary>
            The sum of all the values in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Collections.Arrays.IArray1`1">
            <summary>
            General interface for a 1 dimensional array.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="P:Common.Collections.Arrays.IArray1`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.IArray1`1.Item(System.Int32)">
            <summary>
            Access a element at index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray1`1.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray1`1.GetClamped(System.Int32)">
            <summary>
            Get the element at clamped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray1`1.GetWrapped(System.Int32)">
            <summary>
            Get the element at wrapped index x.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray1`1.GetMirrored(System.Int32)">
            <summary>
            Get the element at mirrored index x.
            </summary>
        </member>
        <member name="T:Common.Collections.Arrays.IArray2`1">
            <summary>
            General interface for a 2 dimensional array.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="P:Common.Collections.Arrays.IArray2`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.IArray2`1.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.IArray2`1.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.IArray2`1.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.IArray2`1.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray2`1.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray2`1.GetClamped(System.Int32,System.Int32)">
            <summary>
            Get the element at clamped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray2`1.GetWrapped(System.Int32,System.Int32)">
            <summary>
            Get the element at wrapped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.IArray2`1.GetMirrored(System.Int32,System.Int32)">
            <summary>
            Get the element at mirrored index x,y.
            </summary>
        </member>
        <member name="T:Common.Collections.Arrays.SparseArray2`1">
            <summary>
            A compact array for when most elements have a default value.
            Breaks the 2d space into grid. A grid is only allocated if 
            it contains a element.
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new sparse array.
            </summary>
            <param name="width">The size of the arrays 1st dimention.</param>
            <param name="height">The size of the arrays 2st dimention.</param>
            <param name="gridSize">The size of the grids array is broken into.</param>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Height">
            <summary>
            The size of the arrays 2nd dimention.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.GridsX">
            <summary>
            The number of grids in the 1st dimension.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.GridsY">
            <summary>
            The number of grids in the 2nd dimension.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.GridSize">
            <summary>
            The size (width and height) of each grid.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.GridSize2">
            <summary>
            The grid size squared. Equal to the grids area.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.GridCount">
            <summary>
            The number of grids that are currently allocated.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all elements in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.Clear">
            <summary>
            Sets all elements in the array to default value.
            Means all grids are destroyed.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.GetClamped(System.Int32,System.Int32)">
            <summary>
            Get the element at clamped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.GetWrapped(System.Int32,System.Int32)">
            <summary>
            Get the element at wrapped index x,y.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.GetMirrored(System.Int32,System.Int32)">
            <summary>
            Get the element at mirrored index x,y.
            </summary>
        </member>
        <member name="T:Common.Collections.Arrays.SparseArray2`1.Grid">
            <summary>
            The internal grid class that holds the elements.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.Grid.#ctor(System.Int32)">
            <summary>
            Create a new grid. Width and height must be the same.
            </summary>
            <param name="size">Size of 1st and second dimension</param>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Grid.Count">
            <summary>
            The number of elements added to grid.
            </summary>
        </member>
        <member name="P:Common.Collections.Arrays.SparseArray2`1.Grid.Array">
            <summary>
            The Array of elements.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.Grid.Remove(System.Int32,System.Int32)">
            <summary>
            Remove the element at index x,y. Set element to default.
            </summary>
        </member>
        <member name="M:Common.Collections.Arrays.SparseArray2`1.Grid.Add(System.Int32,System.Int32,`0)">
            <summary>
            Adds element at index x,y. Only added if not default value.
            </summary>
        </member>
        <member name="T:Common.Collections.Queues.BinaryHeap`1">
            <summary>
            A binary heap, useful for sorting data and priority queues.
            </summary>
        </member>
        <member name="P:Common.Collections.Queues.BinaryHeap`1.Count">
            <summary>
            Gets the number of values in the heap. 
            </summary>
        </member>
        <member name="P:Common.Collections.Queues.BinaryHeap`1.Capacity">
            <summary>
            Gets or sets the capacity of the heap.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.#ctor">
            <summary>
            Creates a new binary heap.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.#ctor(System.Int32)">
            <summary>
            Creates a new binary heap with capacity.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new binary heap from collection.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new binary heap from enumerable.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Clear">
            <summary>
            Removes all items from the heap.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Peek">
            <summary>
            Gets the first value in the heap without removing it.
            </summary>
            <returns>The lowest value of type T.</returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Pop">
            <summary>
            Removes and returns the first item in the heap.
            </summary>
            <returns>The next value in the heap.</returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a enumerable to the heap.
            </summary>
            <param name="data">a enumerable container</param>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Add(`0)">
            <summary>
            Adds a item to the heap.
            </summary>
            <param name="item">The item to add to the heap.</param>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.ContainsValue(`0)">
            <summary>
            Checks to see if the binary heap contains 
            the specified item.
            This utilizes the type T's Comparer 
            and will consider items the 
            same order the same object.
            </summary>
            <param name="value">The item to search the binary heap for.</param>
            <returns>A boolean, true if binary heap contains item.</returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.RemoveValue(`0)">
            <summary>
            Removes an item from the binary heap. 
            This utilizes the type T's Comparer 
            and will not remove duplicates.
            </summary>
            <param name="value">The item to be removed.</param>
            <returns>Boolean true if the item was removed.</returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.GetEnumerator">
            <summary>
            Gets an enumerator for the binary heap.
            </summary>
            <returns>An IEnumerator of type T.</returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.IndexOfValue(`0)">
            <summary>
            Find the index of the item in the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.ToList">
            <summary>
            Copy the heap to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.UpHeap">
            <summary>
            helper function that performs up-heap bubbling
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.DownHeap">
            <summary>
            helper function that performs down-heap bubbling
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Parent(System.Int32)">
            <summary>
            helper function that calculates the parent of a node
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Child1(System.Int32)">
            <summary>
            helper function that calculates the first child of a node
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Child2(System.Int32)">
            <summary>
            helper function that calculates the second child of a node
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.BinaryHeap`1.Compare(`0,`0)">
            <summary>
            Compare two objects.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Collections.Queues.IPriorityQueue`1">
            <summary>
            Interface for a list of items sorted by their comparable.
            See PriorityList, BinaryHeap or BinaryTree.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Common.Collections.Queues.IPriorityQueue`1.Count">
            <summary>
            The number of items in queue.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.Clear">
            <summary>
            Clear the queue.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.Peek">
            <summary>
            Return the first item in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.Pop">
            <summary>
            Remove the first item from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a list of items to the queue.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.Add(`0)">
            <summary>
            Add a single item to the queue.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.IPriorityQueue`1.ToList">
            <summary>
            Return queue as list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Collections.Queues.PriorityList`1">
            <summary>
            A naive implementation of a priority queue
            using a list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Common.Collections.Queues.PriorityList`1.m_list">
            <summary>
            The list that contains the data.
            </summary>
        </member>
        <member name="F:Common.Collections.Queues.PriorityList`1.m_isDirty">
            <summary>
            Does the list need to be resorted.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.#ctor(System.Int32)">
            <summary>
            Construct a list with a capacity size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:Common.Collections.Queues.PriorityList`1.Count">
            <summary>
            The number of elements in the list.
            </summary>
        </member>
        <member name="P:Common.Collections.Queues.PriorityList`1.Capacity">
            <summary>
            The capacity of the list.
            </summary>
        </member>
        <member name="P:Common.Collections.Queues.PriorityList`1.Item(System.Int32)">
            <summary>
            Access a element at index i.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Clear">
            <summary>
            Clear the list.
            </summary>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the list.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Add(`0)">
            <summary>
            Add a item to the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Peek">
            <summary>
            Return the first item in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Pop">
            <summary>
            Return and remove the first item in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Remove(`0)">
            <summary>
            Remove the item from the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.ToList">
            <summary>
            Return a list of the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.GetEnumerator">
            <summary>
            Enumerate through the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate through the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Queues.PriorityList`1.Sort">
            <summary>
            Sort the list.
            </summary>
        </member>
        <member name="T:Common.Collections.Sets.DisjointGridSet2">
            <summary>
            a disjoint-set data structure is a data
            structure that tracks a set of elements
            partitioned into a number of disjoint 
            (non-overlapping) subsets.
            Elements in the set represent a index
            in to a 2D grid.
            </summary>
        </member>
        <member name="F:Common.Collections.Sets.DisjointGridSet2.m_parent">
            <summary>
            The parents of the element at each index.
            All elements with the same parent belong 
            to the same set. A element may have its parent
            set to -1 to indicate this element has 
            been deleted. If a elements parent is itsself
            then this is a root element.
            </summary>
        </member>
        <member name="P:Common.Collections.Sets.DisjointGridSet2.Width">
            <summary>
            The width of the grid.
            </summary>
        </member>
        <member name="P:Common.Collections.Sets.DisjointGridSet2.Height">
            <summary>
            The height of the grid.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.Clear">
            <summary>
            Clear the set.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.Add(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Added a new element and set what 
            the elements parent is.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Added a new element and set what 
            the elements parent is.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.FindParent(Common.Core.Numerics.Point2i)">
            <summary>
            Find the elements parent. 
            If the element has been deleted its parent is -1.
            If the elements parent is itself it is the root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.FindParent(System.Int32,System.Int32)">
            <summary>
            Find the elements parent. 
            If the element has been deleted its parent is -1.
            If the elements parent is itself it is the root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.Union(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Merge the two sets.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointGridSet2.Union(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merge the two sets.
            </summary>
        </member>
        <member name="T:Common.Collections.Sets.DisjointMappedSet">
            <summary>
            a disjoint-set data structure is a data
            structure that tracks a set of elements
            partitioned into a number of disjoint 
            (non-overlapping) subsets.
            Elements in the set can be any integer.
            </summary>
        </member>
        <member name="F:Common.Collections.Sets.DisjointMappedSet.m_parent">
            <summary>
            The parents of the element at each key.
            All elements with the same parent belong 
            to the same set. A element may have its parent
            set to -1 to indicate this element has 
            been deleted. If a elements parent is itsself
            then this is a root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.Clear">
            <summary>
            Clear the set.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.Contains(System.Int32)">
            <summary>
            Does the set contain 
            this element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.Add(System.Int32,System.Int32)">
            <summary>
            Added a new element and set what 
            the elements parent is.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.FindParent(System.Int32)">
            <summary>
            Find the elements parent. 
            If the element has been deleted its parent is -1.
            If the elements parent is itself it is the root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointMappedSet.Union(System.Int32,System.Int32)">
            <summary>
            Merge the two sets.
            </summary>
        </member>
        <member name="T:Common.Collections.Sets.DisjointSet">
            <summary>
            a disjoint-set data structure is a data
            structure that tracks a set of elements
            partitioned into a number of disjoint 
            (non-overlapping) subsets.
            Elements in the set must be integer 
            ranging from 0 to Count-1.
            </summary>
        </member>
        <member name="F:Common.Collections.Sets.DisjointSet.m_parent">
            <summary>
            The parents of the element at each index.
            All elements with the same parent belong 
            to the same set. A element may have its parent
            set to -1 to indicate this element has 
            been deleted. If a elements parent is its self
            then this is a root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.Clear">
            <summary>
            Clear the set.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.AddRange(System.Int32)">
            <summary>
            Added a new elements and set there
            parent to its self.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.AddNext">
            <summary>
            Added a new element and set its
            parent to its self.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.FindParent(System.Int32)">
            <summary>
            Find the elements parent. 
            If the element has been deleted its parent is -1.
            If the elements parent is itself it is the root element.
            </summary>
        </member>
        <member name="M:Common.Collections.Sets.DisjointSet.Union(System.Int32,System.Int32)">
            <summary>
            Merge the two sets.
            </summary>
        </member>
        <member name="T:Common.Collections.Trees.AVLTree`1">
            <summary>
            AVL is a balanced binary tree.
            This optimizes searches on the tree.
            Does not support duplicates.
            https://github.com/bitlush/avl-tree-c-sharp
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Common.Collections.Trees.AVLTree`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Trees.AVLTree`1.Add(`0)">
            <summary>
            Add a item to the tree.
            Tree must be rebalanced.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Common.Collections.Trees.AVLTree`1.RemoveValue(`0)">
            <summary>
            Remove a item to the tree.
            Tree must be rebalanced.
            </summary>
        </member>
        <member name="T:Common.Collections.Trees.BinaryTree`1">
            <summary>
            A special type of tree which has the property that for every node 
            in the tree, the value of any node in its left subtree is less than
            the value of the node, and any node in its right subtree is greater
            than the value of the node.
            Does not support duplicates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.#ctor">
            <summary>
            Create new empty tree.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create new empty tree.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTree`1.Count">
            <summary>
            The number of elements in the tree,
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTree`1.Depth">
            <summary>
            The max depth of the tree.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTree`1.Root">
            <summary>
            The root element of the tree
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTree`1.Comparer">
            <summary>
            Optional comparer to use.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Clear">
            <summary>
            Clears the tree.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Peek">
            <summary>
            Return first item in tree.
            </summary>
            <returns>First item</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Pop">
            <summary>
            Remove first item in tree.
            </summary>
            <returns>First item</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a enumerable to the heap.
            </summary>
            <param name="data">a enumerable container</param>
            <returns>If any of the items not added</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Add(`0)">
            <summary>
            Add a item to the tree.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.ContainsValue(`0)">
            <summary>
            Does the tree contain the item.
            </summary>
            <param name="value">the item</param>
            <returns>If the item is in the tree</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.RemoveValue(`0)">
            <summary>
            Remove a value from the tree.
            </summary>
            <param name="value"></param>
            <returns>True if the value was removed</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.FindNode(`0)">
            <summary>
            Finds the node which item belongs to.
            </summary>
            <param name="item"></param>
            <returns>The found node or null if no match found</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.FindMinimum">
            <summary>
            Finds the minimum value in the tree.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.FindMaximum">
            <summary>
            Finds the maximum value in the tree.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.FindSuccesor(`0,`0@)">
            <summary>
            Find the values succesor.
            </summary>
            <param name="value"></param>
            <param name="succesor"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.FindPredecessor(`0,`0@)">
            <summary>
            The values predecessor.
            </summary>
            <param name="value"></param>
            <param name="predecessor"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.ToList">
            <summary>
            Copy the tree into a list in order.
            </summary>
            <returns>ordered list</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.GetEnumerator">
            <summary>
            Gets an enumerator for the tree.
            </summary>
            <returns>An IEnumerator of type T.</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Inorder(Common.Collections.Trees.BinaryTreeNode{`0},System.Collections.Generic.List{`0})">
            <summary>
            Copy the tree into a list in order.
            </summary>
            <returns>ordered list</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.DepthFirst(Common.Collections.Trees.BinaryTreeNode{`0},System.Collections.Generic.List{`0})">
            <summary>
            Copy the tree into a list in depth first order.
            </summary>
            <returns>ordered list</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.BreadthFirst(Common.Collections.Trees.BinaryTreeNode{`0},System.Collections.Generic.List{`0})">
            <summary>
            Copy the tree into a list in breadth first order.
            </summary>
            <returns>ordered list</returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTree`1.Compare(`0,`0)">
            <summary>
            Compare two objects.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Collections.Trees.BinaryTreeNode`1">
            <summary>
            Node for a binary tree
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.Item">
            <summary>
            The nodes item.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.Left">
            <summary>
            The left node. Maybe null.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.Right">
            <summary>
            The right node. Maybe null.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.IsLeaf">
            <summary>
            Is this node a leaf.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.Balance">
            <summary>
            Used internally to balance AVLTrees.
            </summary>
        </member>
        <member name="P:Common.Collections.Trees.BinaryTreeNode`1.Parent">
            <summary>
            The nodes parent. Null if node is the root.
            </summary>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTreeNode`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Collections.Trees.BinaryTreeNode`1.GetEnumerator">
            <summary>
            Enumerate all items from this node.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
