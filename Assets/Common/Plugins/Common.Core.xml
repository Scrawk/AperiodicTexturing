<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Core</name>
    </assembly>
    <members>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Division(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Division(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Equality(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Inequality(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.AlmostEqual(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Equals(Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Distance(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.SqrDistance(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToRGB(System.Single,System.Single,System.Single)">
            <summary>
            Convert to RGB color space.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.GenerateSpectrum(System.Int32)">
            <summary>
            Generates a list of colors with hues ranging from 0 360
            and a saturation and value of 1. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Division(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Division(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Equality(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Inequality(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.AlmostEqual(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Equals(Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            The values will be converted from a 0-255 range to a 0-1 range.
            </summary>
            <returns>A color will values in the 0-1 range.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.FromInteger(System.Int32,System.Boolean)">
            <summary>
            Create a color from a integer where each byte in the 
            integer represents a channl in the color.
            </summary>
            <param name="i">The integer.</param>
            <param name="bgr">are the channels packed bgr or rgb.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToInteger(System.Boolean)">
            <summary>
            Convert the color to a integer where each byte 
            represents a channel in the color.
            </summary>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>A integer where each byte represents a channel in the color.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Gamma(System.Single,System.Single)">
            <summary>
            Apply the gamma function to the color.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="A">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Distance(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.SqrDistance(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Min(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Max(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Clamp(Common.Core.Colors.ColorRGB,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Lerp(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToHSV(System.Single,System.Single,System.Single)">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.RainbowPalatte">
            <summary>
            Create a palette of 6 colors from the rainbow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Palette">
            <summary>
            Create a palette of colors..
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.CustomPalette(System.Int32,System.Single,System.Single)">
            <summary>
            Create a custom palette of hues with the same saturation and value.
            </summary>
            <param name="hues">The number of hues in the palette.</param>
            <param name="saturation">The saturation of the colors.</param>
            <param name="value">The values of the colors.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Division(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Division(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Divide a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Equality(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Inequality(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.AlmostEqual(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Equals(Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.FromBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            The values will be converted from a 0-255 range to a 0-1 range.
            </summary>
            <returns>A color will values in the 0-1 range.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.FromInteger(System.Int32,System.Boolean)">
            <summary>
            Create a color from a integer where each byte in the 
            integer represents a channl in the color.
            </summary>
            <param name="i">The integer.</param>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToInteger(System.Boolean)">
            <summary>
            Convert the color to a integer where each byte 
            represents a channel in the color.
            </summary>
            <param name="abgr">are the channels packed bgr or rgb.</param>
            <returns>A integer where each byte represents a channel in the color.</returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Gamma(System.Single,System.Single)">
            <summary>
            Apply the gamma function to the color.
            Gamma is not applied to the alpha channel.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="A">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Distance(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.SqrDistance(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Min(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Max(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Clamp(Common.Core.Colors.ColorRGBA,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Lerp(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Lerp between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToHSV">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D26">
            <summary>
            Represents the 26 directions around a 3D array
            including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D26.LEFT_TOP">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D26.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D4">
            <summary>
            Represents the 4 directions around a 2D array
            not including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.LEFT">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.OPPOSITES">
            <summary>
            The opposite direction.
            OPPOSITE[LEFT] == RIGHT
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.ADJACENT">
            <summary>
            The two adjacent directions.
            ADJACENT[LEFT, 0] == BOTTOM
            ADJACENT[LEFT, 1] == TOP
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D8">
            <summary>
            Represents the 8 directions around a 2D array
            including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.LEFT">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="M:Common.Core.Directions.D8.IsDiagonal(System.Int32)">
            <summary>
            Is this a diagonal direction.
            IsDiagonal(RIGHT_TOP) == true
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.ALL">
            <summary>
            All the direction values.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.NAME">
            <summary>
            The directions name.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.DIRECTION">
            <summary>
            Given a 2D index from 0-2 what direction does it represent.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.OPPOSITES">
            <summary>
            The opposite direction.
            OPPOSITE[LEFT] == RIGHT
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.BITS">
            <summary>
            In a byte flag which bit does a direction represents.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.ADJACENT">
            <summary>
            The two adjacent directions.
            ADJACENT[LEFT, 0] == LEFT_BOTTOM
            ADJACENT[LEFT, 1] == LEFT_TOP
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.DIAGONAL">
            <summary>
            A list of only the diagonal directions.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.ORTHOGONAL">
            <summary>
            A list of only the orthogonal directions.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.PeekLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Return the last item in list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle the list into a random order.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle the list into a random order.
            </summary>
            <param name="seed">The random generators seed.</param>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffle the list into a random order.
            </summary>
            <param name="rnd">The random generator.</param>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.GetWrapped``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get the element at index i and wrap
            the index to the lists bounds.
            </summary>
            <param name="i">The index.</param>
            <returns>The element at index i.</returns>
        </member>
        <member name="M:Common.Core.Extensions.IListExtension.GetClamped``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get the element at index i and clamp
            the index to the lists bounds.
            </summary>
            <param name="i">The index.</param>
            <returns>The element at index i.</returns>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.Add``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Add the item to the end of the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.AddRange``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to end of list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.IndexOf``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Find the index of the item in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.RemoveAt``1(System.Collections.Generic.LinkedList{``0},System.Int32)">
            <summary>
            Remove the item at index i.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0)">
            <summary>
            Add two items to the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0,``0)">
            <summary>
            Add three items to the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0,``0,``0)">
            <summary>
            Add four items to the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.AddRange``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Add the same item to the list a number of times.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.PopFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove and return the first element in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.PopLast``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove and return the last element in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.RemoveBySwap``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Remove the item at index i by moving the
            last element to index i and then removing
            the last element.
            </summary>
        </member>
        <member name="M:Common.Core.Extensions.ListExtension.Cut``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Remove the elements in the list and return as a seperate list.
            </summary>
            <param name="index">The index to start at.</param>
            <param name="count">The number of elements to cut.</param>
            <returns>The cut elements.</returns>
        </member>
        <member name="T:Common.Core.IO.RawFileProperties">
            <summary>
            Raw file Settings.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFileProperties.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Core.IO.RawFile">
            <summary>
            Raw file to help loading and saving of raw file format.
            Always converts the data to a float for convenience.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String)">
            <summary>
            Load 32 bit data from file name.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String,System.Int32,Common.Core.IO.BYTE_ORDER)">
            <summary>
            Load data from file with the provided bitdepth and byte order.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Load data from file with the provided bitdepth and byte order.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(Common.Core.IO.RawFileProperties)">
            <summary>
            Load data from file with the provided format.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.FileName">
            <summary>
            The filename to load from and save to.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.BigEndian">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.BitDepth">
            <summary>
            Gets the bit depth.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ByteOrder">
            <summary>
            Gets the byte order. Only needed for 16 bit files.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ByteCount">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ElementCount">
            <summary>
            Gets the number of elements, ie float == 4 bytes.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.Data">
            <summary>
            The loaded data.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadFloat(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadShort(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadByte(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.FindSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.LoadData">
            <summary>
            Loads the bytes from file.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load8Bit(System.String)">
            <summary>
            Loads 8 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load16Bit(System.String,System.Boolean)">
            <summary>
            Loads 16 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load16Bit(System.String,Common.Core.IO.BYTE_ORDER)">
            <summary>
            Loads 16 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load32Bit(System.String)">
            <summary>
            Loads 32 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save8Bit(System.String,System.Single[])">
            <summary>
            Saves float data to 8 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save16Bit(System.String,System.Single[],System.Boolean)">
            <summary>
            Saves float data to 16 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save16Bit(System.String,System.Single[],Common.Core.IO.BYTE_ORDER)">
            <summary>
            Saves float data to 16 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save32Bit(System.String,System.Single[])">
            <summary>
            Saves float data to 32 bit..
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Degree">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.angle">
            <summary>
            The angle in degrees.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Degree.radian">
            <summary>
            The degrees angle in radians.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.A0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Degree.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.#ctor(System.Double)">
            <summary>
            Create a new degree from a value.
            </summary>
            <param name="angle">The angle in degrees.</param>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Addition(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Addition(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_UnaryNegation(Common.Core.Numerics.Degree)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Addition(System.Double,Common.Core.Numerics.Degree)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Subtraction(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Subtraction(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Subtraction(System.Double,Common.Core.Numerics.Degree)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Multiply(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Multiply(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Multiply(System.Double,Common.Core.Numerics.Degree)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Division(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Divide two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Division(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Divide a angle and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_LessThan(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Is the degree less than the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_LessThanOrEqual(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Is the degree less than or equal to the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_GreaterThan(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Is the degree greater than the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_GreaterThanOrEqual(Common.Core.Numerics.Degree,System.Double)">
            <summary>
            Is the degree greater than or equal to the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_LessThan(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Is the degree less than the other degree.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_LessThanOrEqual(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Is the degree less than or equal to the other degree.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_GreaterThan(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Is the degree greater than the other degree.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_GreaterThanOrEqual(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Is the degree greater than or equal to the other degree.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Implicit(Common.Core.Numerics.Radian)~Common.Core.Numerics.Degree">
            <summary>
            Cast from a radian to degrees.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Equality(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.op_Inequality(Common.Core.Numerics.Degree,Common.Core.Numerics.Degree)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.Equals(Common.Core.Numerics.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Degree.Rounded(System.Int32)">
            <summary>
            A rounded angle.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded angle</returns>
        </member>
        <member name="T:Common.Core.Numerics.HPoint2d">
            <summary>
            A Homogenous 2D point struct.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2d.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Addition(Common.Core.Numerics.HPoint2d,Common.Core.Numerics.HPoint2d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Addition(Common.Core.Numerics.HPoint2d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Addition(System.Double,Common.Core.Numerics.HPoint2d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Multiply(Common.Core.Numerics.HPoint2d,Common.Core.Numerics.HPoint2d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Multiply(Common.Core.Numerics.HPoint2d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Multiply(System.Double,Common.Core.Numerics.HPoint2d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Division(Common.Core.Numerics.HPoint2d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Division(System.Double,Common.Core.Numerics.HPoint2d)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Equality(Common.Core.Numerics.HPoint2d,Common.Core.Numerics.HPoint2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.op_Inequality(Common.Core.Numerics.HPoint2d,Common.Core.Numerics.HPoint2d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Equals(Common.Core.Numerics.HPoint2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.AlmostEqual(Common.Core.Numerics.HPoint2d,Common.Core.Numerics.HPoint2d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2d.RandomPoints(System.Int32,System.Int32,System.Double,Common.Core.Shapes.Box2d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="T:Common.Core.Numerics.HPoint2f">
            <summary>
            A Homogenous 2D point struct.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint2f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint2f.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Addition(Common.Core.Numerics.HPoint2f,Common.Core.Numerics.HPoint2f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Addition(Common.Core.Numerics.HPoint2f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Addition(System.Single,Common.Core.Numerics.HPoint2f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Multiply(Common.Core.Numerics.HPoint2f,Common.Core.Numerics.HPoint2f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Multiply(Common.Core.Numerics.HPoint2f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Multiply(System.Single,Common.Core.Numerics.HPoint2f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Division(Common.Core.Numerics.HPoint2f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Division(System.Single,Common.Core.Numerics.HPoint2f)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Equality(Common.Core.Numerics.HPoint2f,Common.Core.Numerics.HPoint2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.op_Inequality(Common.Core.Numerics.HPoint2f,Common.Core.Numerics.HPoint2f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Equals(Common.Core.Numerics.HPoint2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.AlmostEqual(Common.Core.Numerics.HPoint2f,Common.Core.Numerics.HPoint2f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint2f.RandomPoints(System.Int32,System.Int32,System.Single,Common.Core.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.#ctor(System.Double,System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.Vector3d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3d.Vector4d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Addition(Common.Core.Numerics.HPoint3d,Common.Core.Numerics.HPoint3d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Addition(Common.Core.Numerics.HPoint3d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Addition(System.Double,Common.Core.Numerics.HPoint3d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Multiply(Common.Core.Numerics.HPoint3d,Common.Core.Numerics.HPoint3d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Multiply(Common.Core.Numerics.HPoint3d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Multiply(System.Double,Common.Core.Numerics.HPoint3d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Division(Common.Core.Numerics.HPoint3d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Division(System.Double,Common.Core.Numerics.HPoint3d)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Equality(Common.Core.Numerics.HPoint3d,Common.Core.Numerics.HPoint3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.op_Inequality(Common.Core.Numerics.HPoint3d,Common.Core.Numerics.HPoint3d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Equals(Common.Core.Numerics.HPoint3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.AlmostEqual(Common.Core.Numerics.HPoint3d,Common.Core.Numerics.HPoint3d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3d.RandomPoints(System.Int32,System.Int32,System.Double,Common.Core.Shapes.Box3d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.HPoint3f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.#ctor(System.Single,System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.Cartesian">
            <summary>
            Convert from homogenous to cartesian space.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.Vector3f">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.HPoint3f.Vector4d">
            <summary>
            Point as vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Addition(Common.Core.Numerics.HPoint3f,Common.Core.Numerics.HPoint3f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Addition(Common.Core.Numerics.HPoint3f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Addition(System.Single,Common.Core.Numerics.HPoint3f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Multiply(Common.Core.Numerics.HPoint3f,Common.Core.Numerics.HPoint3f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Multiply(Common.Core.Numerics.HPoint3f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Multiply(System.Single,Common.Core.Numerics.HPoint3f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Division(Common.Core.Numerics.HPoint3f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Division(System.Single,Common.Core.Numerics.HPoint3f)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Equality(Common.Core.Numerics.HPoint3f,Common.Core.Numerics.HPoint3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.op_Inequality(Common.Core.Numerics.HPoint3f,Common.Core.Numerics.HPoint3f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Equals(Common.Core.Numerics.HPoint3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.AlmostEqual(Common.Core.Numerics.HPoint3f,Common.Core.Numerics.HPoint3f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.HPoint3f.RandomPoints(System.Int32,System.Int32,System.Single,Common.Core.Shapes.Box3f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="weight">The number of points weight.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Wrap(System.Int32,System.Int32)">
            <summary>
            Wrap a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Mirror(System.Int32,System.Int32)">
            <summary>
            Mirror a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.IsPow2(System.Int32)">
            <summary>
            Is number a power of 2.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.NearestPow2(System.Int32)">
            <summary>
            Return the closest pow2 number to num.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.LowerPow2(System.Int32)">
            <summary>
            Return the closest pow2 number thats less than num.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.IntPow(System.Int32,System.Int32)">
            <summary>
            Simple int pow function.
            System Math.Pow may produce precision errors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Return the Binomial coefficients.
            </summary>
            <param name="k">N</param>
            <param name="i">n</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Factorial(System.Int32)">
            <summary>
            Returns the factorial of number.
            Must be less than or equal MAX_FACTORIAL or overflow will occur.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.FactorialBI(System.Int32)">
            <summary>
            Returns the factorial of number using a BigInteger.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Permutations(System.Int32)">
            <summary>
            Given N objects, how many unique sets exist.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsOrderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsUnorderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsOrderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsUnorderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.CreateFactorialTable">
            <summary>
            Creates a look up table for factorials.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix2x2d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Addition(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Subtraction(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(System.Double,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Implicit(Common.Core.Numerics.Matrix2x2f)~Common.Core.Numerics.Matrix2x2d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Equality(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Inequality(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Equals(Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.AlmostEqual(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.TryInverse(Common.Core.Numerics.Matrix2x2d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.SetColumn(System.Int32,Common.Core.Numerics.Vector2d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.SetRow(System.Int32,Common.Core.Numerics.Vector2d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Rotate(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.ToMatrix3x3d">
            <summary>
            Convert to a float precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix2x2f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Addition(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Subtraction(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(System.Single,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Explicit(Common.Core.Numerics.Matrix2x2d)~Common.Core.Numerics.Matrix2x2f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Equality(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Inequality(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Equals(Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.AlmostEqual(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.TryInverse(Common.Core.Numerics.Matrix2x2f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.SetColumn(System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.SetRow(System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Rotate(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix3x3d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Addition(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Subtraction(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Point3d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(System.Double,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Implicit(Common.Core.Numerics.Matrix3x3f)~Common.Core.Numerics.Matrix3x3d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Equality(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Inequality(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Equals(Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.AlmostEqual(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.TryInverse(Common.Core.Numerics.Matrix3x3d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.SetColumn(System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.SetRow(System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.ToMatrix4x4d">
            <summary>
            Convert to a REAL precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Translate(Common.Core.Numerics.Vector2d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Translate(Common.Core.Numerics.Point2d)">
            <summary>
            Create a translation out of a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Scale(Common.Core.Numerics.Vector2d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Scale(Common.Core.Numerics.Point2d)">
            <summary>
            Create a scale out of a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateX(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateY(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateZ(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Rotate(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix3x3f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Addition(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Subtraction(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Point3f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(System.Single,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Explicit(Common.Core.Numerics.Matrix3x3d)~Common.Core.Numerics.Matrix3x3f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Equality(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Inequality(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Equals(Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.AlmostEqual(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.TryInverse(Common.Core.Numerics.Matrix3x3f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.SetColumn(System.Int32,Common.Core.Numerics.Vector3f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.SetRow(System.Int32,Common.Core.Numerics.Vector3f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Translate(Common.Core.Numerics.Vector2f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Translate(Common.Core.Numerics.Point2f)">
            <summary>
            Create a translation out of a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Scale(Common.Core.Numerics.Vector2f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Scale(Common.Core.Numerics.Point2f)">
            <summary>
            Create a scale out of a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateX(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateY(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateZ(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Rotate(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix4x4d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Addition(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Subtraction(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply a vector by a matrix.
            Acts like z is 0, and w is 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply a vector by a matrix.
            Acts like w is 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Point2d)">
            <summary>
            Multiply a point by a matrix.
            Acts like z is 0, and w is 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Point3d)">
            <summary>
            Multiply a point by a matrix.
            Acts like w is 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Point4d)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(System.Double,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Implicit(Common.Core.Numerics.Matrix4x4f)~Common.Core.Numerics.Matrix4x4d">
            <summary>
            Cast to double matrix from a float matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Equality(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Inequality(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Equals(Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.AlmostEqual(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TryInverse(Common.Core.Numerics.Matrix4x4d@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.SetColumn(System.Int32,Common.Core.Numerics.Vector4d)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.SetRow(System.Int32,Common.Core.Numerics.Vector4d)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.ToMatrix3x3d">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateRotateScale(Common.Core.Numerics.Point3d,Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateRotate(Common.Core.Numerics.Point3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateScale(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateScale(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Translate(Common.Core.Numerics.Point3d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Scale(Common.Core.Numerics.Point3d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateX(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateY(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateZ(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Rotate(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Rotate(Common.Core.Numerics.Radian,Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation from a angle and the rotation axis.
            </summary>
            <param name="radian">The rotation amount.</param>
            <param name="axis">The axis to rotate on.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.LookAt(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix4x4f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.IsIdentity">
            <summary>
            Is this the identity matrix.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.HasScale">
            <summary>
            Does the matric have scale.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Addition(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Subtraction(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply a vector by a matrix.
            Acts like z is 0, and w is 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a vector by a matrix.
            Acts like w is 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Point2f)">
            <summary>
            Multiply a point by a matrix.
            Acts like z is 0, and w is 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Point3f)">
            <summary>
            Multiply a point by a matrix.
            Acts like w is 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Point4f)">
            <summary>
            Multiply a point by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(System.Single,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Explicit(Common.Core.Numerics.Matrix4x4d)~Common.Core.Numerics.Matrix4x4f">
            <summary>
            Cast to float matrix from a double matrix.
            </summary>
            <param name="m">The other matrix</param>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Equality(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Inequality(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Equals(Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.AlmostEqual(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TryInverse(Common.Core.Numerics.Matrix4x4f@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.SetColumn(System.Int32,Common.Core.Numerics.Vector4f)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.SetRow(System.Int32,Common.Core.Numerics.Vector4f)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.ToMatrix3x3f">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateRotateScale(Common.Core.Numerics.Point3f,Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateRotate(Common.Core.Numerics.Point3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateScale(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateScale(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Translate(Common.Core.Numerics.Point3f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Scale(Common.Core.Numerics.Point3f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateX(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateY(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateZ(Common.Core.Numerics.Radian)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Rotate(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Rotate(Common.Core.Numerics.Radian,Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation from a angle and the rotation axis.
            </summary>
            <param name="radian">The rotation amount.</param>
            <param name="axis">The axis to rotate on.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.LookAt(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Homogenous">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.ToHomogenous(System.Double)">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Addition(Common.Core.Numerics.Point2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Addition(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Addition(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Addition(System.Double,Common.Core.Numerics.Point2d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_UnaryNegation(Common.Core.Numerics.Point2d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Subtraction(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Subtraction(Common.Core.Numerics.Point2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Subtraction(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Subtraction(System.Double,Common.Core.Numerics.Point2d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Multiply(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Multiply(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Multiply(System.Double,Common.Core.Numerics.Point2d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Division(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Division(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Division(System.Double,Common.Core.Numerics.Point2d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Implicit(Common.Core.Numerics.Point2f)~Common.Core.Numerics.Point2d">
            <summary>
            Cast from Point2f to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Implicit(Common.Core.Numerics.Point2i)~Common.Core.Numerics.Point2d">
            <summary>
            Cast from Point2i to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Implicit(Common.Core.Numerics.Vector2f)~Common.Core.Numerics.Point2d">
            <summary>
            Cast from Vector2f to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Implicit(Common.Core.Numerics.Vector2d)~Common.Core.Numerics.Point2d">
            <summary>
            Cast from Vector2d to Point2d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Equality(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.op_Inequality(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.AlmostEqual(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Equals(Common.Core.Numerics.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Distance(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.SqrDistance(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Direction(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Angle180(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Angle360(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Min(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Min(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Max(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Max(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Clamp(Common.Core.Numerics.Point2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Clamp(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Lerp(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2d.RandomPoints(System.Int32,System.Int32,Common.Core.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.IsFinite">
            <summary>
            Are all the components of point finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.Magnitude">
            <summary>
            The length of the point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Addition(Common.Core.Numerics.Point2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Addition(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Addition(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Addition(System.Single,Common.Core.Numerics.Point2f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_UnaryNegation(Common.Core.Numerics.Point2f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Subtraction(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Subtraction(Common.Core.Numerics.Point2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Subtraction(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Subtraction(System.Single,Common.Core.Numerics.Point2f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Multiply(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Multiply(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Multiply(System.Single,Common.Core.Numerics.Point2f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Division(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Division(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Division(System.Single,Common.Core.Numerics.Point2f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Explicit(Common.Core.Numerics.Point2d)~Common.Core.Numerics.Point2f">
            <summary>
            Cast from Point2d to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Implicit(Common.Core.Numerics.Point2i)~Common.Core.Numerics.Point2f">
            <summary>
            Cast from Point2i to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Explicit(Common.Core.Numerics.Vector2d)~Common.Core.Numerics.Point2f">
            <summary>
            Cast from Vector2d to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Implicit(Common.Core.Numerics.Vector2f)~Common.Core.Numerics.Point2f">
            <summary>
            Cast from Vector2f to Point2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Equality(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.op_Inequality(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.AlmostEqual(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Equals(Common.Core.Numerics.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Distance(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.SqrDistance(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Direction(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Angle180(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Angle360(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Min(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Min(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Max(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Max(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Clamp(Common.Core.Numerics.Point2f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Clamp(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Lerp(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2f.RandomPoints(System.Int32,System.Int32,Common.Core.Shapes.Box2f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point2i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.xy0">
            <summary>
            2D point to 3D point with z as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.x0y">
            <summary>
            2D point to 3D point with y as z.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.xy1">
            <summary>
            2D point to 3D point with z as 1.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.xy00">
            <summary>
            2D point to 4D point with z as 0 and w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.xy01">
            <summary>
            2D point to 4D point with z as 0 and w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.#ctor(System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.#ctor(System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point2i.SqrMagnitude">
            <summary>
            The length of the point squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Addition(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Addition(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Addition(System.Int32,Common.Core.Numerics.Point2i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_UnaryNegation(Common.Core.Numerics.Point2i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Subtraction(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Subtraction(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Subtraction(System.Int32,Common.Core.Numerics.Point2i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Multiply(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Multiply(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Multiply(System.Int32,Common.Core.Numerics.Point2i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Division(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Division(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Division(System.Int32,Common.Core.Numerics.Point2i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Explicit(Common.Core.Numerics.Point2f)~Common.Core.Numerics.Point2i">
            <summary>
            Cast from Point2f to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Explicit(Common.Core.Numerics.Point2d)~Common.Core.Numerics.Point2i">
            <summary>
            Cast from Point2d to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Explicit(Common.Core.Numerics.Vector2f)~Common.Core.Numerics.Point2i">
            <summary>
            Cast from Vector2f to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Explicit(Common.Core.Numerics.Vector2d)~Common.Core.Numerics.Point2i">
            <summary>
            Cast from Vector2d to Point2i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Equality(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.op_Inequality(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Equals(Common.Core.Numerics.Point2i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Distance(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.SqrDistance(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Min(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Min(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Max(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Max(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Clamp(Common.Core.Numerics.Point2i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point2i.Clamp(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.zy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Homogenous">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.ToHomogenous(System.Double)">
            <summary>
            Point as a homogenous point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Addition(Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Addition(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Addition(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Addition(System.Double,Common.Core.Numerics.Point3d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_UnaryNegation(Common.Core.Numerics.Point3d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Subtraction(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Subtraction(Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Subtraction(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Subtraction(System.Double,Common.Core.Numerics.Point3d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Multiply(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Multiply(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Multiply(System.Double,Common.Core.Numerics.Point3d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Division(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Division(System.Double,Common.Core.Numerics.Point3d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Division(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Implicit(Common.Core.Numerics.Point3f)~Common.Core.Numerics.Point3d">
            <summary>
            Cast from Point3f to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Implicit(Common.Core.Numerics.Point3i)~Common.Core.Numerics.Point3d">
            <summary>
            Cast from Point3i to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Implicit(Common.Core.Numerics.Vector3f)~Common.Core.Numerics.Point3d">
            <summary>
            Cast from Vector3f to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Implicit(Common.Core.Numerics.Vector3d)~Common.Core.Numerics.Point3d">
            <summary>
            Cast from Vector3d to Point3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Equality(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.op_Inequality(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Equals(Common.Core.Numerics.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.AlmostEqual(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Distance(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.SqrDistance(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Direction(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Min(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Min(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Max(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Max(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Clamp(Common.Core.Numerics.Point3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Clamp(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Lerp(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3d.RandomPoints(System.Int32,System.Int32,Common.Core.Shapes.Box3d)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.zy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Addition(Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Add two point and vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Addition(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Addition(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Addition(System.Single,Common.Core.Numerics.Point3f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_UnaryNegation(Common.Core.Numerics.Point3f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Subtraction(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Subtraction(Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Subtraction(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Subtraction(System.Single,Common.Core.Numerics.Point3f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Multiply(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Multiply(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Multiply(System.Single,Common.Core.Numerics.Point3f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Division(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Division(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Division(System.Single,Common.Core.Numerics.Point3f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Explicit(Common.Core.Numerics.Point3d)~Common.Core.Numerics.Point3f">
            <summary>
            Cast from Point3d to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Implicit(Common.Core.Numerics.Point3i)~Common.Core.Numerics.Point3f">
            <summary>
            Cast from Point3i to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Explicit(Common.Core.Numerics.Vector3d)~Common.Core.Numerics.Point3f">
            <summary>
            Cast from Vector3d to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Implicit(Common.Core.Numerics.Vector3f)~Common.Core.Numerics.Point3f">
            <summary>
            Cast from Vector3f to Point3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Equality(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.op_Inequality(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Equals(Common.Core.Numerics.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.AlmostEqual(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Distance(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.SqrDistance(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Direction(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Min(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Min(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Max(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Max(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Clamp(Common.Core.Numerics.Point3f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Clamp(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Lerp(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3f.RandomPoints(System.Int32,System.Int32,Common.Core.Shapes.Box3f)">
            <summary>
            Create a array of random points.
            </summary>
            <param name="seed">The seed</param>
            <param name="count">The number of points to create.</param>
            <param name="range">The range of the points.</param>
            <returns>The point array.</returns>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point3i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.xzy">
            <summary>
            3D point to 3D swizzle point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.xy">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.xz">
            <summary>
            3D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.xyz0">
            <summary>
            3D point to 4D point with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.xyz1">
            <summary>
            3D point to 4D point with w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point3i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Addition(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Addition(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Addition(System.Int32,Common.Core.Numerics.Point3i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_UnaryNegation(Common.Core.Numerics.Point3i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Subtraction(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Subtraction(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Subtraction(System.Int32,Common.Core.Numerics.Point3i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Multiply(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Multiply(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Multiply(System.Int32,Common.Core.Numerics.Point3i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Division(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Division(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Division(System.Int32,Common.Core.Numerics.Point3i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Explicit(Common.Core.Numerics.Point3f)~Common.Core.Numerics.Point3i">
            <summary>
            Cast from Point3f to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Explicit(Common.Core.Numerics.Point3d)~Common.Core.Numerics.Point3i">
            <summary>
            Cast from Point3d to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Explicit(Common.Core.Numerics.Vector3f)~Common.Core.Numerics.Point3i">
            <summary>
            Cast from Vector3f to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Explicit(Common.Core.Numerics.Vector3d)~Common.Core.Numerics.Point3i">
            <summary>
            Cast from Vector3d to Point3i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Equality(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.op_Inequality(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Equals(Common.Core.Numerics.Point3i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Distance(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.SqrDistance(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Min(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Min(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Max(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Max(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Clamp(Common.Core.Numerics.Point3i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point3i.Clamp(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.IsFinite">
            <summary>
            Are all the components ofpoint finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Addition(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Addition(Common.Core.Numerics.Point4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Addition(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Addition(System.Double,Common.Core.Numerics.Point4d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_UnaryNegation(Common.Core.Numerics.Point4d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Subtraction(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Subtraction(Common.Core.Numerics.Point4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Subtraction(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Subtraction(System.Double,Common.Core.Numerics.Point4d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Multiply(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Multiply(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Multiply(System.Double,Common.Core.Numerics.Point4d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Division(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Division(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Division(System.Double,Common.Core.Numerics.Point4d)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Implicit(Common.Core.Numerics.Point4f)~Common.Core.Numerics.Point4d">
            <summary>
            Cast from Point4f to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Implicit(Common.Core.Numerics.Point4i)~Common.Core.Numerics.Point4d">
            <summary>
            Cast from Point4i to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Implicit(Common.Core.Numerics.Vector4f)~Common.Core.Numerics.Point4d">
            <summary>
            Cast from Vector4f to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Implicit(Common.Core.Numerics.Vector4d)~Common.Core.Numerics.Point4d">
            <summary>
            Cast from Vector4d to Point4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Equality(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.op_Inequality(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Equals(Common.Core.Numerics.Point4d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.AlmostEqual(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Distance(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.SqrDistance(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Direction(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Min(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Min(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Max(Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Max(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Clamp(Common.Core.Numerics.Point4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Clamp(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Lerp(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4d.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4f.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.IsFinite">
            <summary>
            Are all the components of point finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Finite">
            <summary>
            Make a point with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.IsNAN">
            <summary>
            Are any of the points components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.NoNAN">
            <summary>
            Make a point with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Addition(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Addition(Common.Core.Numerics.Point4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Add a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Addition(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Addition(System.Single,Common.Core.Numerics.Point4f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_UnaryNegation(Common.Core.Numerics.Point4f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Subtraction(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Subtraction(Common.Core.Numerics.Point4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Subtract a point and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Subtraction(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Subtraction(System.Single,Common.Core.Numerics.Point4f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Multiply(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Multiply(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Multiply(System.Single,Common.Core.Numerics.Point4f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Division(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Division(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Division(System.Single,Common.Core.Numerics.Point4f)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Explicit(Common.Core.Numerics.Point4d)~Common.Core.Numerics.Point4f">
            <summary>
            Cast from Point4d to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Implicit(Common.Core.Numerics.Point4i)~Common.Core.Numerics.Point4f">
            <summary>
            Cast from Point4i to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Implicit(Common.Core.Numerics.Vector4f)~Common.Core.Numerics.Point4f">
            <summary>
            Cast from Vector4f to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Explicit(Common.Core.Numerics.Vector4d)~Common.Core.Numerics.Point4f">
            <summary>
            Cast from Vector4d to Point4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Equality(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.op_Inequality(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Equals(Common.Core.Numerics.Point4f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.AlmostEqual(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Are these points equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Distance(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.SqrDistance(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Direction(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f,System.Boolean)">
            <summary>
            Direction between two points.
            </summary>
            <param name="v0">The first point.</param>
            <param name="v1">The second point.</param>
            <param name="normalize">Should the vector be normalized.</param>
            <returns>The vector from v0 to v1.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Min(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Min(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Max(Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Max(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Clamp(Common.Core.Numerics.Point4f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Clamp(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Lerp(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded point</returns>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Round(System.Int32)">
            <summary>
            Round the point.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Floor">
            <summary>
            Floor each component if point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4f.Ceilling">
            <summary>
            Ceilling each component if point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.UnitW">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.MaxValue">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Point4i.MinValue">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.xy">
            <summary>
            4D point to 2D point.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.xyz">
            <summary>
            4D point to 3D point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.#ctor(System.Int32)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.Sum">
            <summary>
            The sum of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.Product">
            <summary>
            The product of the points components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.Absolute">
            <summary>
            The points absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Point4i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Addition(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Addition(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Addition(System.Int32,Common.Core.Numerics.Point4i)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_UnaryNegation(Common.Core.Numerics.Point4i)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Subtraction(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Subtraction(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Subtraction(System.Int32,Common.Core.Numerics.Point4i)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Multiply(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Multiply(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Multiply(System.Int32,Common.Core.Numerics.Point4i)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Division(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Division(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Division(System.Int32,Common.Core.Numerics.Point4i)">
            <summary>
            Divide a scalar and a point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Explicit(Common.Core.Numerics.Point4f)~Common.Core.Numerics.Point4i">
            <summary>
            Cast from Point4f to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Explicit(Common.Core.Numerics.Point4d)~Common.Core.Numerics.Point4i">
            <summary>
            Cast from Point4d to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Explicit(Common.Core.Numerics.Vector4f)~Common.Core.Numerics.Point4i">
            <summary>
            Cast from Vector4f to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Explicit(Common.Core.Numerics.Vector4d)~Common.Core.Numerics.Point4i">
            <summary>
            Cast from Vector4d to Point4i.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Equality(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.op_Inequality(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Equals(Common.Core.Numerics.Point4i)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Min(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Min(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Max(Common.Core.Numerics.Point4i,System.Int32)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Max(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Clamp(Common.Core.Numerics.Point4i,System.Int32,System.Int32)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Point4i.Clamp(Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i,Common.Core.Numerics.Point4i)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Subtraction(Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Subtract a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_UnaryNegation(Common.Core.Numerics.Quaternion3d)">
            <summary>
            Negate a quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Subtraction(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Subtract two quaternions.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Addition(Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Add a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Addition(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Add two quaternions.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Multiply a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Division(Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Divide a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Multiply two quternions together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Equality(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Inequality(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Equals(Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToMatrix3x3d">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToMatrix4x4d">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Dot(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Slerp(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.FromEuler(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateX(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateY(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateZ(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Subtraction(Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Subtract a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Subtraction(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Subtract two quaternions.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_UnaryNegation(Common.Core.Numerics.Quaternion3f)">
            <summary>
            Negate a quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Addition(Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Add a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Addition(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Add two quaternions.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Multiply a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Division(Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Divide a quaternion and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Multiply two quaternions together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Equality(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Inequality(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Equals(Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Dot(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Slerp(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.FromEuler(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateX(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateY(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateZ(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="T:Common.Core.Numerics.Radian">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.angle">
            <summary>
            The angle in radians.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Radian.degree">
            <summary>
            The radian angle in degees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.PI">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A45">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Radian.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.#ctor(System.Double)">
            <summary>
            Create a new radian from a value.
            </summary>
            <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Addition(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Addition(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_UnaryNegation(Common.Core.Numerics.Radian)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Addition(System.Double,Common.Core.Numerics.Radian)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Subtraction(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Subtraction(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Subtraction(System.Double,Common.Core.Numerics.Radian)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Multiply(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Multiply(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_LessThan(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Is the radian less than the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_LessThanOrEqual(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Is the radian less than or equal to the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_GreaterThan(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Is the radian greater than the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_GreaterThanOrEqual(Common.Core.Numerics.Radian,System.Double)">
            <summary>
            Is the radian greater than or equal to the scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_LessThan(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Is the radian less than the other radian.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_LessThanOrEqual(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Is the radian less than or equal to the other radian.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_GreaterThan(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Is the radian greater than the other radian.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_GreaterThanOrEqual(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Is the radian greater than or equal to the other radian.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Multiply(System.Double,Common.Core.Numerics.Radian)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Implicit(Common.Core.Numerics.Degree)~Common.Core.Numerics.Radian">
            <summary>
            Cast from a degrees to radians.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Equality(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.op_Inequality(Common.Core.Numerics.Radian,Common.Core.Numerics.Radian)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.Equals(Common.Core.Numerics.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Radian.Rounded(System.Int32)">
            <summary>
            A rounded angle.
            </summary>
            <param name="digits">The number of digits to round to.</param>
            <returns>The rounded angle</returns>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_UnaryNegation(Common.Core.Numerics.Vector2d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Division(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Division(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Division(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Implicit(Common.Core.Numerics.Vector2f)~Common.Core.Numerics.Vector2d">
            <summary>
            Cast from Vector2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Implicit(Common.Core.Numerics.Point2f)~Common.Core.Numerics.Vector2d">
            <summary>
            Cast from Point2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Implicit(Common.Core.Numerics.Point2d)~Common.Core.Numerics.Vector2d">
            <summary>
            Cast from Point2d to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Equality(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Inequality(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.AlmostEqual(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Equals(Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.CompareTo(Common.Core.Numerics.Vector2d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Dot(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Dot(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Point2d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Dot(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            The dot product of two pointss.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.AbsDot(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Cross(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Project(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Reflect(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Refract(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Angle180(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Angle360(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Min(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Min(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Max(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Max(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Clamp(Common.Core.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Clamp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Lerp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Slerp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            A vector from the variables.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_UnaryNegation(Common.Core.Numerics.Vector2f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Division(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Division(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Division(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Explicit(Common.Core.Numerics.Vector2d)~Common.Core.Numerics.Vector2f">
            <summary>
            Cast from Vector2d to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Explicit(Common.Core.Numerics.Point2d)~Common.Core.Numerics.Vector2f">
            <summary>
            Cast from Point2d to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Implicit(Common.Core.Numerics.Point2f)~Common.Core.Numerics.Vector2f">
            <summary>
            Cast from Point2f to Vector2f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Equality(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Inequality(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.AlmostEqual(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Equals(Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.CompareTo(Common.Core.Numerics.Vector2f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Dot(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Dot(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Point2f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Dot(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            The dot product of two pointss.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.AbsDot(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Cross(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Project(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Reflect(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Refract(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Angle180(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Angle360(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Min(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Min(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Max(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Max(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Clamp(Common.Core.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Clamp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Lerp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Slerp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xzy">
            <summary>
            3D vector to 3D swizzle vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xz">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.zy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xyz0">
            <summary>
            3D vector to 4D vector with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xyz1">
            <summary>
            3D vector to 4D vector with w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            A vector from a 2d vector and the z varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_UnaryNegation(Common.Core.Numerics.Vector3d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Division(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Division(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Division(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Implicit(Common.Core.Numerics.Vector3f)~Common.Core.Numerics.Vector3d">
            <summary>
            Cast from Vector3f to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Implicit(Common.Core.Numerics.Point3f)~Common.Core.Numerics.Vector3d">
            <summary>
            Cast from Point3f to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Implicit(Common.Core.Numerics.Point3d)~Common.Core.Numerics.Vector3d">
            <summary>
            Cast from Point3d to Vector3d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Equality(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Inequality(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.AlmostEqual(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Equals(Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.CompareTo(Common.Core.Numerics.Vector3d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Dot(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Dot(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Point3d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Dot(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.AbsDot(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Angle180(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Point3d)">
            <summary>
            Cross a vector andpoint.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Cross two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Project(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Reflect(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Refract(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double,Common.Core.Numerics.Vector3d@)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
            <param name="i">The incident vector</param>
            <param name="n">The normal vector</param>
            <param name="eta">The refraction index</param>
            <param name="r">The reflected ray.</param>
            <returns>True if there is a solution.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Orthonormal(Common.Core.Numerics.Vector3d@,Common.Core.Numerics.Vector3d@,Common.Core.Numerics.Vector3d@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Min(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Min(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Max(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Max(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Clamp(Common.Core.Numerics.Vector3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Clamp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Lerp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Slerp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xzy">
            <summary>
            3D vector to 3D swizzle vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xz">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.zy">
            <summary>
            3D vector to 2D vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xyz0">
            <summary>
            3D vector to 4D vector with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xyz1">
            <summary>
            3D vector to 4D vector with w as 1.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            A vector from a 2d vector and the z varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_UnaryNegation(Common.Core.Numerics.Vector3f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Division(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Division(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Division(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Explicit(Common.Core.Numerics.Vector3d)~Common.Core.Numerics.Vector3f">
            <summary>
            Cast from Vector3d to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Explicit(Common.Core.Numerics.Point3d)~Common.Core.Numerics.Vector3f">
            <summary>
            Cast from Point3d to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Implicit(Common.Core.Numerics.Point3f)~Common.Core.Numerics.Vector3f">
            <summary>
            Cast from Point3f to Vector3f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Equality(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Inequality(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.AlmostEqual(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Equals(Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.CompareTo(Common.Core.Numerics.Vector3f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Dot(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Dot(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Point3f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Dot(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.AbsDot(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Angle180(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Point3f)">
            <summary>
            Cross a vector andpoint.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Cross two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Project(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Reflect(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Refract(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single,Common.Core.Numerics.Vector3f@)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
            <param name="i">The incident vector</param>
            <param name="n">The normal vector</param>
            <param name="eta">The refraction index</param>
            <param name="r">The reflected ray.</param>
            <returns>True if there is a solution.</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Orthonormal(Common.Core.Numerics.Vector3f@,Common.Core.Numerics.Vector3f@,Common.Core.Numerics.Vector3f@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Min(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Min(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Max(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Max(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Clamp(Common.Core.Numerics.Vector3f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Clamp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Lerp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Slerp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(Common.Core.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_UnaryNegation(Common.Core.Numerics.Vector4d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Division(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Division(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Division(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Implicit(Common.Core.Numerics.Vector4f)~Common.Core.Numerics.Vector4d">
            <summary>
            Cast from Vector4f to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Implicit(Common.Core.Numerics.Point4f)~Common.Core.Numerics.Vector4d">
            <summary>
            Cast from Point4f to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Implicit(Common.Core.Numerics.Point4d)~Common.Core.Numerics.Vector4d">
            <summary>
            Cast from Point4d to Vector4d.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Equality(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Inequality(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.AlmostEqual(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Equals(Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.CompareTo(Common.Core.Numerics.Vector4d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Dot(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Dot(Common.Core.Numerics.Point4d,Common.Core.Numerics.Point4d)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Dot(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Point4d)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.AbsDot(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Min(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Min(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Max(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Max(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Clamp(Common.Core.Numerics.Vector4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Clamp(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Lerp(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(Common.Core.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.IsFinite">
            <summary>
            Are all the components of vector finite.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Finite">
            <summary>
            Make a vector with no non finite conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.IsNAN">
            <summary>
            Are any of the vectors components nan.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.NoNAN">
            <summary>
            Make a vector with no nan conponents.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_UnaryNegation(Common.Core.Numerics.Vector4f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Division(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Division(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Division(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Divide a scalar and a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Explicit(Common.Core.Numerics.Vector4d)~Common.Core.Numerics.Vector4f">
            <summary>
            Cast from Vector4d to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Explicit(Common.Core.Numerics.Point4d)~Common.Core.Numerics.Vector4f">
            <summary>
            Cast from Point4d to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Implicit(Common.Core.Numerics.Point4f)~Common.Core.Numerics.Vector4f">
            <summary>
            Cast from Point4f to Vector4f.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Equality(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Inequality(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.AlmostEqual(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Equals(Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.CompareTo(Common.Core.Numerics.Vector4f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Dot(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Dot(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Point4f)">
            <summary>
            The dot product of vector and point.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Dot(Common.Core.Numerics.Point4f,Common.Core.Numerics.Point4f)">
            <summary>
            The dot product of two points.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.AbsDot(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Min(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Min(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Max(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Max(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Clamp(Common.Core.Numerics.Vector4f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Clamp(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Lerp(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Round(System.Int32)">
            <summary>
            Round the vector.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Floor">
            <summary>
            Floor each component of vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Ceilling">
            <summary>
            Ceilling each component of vector.
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.LCHGenerator">
            <summary>
            A linear congruential generator (LCG) is an algorithm that yields
            a sequence of pseudo-randomized numbers calculated with a discontinuous 
            piecewise linear equation. The method represents one of the oldest 
            and best-known pseudorandom number generator algorithms.
            If increment = 0, the generator is often called a multiplicative congruential generator
            https://en.wikipedia.org/wiki/Linear_congruential_generator
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.MersenneTwister">
            <summary>
            The Mersenne Twister is a pseudorandom number generator (PRNG). 
            It is by far the most widely used general-purpose PRNG.
            Its name derives from the fact that its period length is chosen to be a Mersenne prime. 
            For all the details on this algorithm, see the original paper:
            http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf
            https://en.wikipedia.org/wiki/Mersenne_Twister
            https://github.com/cslarsen/mersenne-twister/blob/master/mersenne-twister.cpp
            </summary>
        </member>
        <member name="F:Common.Core.RandomNum.MersenneTwister.SIZE">
            <summary>
            We have an array of 624 32-bit values, and there are 31 unused bits, so we
            have a seed value of 624*32-31 = 19937 bits.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.M32(System.UInt32)">
            <summary>
            32nd MSB
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.L31(System.UInt32)">
            <summary>
            31 LSBs
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.RandomGenerator">
            <summary>
            A base class for generating a random number.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.#ctor">
            <summary>
            Create a random number with a randow seed.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.#ctor(System.Int32)">
            <summary>
            Create a random number.
            </summary>
            <param name="seed">The seed for the generator.</param>
        </member>
        <member name="P:Common.Core.RandomNum.RandomGenerator.Value">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="P:Common.Core.RandomNum.RandomGenerator.Seed">
            <summary>
            The seed for the random generator.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next(System.Int32)">
            <summary>
            A random int greater than or equal to 0 and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next(System.Int32,System.Int32)">
            <summary>
            A random int greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            A random double greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.NextDouble">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.Next">
            <summary>
            A random int between 0 - MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="T:Common.Core.Shapes.Box2d">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2d.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2d.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.#ctor(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2d.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Equals(Common.Core.Shapes.Box2d)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point2d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.GetCornersXZ(System.Collections.Generic.IList{Common.Core.Numerics.Point3d},System.Double)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2d points into 3d points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3d points y value.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Enlarge(Common.Core.Shapes.Box2d,Common.Core.Numerics.Point2d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Enlarge(Common.Core.Shapes.Box2d,Common.Core.Shapes.Box2d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Expand(Common.Core.Shapes.Box2d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Contains(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point2d})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.CalculateBounds(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Shapes.Segment2d})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Common.Core.Shapes.Box2f">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2f.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2f.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.#ctor(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2f.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Equals(Common.Core.Shapes.Box2f)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point2f})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.GetCornersXZ(System.Collections.Generic.IList{Common.Core.Numerics.Point3f},System.Single)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2f points into 3f points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3f points y value.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Enlarge(Common.Core.Shapes.Box2f,Common.Core.Numerics.Point2f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Enlarge(Common.Core.Shapes.Box2f,Common.Core.Shapes.Box2f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Expand(Common.Core.Shapes.Box2f,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Contains(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point2f})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.CalculateBounds(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Shapes.Segment2f})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Common.Core.Shapes.Box2i">
            <summary>
            A 2D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2i.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box2i.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.#ctor(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Corner00">
            <summary>
            The boxes lower left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Corner10">
            <summary>
            The boxes lower right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Corner11">
            <summary>
            The boxes upper right corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Corner01">
            <summary>
            The boxes upper left corner.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box2i.Area">
            <summary>
            The area of the box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.EnumeratePerimeter(System.Int32)">
            <summary>
            Enumerate each point on the boxes perimeter in ccw order.
            </summary>
            <returns></returns>
            <param name="width">The width of the perimeter.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.EnumerateBounds">
            <summary>
            Enumerate each point in the box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Equals(Common.Core.Shapes.Box2i)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point2i})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.GetCornersXZ(System.Collections.Generic.IList{Common.Core.Numerics.Point3i},System.Int32)">
            <summary>
            Copy the boxes corner points in the array.
            Convert the 2i points into 3i points with the
            y component now as the z component.
            </summary>
            <param name="corners">A array that has a size of at least 4.</param>
            <param name="y">The 3i points y value.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Enlarge(Common.Core.Shapes.Box2i,Common.Core.Numerics.Point2i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Enlarge(Common.Core.Shapes.Box2i,Common.Core.Shapes.Box2i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Expand(Common.Core.Shapes.Box2i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Intersects(Common.Core.Shapes.Box2i,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Contains(Common.Core.Shapes.Box2i,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Contains(Common.Core.Numerics.Point2i,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.Closest(Common.Core.Numerics.Point2i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point2i})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box2i.CalculateBounds(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="T:Common.Core.Shapes.Box3d">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3d.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3d.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3d.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Equals(Common.Core.Shapes.Box3d)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point3d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Enlarge(Common.Core.Shapes.Box3d,Common.Core.Numerics.Point3d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Enlarge(Common.Core.Shapes.Box3d,Common.Core.Shapes.Box3d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Expand(Common.Core.Shapes.Box3d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Intersects(Common.Core.Shapes.Box3d,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Contains(Common.Core.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Contains(Common.Core.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Closest(Common.Core.Numerics.Point3d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.SignedDistance(Common.Core.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point3d})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.CalculateBounds(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Shapes.Segment3d})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Common.Core.Shapes.Box3f">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3f.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3f.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Bounds">
            <summary>
            The boxes bounding box is just itself.
            Needed for the IShape interface.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3f.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Equals(Common.Core.Shapes.Box3f)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point3f})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Enlarge(Common.Core.Shapes.Box3f,Common.Core.Numerics.Point3f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Enlarge(Common.Core.Shapes.Box3f,Common.Core.Shapes.Box3f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Expand(Common.Core.Shapes.Box3f,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Intersects(Common.Core.Shapes.Box3f,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Contains(Common.Core.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Contains(Common.Core.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Closest(Common.Core.Numerics.Point3f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.SignedDistance(Common.Core.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.Round(System.Int32)">
            <summary>
            Round the boxes components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point3f})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.CalculateBounds(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Shapes.Segment3f})">
            <summary>
            Caculate the bounding box of a set of segments.
            </summary>
            <param name="segments">The segments.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Common.Core.Shapes.Box3i">
            <summary>
            A 3D box represented by its min and max values.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3i.Min">
            <summary>
            The boxes min point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Box3i.Max">
            <summary>
            The boxes max point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.#ctor(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Construct a new box.
            </summary>
            <param name="min">The boxes min point.</param>
            <param name="max">The boxes max point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Size">
            <summary>
            The size of the boxes sides.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Width">
            <summary>
            The size of the box on the x axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Height">
            <summary>
            The size of the box on the y axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Depth">
            <summary>
            The size of the box on the z axis.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.Volume">
            <summary>
            The volume of the box.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Box3i.SurfaceArea">
            <summary>
            THe boxes surface area.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Equals(System.Object)">
            <summary>
            Is the box equal to this obj.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the box equal to this obj.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Equals(Common.Core.Shapes.Box3i)">
            <summary>
            Is the box equal to the other box.
            </summary>
            <param name="box">The other box.</param>
            <returns>Is the box equal to the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.GetHashCode">
            <summary>
            The boxes hash code.
            </summary>
            <returns>The boxes hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.GetCorners">
            <summary>
            Get the boxes corner points as a array.
            </summary>
            <returns>The boxes corner points as a array</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point3i})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.GetCorners(System.Collections.Generic.IList{Common.Core.Numerics.Point4d})">
            <summary>
            Copy the boxes corner points in the array.
            </summary>
            <param name="corners">A array that has a size of at least 8.</param>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Enlarge(Common.Core.Shapes.Box3i,Common.Core.Numerics.Point3i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Enlarge(Common.Core.Shapes.Box3i,Common.Core.Shapes.Box3i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Expand(Common.Core.Shapes.Box3i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Intersects(Common.Core.Shapes.Box3i,System.Boolean)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Returns true if this box intersects the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Contains(Common.Core.Shapes.Box3i,System.Boolean)">
            <summary>
            Does the box fully contain the other box.
            </summary>
            <param name="box">The other box.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>Does the box fully contain the other box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Contains(Common.Core.Numerics.Point3i,System.Boolean)">
            <summary>
            Does the box contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">True if on border counts as inside.</param>
            <returns>True if the box contains the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.Closest(Common.Core.Numerics.Point3i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point3i})">
            <summary>
            Caculate the bounding box of the points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Box3i.CalculateBounds(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Calculate the bounds of 2 points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="P:Common.Core.Shapes.Circle2d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2d.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2d.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2d.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2d.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.GetHashCode">
            <summary>
            The circles hashcode.
            </summary>
            <returns>The circles hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Contains(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the circle fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle fully contain the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Intersects(Common.Core.Shapes.Circle2d,System.Boolean)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the circle intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.Enlarge(Common.Core.Shapes.Circle2d,Common.Core.Numerics.Point2d)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.InCircle(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.CircumCircle(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.CircumCircle(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.CalculateBounds(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point2d})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2d.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Point2d})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2f.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2f.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2f.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Circle2f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.GetHashCode">
            <summary>
            The circles hashcode.
            </summary>
            <returns>The circles hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Contains(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the circle fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle fully contain the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Intersects(Common.Core.Shapes.Circle2f,System.Boolean)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the circle intersect the box.
            </summary>
            <param name="box">The box.</param>
            <param name="includeBorder">Does the border conunt as inside the circle.</param>
            <returns>Does the circle intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.Enlarge(Common.Core.Shapes.Circle2f,Common.Core.Numerics.Point2f)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.InCircle(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.CircumCircle(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.CircumCircle(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.CalculateBounds(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point2f})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Circle2f.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Point2f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:Common.Core.Shapes.Line2d">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.#ctor(System.Double,System.Double)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.#ctor(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2d.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.Equals(System.Object)">
            <summary>
            Is the line equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the line equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.Equals(Common.Core.Shapes.Line2d)">
            <summary>
            Is the line equal to the other line.
            </summary>
            <param name="line">The other line.</param>
            <returns>Is the line equal to the other line.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.GetHashCode">
            <summary>
            The lines hash code.
            </summary>
            <returns>The lines hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.X(System.Double)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.Y(System.Double)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.PointOnLine(Common.Core.Numerics.Point2d)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.PerpendicularLine(Common.Core.Numerics.Point2d)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.IsLeftPoint(Common.Core.Numerics.Point2d)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.IsRightPoint(Common.Core.Numerics.Point2d)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.AreEquivalent(Common.Core.Shapes.Line2d)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2d.Intersects(Common.Core.Shapes.Line2d,Common.Core.Numerics.Point2d@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="T:Common.Core.Shapes.Line2f">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.#ctor(System.Single,System.Single)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.#ctor(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Line2f.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.Equals(System.Object)">
            <summary>
            Is the line equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the line equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.Equals(Common.Core.Shapes.Line2f)">
            <summary>
            Is the line equal to the other line.
            </summary>
            <param name="line">The other line.</param>
            <returns>Is the line equal to the other line.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.GetHashCode">
            <summary>
            The lines hash code.
            </summary>
            <returns>The lines hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.X(System.Single)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.Y(System.Single)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.PointOnLine(Common.Core.Numerics.Point2f)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.PerpendicularLine(Common.Core.Numerics.Point2f)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.IsLeftPoint(Common.Core.Numerics.Point2f)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.IsRightPoint(Common.Core.Numerics.Point2f)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.AreEquivalent(Common.Core.Shapes.Line2f)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line2f.Intersects(Common.Core.Shapes.Line2f,Common.Core.Numerics.Point2f@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="T:Common.Core.Shapes.Line3d">
            <summary>
            A 3D Line struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Line3d.Position">
            <summary>
            The Lines position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Line3d.Direction">
            <summary>
            The Lines direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Construct a Line from a point and the direction.
            </summary>
            <param name="position">The Lines position.</param>
            <param name="direction">The Lines direction (will be normalized)</param>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.op_Equality(Common.Core.Shapes.Line3d,Common.Core.Shapes.Line3d)">
            <summary>
            Check if the two Lines are equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.op_Inequality(Common.Core.Shapes.Line3d,Common.Core.Shapes.Line3d)">
            <summary>
            Check if the two Lines are not equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.Equals(System.Object)">
            <summary>
            Is the Line equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the Line equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.Equals(Common.Core.Shapes.Line3d)">
            <summary>
            Is the Line equal to the other Line.
            </summary>
            <param name="Line">The over Line.</param>
            <returns>Is the Line equal to the other Line.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.GetHashCode">
            <summary>
            The Lines hashcode.
            </summary>
            <returns>The Lines hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.ToString">
            <summary>
            The Lines as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line3d.Round(System.Int32)">
            <summary>
            Round the Lines position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Line3f">
            <summary>
            A 3f Line struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Line3f.Position">
            <summary>
            The Lines position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Line3f.Direction">
            <summary>
            The Lines direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Construct a Line from a point and the direction.
            </summary>
            <param name="position">The Lines position.</param>
            <param name="direction">The Lines direction (will be normalized)</param>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.op_Equality(Common.Core.Shapes.Line3f,Common.Core.Shapes.Line3f)">
            <summary>
            Check if the two Lines are equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.op_Inequality(Common.Core.Shapes.Line3f,Common.Core.Shapes.Line3f)">
            <summary>
            Check if the two Lines are not equal.
            </summary>
            <param name="l1">The first Line.</param>
            <param name="l2">The second Line.</param>
            <returns>True if the two Lines are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.Equals(System.Object)">
            <summary>
            Is the Line equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the Line equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.Equals(Common.Core.Shapes.Line3f)">
            <summary>
            Is the Line equal to the other Line.
            </summary>
            <param name="Line">The over Line.</param>
            <returns>Is the Line equal to the other Line.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.GetHashCode">
            <summary>
            The Lines hashcode.
            </summary>
            <returns>The Lines hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.ToString">
            <summary>
            The Lines as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Line3f.Round(System.Int32)">
            <summary>
            Round the Lines position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Plane3d">
            <summary>
            Plane struct defined by a position and direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3d.UnitX">
            <summary>
            A plane facing the x axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3d.UnitY">
            <summary>
            A plane facing the y axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3d.UnitZ">
            <summary>
            A plane facing the z axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3d.Position">
            <summary>
            The planes position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3d.Normal">
            <summary>
            The planes direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.#ctor(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Create a new plane.
            </summary>
            <param name="position">The planes position.</param>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.#ctor(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
            <param name="distance">The planes distance from the origin.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            From three noncollinear points (ordered ccw).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="P:Common.Core.Shapes.Plane3d.Distance">
            <summary>
            The planes distance from the origin.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Plane3d.SqrDistance">
            <summary>
            The planes square distance from the origin.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.op_Equality(Common.Core.Shapes.Plane3d,Common.Core.Shapes.Plane3d)">
            <summary>
            Check if the two planes are equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.op_Inequality(Common.Core.Shapes.Plane3d,Common.Core.Shapes.Plane3d)">
            <summary>
            Check if the two planes are not equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.Equals(System.Object)">
            <summary>
            Check if this plane is equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.Equals(Common.Core.Shapes.Plane3d)">
            <summary>
            Check if this plane is equal to the other plane.
            </summary>
            <param name="plane">The other plane.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.GetHashCode">
            <summary>
            The planes hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.ToString">
            <summary>
            The plane as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3d.Closest(Common.Core.Numerics.Point3d)">
            <summary>
            The closest point on the plane to the point p.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point on the plane.</returns>
        </member>
        <member name="T:Common.Core.Shapes.Plane3f">
            <summary>
            Plane struct defined by a position and direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3f.UnitX">
            <summary>
            A plane facing the x axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3f.UnitY">
            <summary>
            A plane facing the y axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3f.UnitZ">
            <summary>
            A plane facing the z axis.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3f.Position">
            <summary>
            The planes position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Plane3f.Normal">
            <summary>
            The planes direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.#ctor(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Create a new plane.
            </summary>
            <param name="position">The planes position.</param>
            <param name="normal">The planes direction.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.#ctor(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Create a new plane.
            </summary>
            <param name="normal">The planes direction.</param>
            <param name="distance">The planes distance from the origin.</param>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            From three noncollinear points (ordered ccw).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="P:Common.Core.Shapes.Plane3f.Distance">
            <summary>
            The planes distance from the origin.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Plane3f.SqrDistance">
            <summary>
            The planes square distance from the origin.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.op_Equality(Common.Core.Shapes.Plane3f,Common.Core.Shapes.Plane3f)">
            <summary>
            Check if the two planes are equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.op_Inequality(Common.Core.Shapes.Plane3f,Common.Core.Shapes.Plane3f)">
            <summary>
            Check if the two planes are not equal.
            </summary>
            <param name="p1">The first plane.</param>
            <param name="p2">The second plane.</param>
            <returns>True if the planes are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.Equals(System.Object)">
            <summary>
            Check if this plane is equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.Equals(Common.Core.Shapes.Plane3f)">
            <summary>
            Check if this plane is equal to the other plane.
            </summary>
            <param name="plane">The other plane.</param>
            <returns>Are these planes equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.GetHashCode">
            <summary>
            The planes hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.ToString">
            <summary>
            The plane as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Plane3f.Closest(Common.Core.Numerics.Point3f)">
            <summary>
            The closest point on the plane to the point p.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point on the plane.</returns>
        </member>
        <member name="T:Common.Core.Shapes.Ray2d">
            <summary>
            A 2D ray.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray2d.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray2d.Direction">
            <summary>
            The rays direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.#ctor(Common.Core.Numerics.Point2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Construct a new ray.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays directio</param>
        </member>
        <member name="P:Common.Core.Shapes.Ray2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray2d.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Equals(System.Object)">
            <summary>
            Is the ray equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the ray equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Equals(Common.Core.Shapes.Ray2d)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The other ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Round(System.Int32)">
            <summary>
            Round the rays components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Intersection(Common.Core.Shapes.Ray2d)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Intersects(Common.Core.Shapes.Ray2d,System.Double@,System.Double@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Intersects(Common.Core.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Intersects(Common.Core.Shapes.Circle2d,System.Double@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2d.Intersects(Common.Core.Shapes.Box2d,System.Double@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="T:Common.Core.Shapes.Ray2f">
            <summary>
            A 2D ray.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray2f.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray2f.Direction">
            <summary>
            The rays direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.#ctor(Common.Core.Numerics.Point2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Construct a new ray.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays directio</param>
        </member>
        <member name="P:Common.Core.Shapes.Ray2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray2f.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Equals(System.Object)">
            <summary>
            Is the ray equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the ray equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Equals(Common.Core.Shapes.Ray2f)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The other ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.GetPosition(System.Single)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Intersection(Common.Core.Shapes.Ray2f)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Intersects(Common.Core.Shapes.Ray2f,System.Single@,System.Single@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Intersects(Common.Core.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Intersects(Common.Core.Shapes.Circle2f,System.Single@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray2f.Intersects(Common.Core.Shapes.Box2f,System.Single@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="T:Common.Core.Shapes.Ray3d">
            <summary>
            A 3D ray struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray3d.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray3d.Direction">
            <summary>
            The rays direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Construct a ray from a point and the direction.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays direction (will be normalized)</param>
        </member>
        <member name="P:Common.Core.Shapes.Ray3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray3d.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.op_Equality(Common.Core.Shapes.Ray3d,Common.Core.Shapes.Ray3d)">
            <summary>
            Check if the two rays are equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.op_Inequality(Common.Core.Shapes.Ray3d,Common.Core.Shapes.Ray3d)">
            <summary>
            Check if the two rays are not equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.Equals(System.Object)">
            <summary>
            Is the ray equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the ray equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.Equals(Common.Core.Shapes.Ray3d)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The over ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.ToString">
            <summary>
            The rays as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Core.Shapes.Ray3d.Magnitude">
            <summary>
            The rays directions magnidute.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray3d.SqrMagnitude">
            <summary>
            The rays directions square magnidute.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3d.Round(System.Int32)">
            <summary>
            Round the rays position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Ray3f">
            <summary>
            A 3D ray struct represented by a position and a direction.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray3f.Position">
            <summary>
            The rays position.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Ray3f.Direction">
            <summary>
            The rays direction.
            Might not be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Construct a ray from a point and the direction.
            </summary>
            <param name="position">The rays position.</param>
            <param name="direction">The rays direction (will be normalized)</param>
        </member>
        <member name="P:Common.Core.Shapes.Ray3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray3f.IsDegenerate">
            <summary>
            Is the ray degenerate.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.op_Equality(Common.Core.Shapes.Ray3f,Common.Core.Shapes.Ray3f)">
            <summary>
            Check if the two rays are equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.op_Inequality(Common.Core.Shapes.Ray3f,Common.Core.Shapes.Ray3f)">
            <summary>
            Check if the two rays are not equal.
            </summary>
            <param name="r1">The first ray.</param>
            <param name="r2">The second ray.</param>
            <returns>True if the two rays are not equal.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.Equals(System.Object)">
            <summary>
            Is the ray equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the ray equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.Equals(Common.Core.Shapes.Ray3f)">
            <summary>
            Is the ray equal to the other ray.
            </summary>
            <param name="ray">The over ray.</param>
            <returns>Is the ray equal to the other ray.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.GetHashCode">
            <summary>
            The rays hashcode.
            </summary>
            <returns>The rays hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.ToString">
            <summary>
            The rays as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Core.Shapes.Ray3f.Magnitude">
            <summary>
            The rays directions magnidute.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Ray3f.SqrMagnitude">
            <summary>
            The rays directions square magnidute.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.GetPosition(System.Single)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.Normalize">
            <summary>
            Normalize the lines direction.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Ray3f.Round(System.Int32)">
            <summary>
            Round the rays position and direction.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Segment2d">
            <summary>
            A 2D segment.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment2d.A">
            <summary>
            The segments first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment2d.B">
            <summary>
            The segments second point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.#ctor(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="a">The segments first point.</param>
            <param name="b">The segments second point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="ax">The segments first points x value.</param>
            <param name="ay">The segments first points y value.</param>
            <param name="bx">The segments second points x value.</param>
            <param name="by">The segments second points y value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Center">
            <summary>
            The segments center.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Length">
            <summary>
            The segments length.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.SqrLength">
            <summary>
            The segments square length.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Tangent">
            <summary>
            The segments tangent vector.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Normal">
            <summary>
            The segments normal vector.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.LeftMost">
            <summary>
            The left most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.RightMost">
            <summary>
            The right most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.BottomMost">
            <summary>
            The bottom most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.TopMost">
            <summary>
            The top most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Reversed">
            <summary>
            THe segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2d.Bounds">
            <summary>
            The segments bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Equals(System.Object)">
            <summary>
            Is the segment equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the segment equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Equals(Common.Core.Shapes.Segment2d)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.GetHashCode">
            <summary>
            The segments hashcode.
            </summary>
            <returns>The segments hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Distance(Common.Core.Numerics.Point2d)">
            <summary>
            The points distance from the segment.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.SqrDistance(Common.Core.Numerics.Point2d)">
            <summary>
            The points sqr distance from the segment.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Contains(Common.Core.Numerics.Point2d,System.Double)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Intersects(Common.Core.Shapes.Segment2d)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Intersects(Common.Core.Shapes.Segment2d,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Intersects(Common.Core.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Intersects(Common.Core.Shapes.Box2d)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Closest(Common.Core.Numerics.Point2d,System.Double@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Closest(Common.Core.Shapes.Segment2d)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2d.Closest(Common.Core.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:Common.Core.Shapes.Segment2f">
            <summary>
            A 2D segment.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment2f.A">
            <summary>
            The segments first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment2f.B">
            <summary>
            The segments second point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.#ctor(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="a">The segments first point.</param>
            <param name="b">The segments second point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new segment.
            </summary>
            <param name="ax">The segments first points x value.</param>
            <param name="ay">The segments first points y value.</param>
            <param name="bx">The segments second points x value.</param>
            <param name="by">The segments second points y value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Center">
            <summary>
            The segments center.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Length">
            <summary>
            The segments length.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.SqrLength">
            <summary>
            The segments square length.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Tangent">
            <summary>
            The segments tangent vector.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Normal">
            <summary>
            The segments normal vector.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.LeftMost">
            <summary>
            The left most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.RightMost">
            <summary>
            The right most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.BottomMost">
            <summary>
            The bottom most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.TopMost">
            <summary>
            The top most point of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment2f.Bounds">
            <summary>
            The segments bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Equals(System.Object)">
            <summary>
            Is the segment equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is the segment equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Equals(Common.Core.Shapes.Segment2f)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.GetHashCode">
            <summary>
            The segments hashcode.
            </summary>
            <returns>The segments hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Distance(Common.Core.Numerics.Point2f)">
            <summary>
            The points distance from the segment.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.SqrDistance(Common.Core.Numerics.Point2f)">
            <summary>
            The points sqr distance from the segment.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Contains(Common.Core.Numerics.Point2f,System.Single)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Intersects(Common.Core.Shapes.Segment2f)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Intersects(Common.Core.Shapes.Segment2f,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Intersects(Common.Core.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Intersects(Common.Core.Shapes.Box2f)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Closest(Common.Core.Numerics.Point2f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Closest(Common.Core.Shapes.Segment2f)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment2f.Closest(Common.Core.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:Common.Core.Shapes.Segment3d">
            <summary>
            A 3D segment.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment3d.A">
            <summary>
            The segments first (aka source) point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment3d.B">
            <summary>
            The segments second (aka target) point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a new segment.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new segment.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.Length">
            <summary>
            The length of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.SqrLength">
            <summary>
            The square length of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.Bounds">
            <summary>
            The bounding box of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3d.Item(System.Int32)">
            <summary>
            Array acess to the segments points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Equals(Common.Core.Shapes.Segment3d)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Contains(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Contains(Common.Core.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Intersects(Common.Core.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.SignedDistance(Common.Core.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Closest(Common.Core.Numerics.Point3d)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Closest(Common.Core.Numerics.Point3d,System.Double@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Closest(Common.Core.Shapes.Segment3d)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3d.Closest(Common.Core.Shapes.Segment3d,System.Double@,System.Double@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:Common.Core.Shapes.Segment3f">
            <summary>
            A 3D segment.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment3f.A">
            <summary>
            The segments first (aka source) point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Segment3f.B">
            <summary>
            The segments second (aka target) point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a new segment.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new segment.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.Length">
            <summary>
            The length of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.SqrLength">
            <summary>
            The square length of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.Reversed">
            <summary>
            The segment flipped, a is now b, b is now a.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.Bounds">
            <summary>
            The bounding box of the segment.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Segment3f.Item(System.Int32)">
            <summary>
            Array acess to the segments points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Equals(Common.Core.Shapes.Segment3f)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Round(System.Int32)">
            <summary>
            Round the segments points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Contains(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="eps">A small value to give the segment some width.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Contains(Common.Core.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder">NA here. Needed for IShape interface.</param>
            <returns>Does the point line on the segemnts.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Intersects(Common.Core.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.SignedDistance(Common.Core.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Closest(Common.Core.Numerics.Point3f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Closest(Common.Core.Numerics.Point3f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="point">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Closest(Common.Core.Shapes.Segment3f)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Core.Shapes.Segment3f.Closest(Common.Core.Shapes.Segment3f,System.Single@,System.Single@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="T:Common.Core.Shapes.SegmentIndex">
            <summary>
            A segment represented by indices instead of points.
            The indices represent a index into a array of points.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.SegmentIndex.A">
            <summary>
            The segments first point index.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.SegmentIndex.B">
            <summary>
            The segments seconds point index.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.SegmentIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Consturct a new segment.
            </summary>
            <param name="a">The segments first point index.</param>
            <param name="b">The segments second point index.</param>
        </member>
        <member name="P:Common.Core.Shapes.SegmentIndex.HasNullIndex">
            <summary>
            Does the segment have a null index.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.SegmentIndex.Reversed">
            <summary>
            The segment reverse where a is now b and b is now a.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.SegmentIndex.Equals(System.Object)">
            <summary>
            Is the segment equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the segment equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.SegmentIndex.Equals(Common.Core.Shapes.SegmentIndex)">
            <summary>
            Is the segment equal to the other segment.
            </summary>
            <param name="seg">The other segment.</param>
            <returns>Is the segment equal to the other segment.</returns>
        </member>
        <member name="M:Common.Core.Shapes.SegmentIndex.GetHashCode">
            <summary>
            The segments hash code.
            </summary>
            <returns>The segments hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.SegmentIndex.ToString">
            <summary>
            The segment as a string.
            </summary>
            <returns>The segment as a string.</returns>
        </member>
        <member name="P:Common.Core.Shapes.IShape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.IShape2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Core.Shapes.Shape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Shape2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Core.Shapes.IShape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.IShape2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p">The point.</param>
            <returns>Does the shape contain the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point to the shape.</returns>
        </member>
        <member name="M:Common.Core.Shapes.IShape2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p">The point.</param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Core.Shapes.Shape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Shape2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p">The point.</param>
            <returns>Does the shape contain the point.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box">The box.</param>
            <returns>Does the shape intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p">The point.</param>
            <returns>The closest point to the shape.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Shape2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p">The point.</param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="T:Common.Core.Shapes.Sphere3d">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Sphere3d.Center">
            <summary>
            The shperes center point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Sphere3d.Radius">
            <summary>
            The spheres radius.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.#ctor(Common.Core.Numerics.Point3d,System.Double)">
            <summary>
            Construct a new sphere.
            </summary>
            <param name="center">The shperes center point.</param>
            <param name="radius">The spheres radius.</param>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3d.Diameter">
            <summary>
            The spheres diameter.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3d.Area">
            <summary>
            The spheres area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3d.SurfaceArea">
            <summary>
            The spheres surface area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3d.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Equals(System.Object)">
            <summary>
            Is this sphere equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is this sphere equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Equals(Common.Core.Shapes.Sphere3d)">
            <summary>
            Is this sphere equal to the other sphere.
            </summary>
            <param name="sphere">The other sphere.</param>
            <returns>Is this sphere equal to the other sphere.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.GetHashCode">
            <summary>
            The spheres hashcode.
            </summary>
            <returns>The spheres hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Enlarge(Common.Core.Numerics.Point3d)">
            <summary>
            Enlarge the sphere so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Round(System.Int32)">
            <summary>
            Round the spheres components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Closest(Common.Core.Numerics.Point3d)">
            <summary>
            Find the closest point to the sphere.
            If point inside sphere return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.SignedDistance(Common.Core.Numerics.Point3d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside sphere field is positive.
            If point is inside spher field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Contains(Common.Core.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the sphere contain the point.
            </summary>
            <param name="point">The point</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>true if sphere contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Contains(Common.Core.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the sphere fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>oes the sphere fully contain the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Intersects(Common.Core.Shapes.Sphere3d,System.Boolean)">
            <summary>
            Does this sphere intersect with the other sphere.
            </summary>
            <param name="sphere">The other sphere</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>True if the spheres intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.Intersects(Common.Core.Shapes.Box3d,System.Boolean)">
            <summary>
            Does the sphere intersect the box.
            </summary>
            <param name="box"></param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>Does the sphere intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.CircumSphere(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Creates a sphere that has both points on its surface.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.CircumSphere(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Creates a sphere that has all 4 points on its surface.
            From MathWorld: http://mathworld.wolfram.com/Circumsphere.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.CalculateBounds(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Creates a sphere that contains all three points.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point3d})">
            <summary>
            Calculate the minimum bounding sphere that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3d.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Point3d})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:Common.Core.Shapes.Sphere3f">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Sphere3f.Center">
            <summary>
            The shperes center point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Sphere3f.Radius">
            <summary>
            The spheres radius.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.#ctor(Common.Core.Numerics.Point3f,System.Single)">
            <summary>
            Construct a new sphere.
            </summary>
            <param name="center">The shperes center point.</param>
            <param name="radius">The spheres radius.</param>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3f.Diameter">
            <summary>
            The spheres diameter.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3f.Area">
            <summary>
            The spheres area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3f.SurfaceArea">
            <summary>
            The spheres surface area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Sphere3f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Equals(System.Object)">
            <summary>
            Is this sphere equal to the other object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Is this sphere equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Equals(Common.Core.Shapes.Sphere3f)">
            <summary>
            Is this sphere equal to the other sphere.
            </summary>
            <param name="sphere">The other sphere.</param>
            <returns>Is this sphere equal to the other sphere.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.GetHashCode">
            <summary>
            The spheres hashcode.
            </summary>
            <returns>The spheres hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Enlarge(Common.Core.Numerics.Point3f)">
            <summary>
            Enlarge the sphere so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Round(System.Int32)">
            <summary>
            Round the spheres components.
            </summary>
            <param name="digits">The number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Closest(Common.Core.Numerics.Point3f)">
            <summary>
            Find the closest point to the sphere.
            If point inside sphere return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.SignedDistance(Common.Core.Numerics.Point3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside sphere field is positive.
            If point is inside spher field is negative.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Contains(Common.Core.Numerics.Point3f,System.Boolean)">
            <summary>
            Does the sphere contain the point.
            </summary>
            <param name="point">The point</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>true if sphere contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Contains(Common.Core.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the sphere fully contain the box.
            </summary>
            <param name="box">The box.</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>oes the sphere fully contain the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Intersects(Common.Core.Shapes.Sphere3f,System.Boolean)">
            <summary>
            Does this sphere intersect with the other sphere.
            </summary>
            <param name="sphere">The other sphere</param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>True if the spheres intersect</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.Intersects(Common.Core.Shapes.Box3f,System.Boolean)">
            <summary>
            Does the sphere intersect the box.
            </summary>
            <param name="box"></param>
            <param name="inculdeBorder">Does the border count as being in side the sphere.</param>
            <returns>Does the sphere intersect the box.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.CircumSphere(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Creates a sphere that has both points on its surface.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.CircumSphere(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Creates a sphere that has all 4 points on its surface.
            From MathWorld: http://mathworld.wolfram.com/Circumsphere.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.CalculateBounds(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Creates a sphere that contains all three points.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Point3f})">
            <summary>
            Calculate the minimum bounding sphere that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Sphere3f.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Point3f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:Common.Core.Shapes.Tetrahedron3d">
            <summary>
            A 3D tetrahedron.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3d.A">
            <summary>
            The tetrahedrons first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3d.B">
            <summary>
            The tetrahedrons second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3d.C">
            <summary>
            The tetrahedrons third point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3d.D">
            <summary>
            The tetrahedrons fourth point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a new tetrahedron.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <param name="d">The fourth point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3d.Bounds">
            <summary>
            The bounding box of the tetrahedron.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3d.Item(System.Int32)">
            <summary>
            Array acess to the tetrahedrons points.
            </summary>
            <param name="i">The index of the point to access (0-3)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.Equals(System.Object)">
            <summary>
            Is the tetrahedron equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the tetrahedron equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.Equals(Common.Core.Shapes.Tetrahedron3d)">
            <summary>
            Is the tetrahedron equal to the other tetrahedron.
            </summary>
            <param name="tri">The other tetrahedron.</param>
            <returns>Is the tetrahedron equal to the other tetrahedron.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.GetHashCode">
            <summary>
            The tetrahedrons hash code.
            </summary>
            <returns>The tetrahedrons hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.ToString">
            <summary>
            The tetrahedron as a string.
            </summary>
            <returns>The tetrahedron as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3d.Round(System.Int32)">
            <summary>
            Round the tetrahedrons points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Tetrahedron3f">
            <summary>
            A 3D tetrahedron.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3f.A">
            <summary>
            The tetrahedrons first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3f.B">
            <summary>
            The tetrahedrons second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3f.C">
            <summary>
            The tetrahedrons third point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Tetrahedron3f.D">
            <summary>
            The tetrahedrons fourth point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a new tetrahedron.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <param name="d">The fourth point.</param>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3f.Bounds">
            <summary>
            The bounding box of the tetrahedron.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Tetrahedron3f.Item(System.Int32)">
            <summary>
            Array acess to the tetrahedrons points.
            </summary>
            <param name="i">The index of the point to access (0-3)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.Equals(System.Object)">
            <summary>
            Is the tetrahedron equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the tetrahedron equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.Equals(Common.Core.Shapes.Tetrahedron3f)">
            <summary>
            Is the tetrahedron equal to the other tetrahedron.
            </summary>
            <param name="tri">The other tetrahedron.</param>
            <returns>Is the tetrahedron equal to the other tetrahedron.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.GetHashCode">
            <summary>
            The tetrahedrons hash code.
            </summary>
            <returns>The tetrahedrons hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.ToString">
            <summary>
            The tetrahedron as a string.
            </summary>
            <returns>The tetrahedron as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Tetrahedron3f.Round(System.Int32)">
            <summary>
            Round the tetrahedrons points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Triangle2d">
            <summary>
            A 2D triangle.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2d.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2d.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2d.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.#ctor(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="a">The triangles first point.</param>
            <param name="b">The triangles second point.</param>
            <param name="c">The triangles third point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="ax">The triangles first points x value.</param>
            <param name="ay">The triangles first points y value.</param>
            <param name="bx">The triangles second points x value.</param>
            <param name="by">The triangles second points y value.</param>
            <param name="cx">The triangles third points x value.</param>
            <param name="cy">The triangles third points y value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2d.Bounds">
            <summary>
            The triangles bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Equals(System.Object)">
            <summary>
            Is the triangle equal to the other object.
            </summary>
            <param name="obj">The  other object.</param>
            <returns>Is the triangle equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Equals(Common.Core.Shapes.Triangle2d)">
            <summary>
            Is the triangle equal to the other riangle.
            </summary>
            <param name="tri">The  other riangle.</param>
            <returns>Is the triangle equal to the other riangle.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.GetHashCode">
            <summary>
            The triangles hashcode.
            </summary>
            <returns>The triangles hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Round(System.Int32)">
            <summary>
            Round the triangles components.
            </summary>
            <param name="digits">The digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.CrossProductArea(Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d,Common.Core.Numerics.Point2d)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Barycentric(Common.Core.Numerics.Point2d)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Closest(Common.Core.Numerics.Point2d)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.SignedDistance(Common.Core.Numerics.Point2d)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Contains(Common.Core.Numerics.Point2d)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Contains(Common.Core.Numerics.Point2d,System.Boolean)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.ContainsCCW(Common.Core.Numerics.Point2d)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2d.Intersects(Common.Core.Shapes.Box2d,System.Boolean)">
            <summary>
            Does the triangle intersect this box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Common.Core.Shapes.Triangle2f">
            <summary>
            A 2D triangle.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2f.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2f.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle2f.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.#ctor(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="a">The triangles first point.</param>
            <param name="b">The triangles second point.</param>
            <param name="c">The triangles third point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new triangle.
            </summary>
            <param name="ax">The triangles first points x value.</param>
            <param name="ay">The triangles first points y value.</param>
            <param name="bx">The triangles second points x value.</param>
            <param name="by">The triangles second points y value.</param>
            <param name="cx">The triangles third points x value.</param>
            <param name="cy">The triangles third points y value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle2f.Bounds">
            <summary>
            The triangles bounding box.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Equals(System.Object)">
            <summary>
            Is the triangle equal to the other object.
            </summary>
            <param name="obj">The  other object.</param>
            <returns>Is the triangle equal to the other object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Equals(Common.Core.Shapes.Triangle2f)">
            <summary>
            Is the triangle equal to the other riangle.
            </summary>
            <param name="tri">The  other riangle.</param>
            <returns>Is the triangle equal to the other riangle.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.GetHashCode">
            <summary>
            The triangles hashcode.
            </summary>
            <returns>The triangles hashcode.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Round(System.Int32)">
            <summary>
            Round the triangles components.
            </summary>
            <param name="digits">The digits to round to.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.CrossProductArea(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Barycentric(Common.Core.Numerics.Point2f)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Closest(Common.Core.Numerics.Point2f)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.SignedDistance(Common.Core.Numerics.Point2f)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Contains(Common.Core.Numerics.Point2f)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Contains(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">The point</param>
            <param name="includeBorder"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.ContainsCCW(Common.Core.Numerics.Point2f,System.Boolean)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle2f.Intersects(Common.Core.Shapes.Box2f,System.Boolean)">
            <summary>
            Does the triangle intersect this box.
            </summary>
            <param name="box"></param>
            <param name="includeBorder"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Common.Core.Shapes.Triangle3d">
            <summary>
            A 3D triangle.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3d.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3d.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3d.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.#ctor(Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d,Common.Core.Numerics.Point3d)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
            <param name="cx">The third points x value.</param>
            <param name="cy">The third points y value.</param>
            <param name="cz">The third points z value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3d.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3d.Bounds">
            <summary>
            The bounding box of the triangle.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3d.Item(System.Int32)">
            <summary>
            Array acess to the triangles points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.Equals(Common.Core.Shapes.Triangle3d)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3d.Round(System.Int32)">
            <summary>
            Round the triangles points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.Triangle3f">
            <summary>
            A 3D triangle.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3f.A">
            <summary>
            The triangles first point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3f.B">
            <summary>
            The triangles second point.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.Triangle3f.C">
            <summary>
            The triangles third point.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.#ctor(Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f,Common.Core.Numerics.Point3f)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a new triangle.
            </summary>
            <param name="ax">The first points x value.</param>
            <param name="ay">The first points y value.</param>
            <param name="az">The first points z value.</param>
            <param name="bx">The second points x value.</param>
            <param name="by">The second points y value.</param>
            <param name="bz">The second points z value.</param>
            <param name="cx">The third points x value.</param>
            <param name="cy">The third points y value.</param>
            <param name="cz">The third points z value.</param>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3f.IsFinite">
            <summary>
            Does the shape contain no non finite points.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3f.Bounds">
            <summary>
            The bounding box of the triangle.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.Triangle3f.Item(System.Int32)">
            <summary>
            Array acess to the triangles points.
            </summary>
            <param name="i">The index of the point to access (0-2)</param>
            <returns>The point at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.Equals(Common.Core.Shapes.Triangle3f)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
        <member name="M:Common.Core.Shapes.Triangle3f.Round(System.Int32)">
            <summary>
            Round the triangles points.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="T:Common.Core.Shapes.TriangleIndex">
            <summary>
            A triangle represented by indices instead of points.
            The indices represent a index into a array of points.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.TriangleIndex.A">
            <summary>
            The triangles first point index.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.TriangleIndex.B">
            <summary>
            The triangles second point index.
            </summary>
        </member>
        <member name="F:Common.Core.Shapes.TriangleIndex.C">
            <summary>
            The triangles third point index.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.TriangleIndex.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Consturct a new triangle.
            </summary>
            <param name="a">The triangles first point index.</param>
            <param name="b">The triangles second point index.</param>
            <param name="c">The triangles third point index.</param>
        </member>
        <member name="P:Common.Core.Shapes.TriangleIndex.HasNullIndex">
            <summary>
            Does the triangle have a null index.
            </summary>
        </member>
        <member name="P:Common.Core.Shapes.TriangleIndex.Reversed">
            <summary>
            The triangle reversed.
            </summary>
        </member>
        <member name="M:Common.Core.Shapes.TriangleIndex.Equals(System.Object)">
            <summary>
            Is the triangle equal to this object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Is the triangle equal to this object.</returns>
        </member>
        <member name="M:Common.Core.Shapes.TriangleIndex.Equals(Common.Core.Shapes.TriangleIndex)">
            <summary>
            Is the triangle equal to the other triangle.
            </summary>
            <param name="tri">The other triangle.</param>
            <returns>Is the triangle equal to the other triangle.</returns>
        </member>
        <member name="M:Common.Core.Shapes.TriangleIndex.GetHashCode">
            <summary>
            The triangles hash code.
            </summary>
            <returns>The triangles hash code.</returns>
        </member>
        <member name="M:Common.Core.Shapes.TriangleIndex.ToString">
            <summary>
            The triangle as a string.
            </summary>
            <returns>The triangle as a string.</returns>
        </member>
        <member name="T:Common.Core.Threading.ThreadingBlock1D">
            <summary>
            A helper object to break a iteration into smaller 
            blocks that can be run on seperate tasks. 
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock1D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new block.
            </summary>
            <param name="start">The blocks start index in the iteration.</param>
            <param name="end">The blocks end index in the iteration.</param>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock1D.Start">
            <summary>
            The blocks start index in the iteration.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock1D.End">
            <summary>
            The blocks end index in the iteration.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock1D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock1D.BlockSize(System.Int32,System.Int32)">
            <summary>
            The block size is the number of iterarations in the loop each thread will be assigned.
            A reconmended maximum block size of 4096 will be enforced.
            </summary>
            <param name="count">The number of iterations in the loop.</param>
            <param name="divisions">The number of blocks the count is divided into.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock1D.CreateBlocks(System.Int32,System.Int32)">
            <summary>
            Create the blocks the parallel action will be performed on.
            </summary>
            <param name="count">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock1D.ParallelAction(System.Int32,System.Int32,System.Action{System.Int32},Common.Core.Threading.ThreadingToken)">
            <summary>
            Run a action in parallel.
            </summary>
            <param name="count">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <param name="action">The action to perform.</param>
            <param name="token">A optional helper token.</param>
        </member>
        <member name="T:Common.Core.Threading.ThreadingBlock2D">
            <summary>
            A helper object to break a iteration into smaller 
            blocks that can be run on seperate tasks. 
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.#ctor(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Create a new block.
            </summary>
            <param name="start">The blocks start index in the iteration.</param>
            <param name="end">The blocks end index in the iteration.</param>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock2D.Start">
            <summary>
            The blocks start index in the iteration.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock2D.End">
            <summary>
            The blocks end index in the iteration.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.BlockSize(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            The block size is the number of iterarations in the loop each thread will be assigned.
            A reconmended maximum block size of 64 will be enforced.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="divisions">The number of blocks the size is divided into.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.BlockSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            The block size is the number of iterarations in the loop each thread will be assigned.
            A reconmended maximum block size of 64 will be enforced.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="divisions">The number of blocks the size is divided into.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.CreateBlocks(Common.Core.Numerics.Point2i,System.Int32)">
            <summary>
            Create the blocks the parallel action will be performed on.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.CreateBlocks(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the blocks the parallel action will be performed on.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.ParallelAction(Common.Core.Numerics.Point2i,System.Int32,System.Action{System.Int32,System.Int32},Common.Core.Threading.ThreadingToken)">
            <summary>
            Run a action in parallel.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <param name="action">The action to perform.</param>
            <param name="token">A optional helper token.</param>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock2D.ParallelAction(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32},Common.Core.Threading.ThreadingToken)">
            <summary>
            Run a action in parallel.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <param name="action">The action to perform.</param>
            <param name="token">A optional helper token.</param>
        </member>
        <member name="T:Common.Core.Threading.ThreadingBlock3D">
            <summary>
            A helper object to break a iteration into smaller 
            blocks that can be run on seperate tasks. 
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.#ctor(Common.Core.Numerics.Point3i,Common.Core.Numerics.Point3i)">
            <summary>
            Create a new block.
            </summary>
            <param name="start">The blocks start index in the iteration.</param>
            <param name="end">The blocks end index in the iteration.</param>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock3D.Start">
            <summary>
            The blocks start index in the iteration.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingBlock3D.End">
            <summary>
            The blocks end index in the iteration.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.BlockSize(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            The block size is the number of iterarations in the loop each thread will be assigned.
            A reconmended maximum block size of 16 will be enforced.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="divisions">The number of blocks the size is divided into.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.BlockSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The block size is the number of iterarations in the loop each thread will be assigned.
            A reconmended maximum block size of 64 will be enforced.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="depth">The number of iterations in the loop on the z axis.</param>
            <param name="divisions">The number of blocks the size is divided into.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.CreateBlocks(Common.Core.Numerics.Point3i,System.Int32)">
            <summary>
            Create the blocks the parallel action will be performed on.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.CreateBlocks(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the blocks the parallel action will be performed on.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="depth">The number of iterations in the loop on the z axis.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.ParallelAction(Common.Core.Numerics.Point3i,System.Int32,System.Action{System.Int32,System.Int32,System.Int32},Common.Core.Threading.ThreadingToken)">
            <summary>
            Run a action in parallel.
            </summary>
            <param name="size">The number of iterations in the loop.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <param name="action">The action to perform.</param>
            <param name="token">A optional helper token.</param>
        </member>
        <member name="M:Common.Core.Threading.ThreadingBlock3D.ParallelAction(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Int32},Common.Core.Threading.ThreadingToken)">
            <summary>
            Run a action in parallel.
            </summary>
            <param name="width">The number of iterations in the loop on the x axis.</param>
            <param name="height">The number of iterations in the loop on the y axis.</param>
            <param name="depth">The number of iterations in the loop on the z axis.</param>
            <param name="blockSize">The block size is the number of iterarations in the loop each thread will be assigned.</param>
            <param name="action">The action to perform.</param>
            <param name="token">A optional helper token.</param>
        </member>
        <member name="T:Common.Core.Threading.ThreadingToken">
            <summary>
            A token that can be passed to threaded tasks as a helper
            for cancelling the task and keeping track of the tasks progress.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.timer">
            <summary>
            A timer that can be used to 
            determine the tasks estimate completion time.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.lockObject">
            <summary>
            Object that can be used as a lock.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.timePerIncrement">
            <summary>
            The time period between steps in milliseconds.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.progress">
            <summary>
            The current number of steps that have elapsed.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.steps">
            <summary>
            The total number of steps that need to be performed.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.cancelled">
            <summary>
            Ifg the task should be cancelled.
            </summary>
        </member>
        <member name="F:Common.Core.Threading.ThreadingToken.messages">
            <summary>
            A queue of messages sent by the task.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.#ctor">
            <summary>
            Create a new token. Defaults to 100 steps.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.#ctor(System.Int32)">
            <summary>
            Create a new token.
            </summary>
            <param name="steps">The number of steps the tasks will perform.</param>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.Steps">
            <summary>
            THe number of steps the task will perform to be complete.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.Cancelled">
            <summary>
            Tell the task it should be cancelled.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.IsComplete">
            <summary>
            Has the task completed all its steps.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.UseThreading">
            <summary>
            Should threading be used. 
            Need to disable for debugging/testing sometimes.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.TimePeriodFormat">
            <summary>
            What format should the timer use.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.TimePeriodUnit">
            <summary>
            The time periods units.
            </summary>
        </member>
        <member name="P:Common.Core.Threading.ThreadingToken.NumMessages">
            <summary>
            How many messages have been left by the task.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.Reset">
            <summary>
            Reset the token to a state it can be reused.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.ResetProgress">
            <summary>
            Only resets the progress and leaves reset of token settings.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.PercentageProgress">
            <summary>
            The percentage (0-1) of steps the task has completed.
            </summary>
            <returns>The percentage (0-1) of steps the task has completed.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.IncrementProgess">
            <summary>
            Increment the tasks progress.
            </summary>
            <returns>The estimated completion time if a timer is being used.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.ElapsedTime">
            <summary>
            Get the ellapsed time that has passed since timer was called.
            </summary>
            <returns>Get the ellapsed time that has passed since timer was called.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.EstimatedCompletionTime">
            <summary>
            The estimated completion time if a timer is being used.
            </summary>
            <returns>The estimated completion time if a timer is being used.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.StartTimer">
            <summary>
            Starts the time which will be used to calculate the completion time.
            </summary>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.StopTimer">
            <summary>
            Stops the time which will be used to calculate the completion time.
            </summary>
            <returns>The elapsed time.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.EnqueueMessage(System.String)">
            <summary>
            Add a new message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.DequeueMessage">
            <summary>
            Get and remove the next message.
            </summary>
            <returns>The next message.</returns>
        </member>
        <member name="M:Common.Core.Threading.ThreadingToken.ClearMessages">
            <summary>
            Clear the queue of all messages.
            </summary>
        </member>
        <member name="T:Common.Core.Time.Timer">
            <summary>
            Helper timer class wrapping the Stopwatch class.
            </summary>
        </member>
        <member name="F:Common.Core.Time.Timer.s_timer">
            <summary>
            A static instance of the timer.
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Time.Timer.ElapsedTime(Common.Core.Time.TIME_PERIOD)">
            <summary>
            Get the ellapsed time that has passed since timer was called.
            </summary>
            <param name="period">The time period.</param>
            <returns>Get the ellapsed time that has passed since timer was called.</returns>
        </member>
        <member name="M:Common.Core.Time.Timer.Start">
            <summary>
            Start the timer.
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.Stop(Common.Core.Time.TIME_PERIOD)">
            <summary>
            Stop the timer.
            </summary>
            <returns>The number of milliseconds that have passsed.</returns>
        </member>
        <member name="M:Common.Core.Time.Timer.Reset">
            <summary>
            Reset the timer.
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.StartTimer">
            <summary>
            Start the static instance timer.
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.StopTimer(Common.Core.Time.TIME_PERIOD)">
            <summary>
            Stop the static instance timer.
            </summary>
            <returns>The number of milliseconds that have passsed.</returns>
        </member>
        <member name="M:Common.Core.Time.Timer.TimePeriodUnits(Common.Core.Time.TIME_PERIOD)">
            <summary>
            Get the time period enum as its string units.
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
    </members>
</doc>
