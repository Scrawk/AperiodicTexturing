<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.GraphTheory</name>
    </assembly>
    <members>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph">
            <summary>
            A adjacency graph made op of vertices and edges.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.BreadthFirstOrder(System.Int32)">
            <summary>
            Return a list of vertex indices ordered breadth first.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <returns>The vertices in breadth first order.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.BreadthFirstOrder(System.Int32,System.Func{Common.GraphTheory.AdjacencyGraphs.GraphVertex,Common.GraphTheory.AdjacencyGraphs.GraphVertex,System.Single},System.Single)">
            <summary>
            Return a list of vertex indices ordered breadth first
            but stopping when max distance is reached.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <param name="DistanceFunc">The function used to calculate the distance between two vertices.</param>
            <param name="maxDistance">The distance to stop at.</param>
            <returns>The vertices in breadth first order.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.BreadthFirstTree(System.Int32)">
            <summary>
            Return a tree of vertex indices ordered breadth first.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <returns>The vertices in breadth first order.</returns>
        </member>
        <member name="F:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.NOT_VISITED_TAG">
            <summary>
            Use to tag if vertices have been visited or not.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.#ctor(System.Int32)">
            <summary>
            Create a graph with a fixed number of vertices.
            </summary>
            <param name="size">The number of vertices.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.#ctor(System.Collections.Generic.IEnumerable{Common.GraphTheory.AdjacencyGraphs.GraphVertex})">
            <summary>
            Create a graph from a set of vertices.
            These vertices must have already had there
            index set correctly.
            </summary>
            <param name="vertices">The graphs vertices.</param>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.VertexCount">
            <summary>
            The number of vertices in graph.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.EdgeCount">
            <summary>
            The number of edges in graph.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Vertices">
            <summary>
            The graph vertices.
            The vertex index must match its position in array.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Edges">
            <summary>
            The graph edges.
            Each vertex index is used to look up
            all the edges going from that vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Print">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.EnumerateVertices">
            <summary>
            Enumerate through all the vertices in th graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.EnumerateEdges">
            <summary>
            Enumerate through all the edges in th graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.InBounds(System.Int32)">
            <summary>
            Is the index in the graph vertices bounds.
            </summary>
            <param name="i">The index</param>
            <returns>Is the index in the graph vertices bounds.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Clear">
            <summary>
            Clear the graph.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.ClearEdges">
            <summary>
            Clear the edges and leave the vertices.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.ClearEdges(System.Int32)">
            <summary>
            Clear the edges for the vertex at the index.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.Fill(System.Int32)">
            <summary>
            Fill the graph.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.TagVertices(System.Int32)">
            <summary>
            Set the vertices tag.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetVertex(System.Int32)">
            <summary>
            Get the vertex at index i.
            </summary>
            <param name="i">The vertices index.</param>
            <returns>The vertex</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.SetVertex(System.Int32,Common.GraphTheory.AdjacencyGraphs.GraphVertex)">
            <summary>
            Set the vertex at index i.
            </summary>
            <param name="i"></param>
            <param name="vert"></param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetVertices">
            <summary>
            Get a list of all the vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetVertexData``1(System.Int32)">
            <summary>
            Get the data belonging to
            the vertex at index i.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetEdgeData``1(System.Int32,System.Int32)">
            <summary>
            Get the edge going from and 
            to vertices at the indexs.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetEdgeWeight(System.Int32,System.Int32)">
            <summary>
            Get The edges weight or 0 if edge not found.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetEdgeOrCreateEdge(System.Int32,System.Int32)">
            <summary>
            Get the edge and if edge
            does not already exist create a new one.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Get the edge going from and 
            to vertices at the indexs.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetFirstEdge(System.Int32)">
            <summary>
            Get the first edge fo the vertex.
            </summary>
            <param name="v">The verts index</param>
            <returns>THe first edge.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.RandomizeEdges(System.Int32)">
            <summary>
            Randomize all the edges order in graph
            </summary>
            <param name="seed">The random generators seed</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.RandomizeEdges(System.Int32,System.Random)">
            <summary>
            Randomize all the edges order for a vertex.
            </summary>
            <param name="v">The vertices index.</param>
            <param name="rnd">The random generator.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetEdges(System.Int32)">
            <summary>
            Get all the edges of vertex.
            </summary>
            <param name="i">The vertex index.</param>
            <returns>A list of all the edges. Maybe null.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.SetEdges(System.Int32,System.Collections.Generic.List{Common.GraphTheory.AdjacencyGraphs.GraphEdge})">
            <summary>
            Set the edges for a vertex.
            </summary>
            <param name="i">The vertices index.</param>
            <param name="edges">The vertices edges</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.IndexOfVertexData``1(``0)">
            <summary>
            Find the vertex index belonging to this data.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.HasVertex(System.Int32)">
            <summary>
            Does the graph contain a vertex at the index.
            </summary>
            <param name="index"></param>
            <returns>Does the graph contain a vertex at the index.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.HasEdge(System.Int32,System.Int32)">
            <summary>
            Does the graph contain a edge going
            from and to vertices at the indexs.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetDegree(System.Int32)">
            <summary>
            Get the number of edges that start from the 
            vertex at index.
            </summary>
            <param name="index">The vertices index.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetAllEdges(System.Collections.Generic.List{Common.GraphTheory.AdjacencyGraphs.GraphEdge})">
            <summary>
            Get a flattened list of all edges in the graph.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.GetAllEdges">
            <summary>
            Get a flattened list of all edges in the graph.
            </summary>
            <returns>The edges</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.AddEdge(Common.GraphTheory.AdjacencyGraphs.GraphEdge)">
            <summary>
            Add a edge to the graph.
            Used as a short cut when adding multiple 
            edges in derived classes.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.AddVertex(Common.GraphTheory.AdjacencyGraphs.GraphVertex)">
            <summary>
            Add a vertex to graph
            </summary>
            <param name="vert"></param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.AddVertex(System.Object)">
            <summary>
            Create and add a vertex to graph.
            </summary>
            <returns>The new vertex.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph.DepthFirstOrder(System.Int32)">
            <summary>
            Return a list of vertex indices ordered depth first.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <returns>The vertices in depth first order.</returns>
        </member>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.DirectedGraph">
            <summary>
            A directed adjacency graph made op of vertices and edges.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.#ctor(System.Int32)">
            <summary>
            Create a graph with a fixed number of vertices.
            </summary>
            <param name="size">The number of vertices.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.#ctor(System.Collections.Generic.IEnumerable{Common.GraphTheory.AdjacencyGraphs.GraphVertex})">
            <summary>
            Create a graph from a set of vertices.
            These vertices must have already had there
            index set correctly.
            </summary>
            <param name="vertices">The graphs vertices.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.Copy(System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Create a deep copy of the graph.
            </summary>
            <param name="edgeDataCopy">Optonal func to copy edge data.</param>
            <param name="vertDataCopy">ptonal func to copy vertex data.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddDirectedEdge(Common.GraphTheory.AdjacencyGraphs.GraphEdge)">
            <summary>
            Add a edge to the graph.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddDirectedEdge(System.Int32,System.Int32)">
            <summary>
            Add a directed edge.
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddDirectedWeightedEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Add a directed edge.
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddDirectedEdge(System.Int32,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddDirectedWeightedEdge(System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            Add a directed edge.
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight">The edge weight</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddUndirectedEdge(System.Int32,System.Int32)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight">The edges weight</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight">The edges weight</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single,System.Single,System.Object,System.Object)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight0">The edge going from-to weight</param>
            <param name="weight1">The edge going to-from weigh</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.FromData``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a graph of vertices from the enumeration of data.
            A vertex for each data object will be created.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.ToUndirectedGraph">
            <summary>
            Convert to a undirected graph by adding a 
            edge for any directed edge that does not 
            have a opposite edge.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.FromMatrix(System.Int32[0:,0:])">
            <summary>
            Create a graph from a matrix.
            Non zero entries represent a edge with the value being the edges weight.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.DijkstrasShortestPathTree(System.Int32)">
            <summary>
            Create a graph tree representing the shortest paths
            between the vertices in the graph.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <returns>The shortest path tree.</returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.FordFulkersonMaxFlow(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.MaxFlow(Common.GraphTheory.AdjacencyGraphs.DirectedGraph,System.Int32,System.Int32)">
            <summary>
            https://tutorialspoint.dev/data-structure/graph-data-structure/ford-fulkerson-algorithm-for-maximum-flow-problem
            </summary>
            <param name="rGraph"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.KhansTopologicalSort">
            <summary>
            Presuming the edges represent the order the 
            vertices must be iterated return a list of
            vertex indices that conform to this order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.Khans_GetInverseDegree(System.Collections.Generic.List{Common.GraphTheory.AdjacencyGraphs.GraphEdge}[],System.Int32)">
            <summary>
            Find the number of vertices that go to this vertex.
            </summary>
            <param name="Edges">A list of the edges for each vertex.</param>
            <param name="i">The vertex index.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.DirectedGraph.Khans_CountEdges(System.Collections.Generic.List{Common.GraphTheory.AdjacencyGraphs.GraphEdge}[])">
            <summary>
            Count the number of edges in the list of lists.
            </summary>
            <param name="Edges">A list of the edges for each vertex.</param>
            <returns></returns>
        </member>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.GraphEdge">
            <summary>
            A adjacency graphs edge.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a edge going from and to these vertex indices.
            </summary>
            <param name="from">The from vertex index.</param>
            <param name="to">The to vertex index.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a edge going from and to these vertex indices
            with a edge weight.
            </summary>
            <param name="from">The from vertex index.</param>
            <param name="to">The to vertex index.</param>
            <param name="weight">The weight of the edge.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.#ctor(System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            Create a edge going from and to these vertex indices
            with a edge weight and data.
            </summary>
            <param name="from">The from vertex index.</param>
            <param name="to">The to vertex index.</param>
            <param name="weight">The weight of the edge.</param>
            <param name="data">The edges data</param>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphEdge.From">
            <summary>
            The vertex index the edge starts at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphEdge.To">
            <summary>
            The vertex index the edge ends at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphEdge.Weight">
            <summary>
            The edges weight. Used in some search algorithms.
            ie spanning trees.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphEdge.Data">
            <summary>
            The edges data.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.CompareTo(Common.GraphTheory.AdjacencyGraphs.GraphEdge)">
            <summary>
            Used to sort edges by weight.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphEdge.Copy(System.Func{System.Object,System.Object})">
            <summary>
            Create deep copy of edge.
            </summary>
            <param name="dataCopy">Function to copy data. If null shallow copy will be used.</param>
            <returns>A copy of the edge.</returns>
        </member>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.GraphForest">
            <summary>
            A list of graph trees.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphForest.Count">
            <summary>
            The number of trees in the forest.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphForest.Graph">
            <summary>
            The graph the trees were constructed from.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphForest.Roots">
            <summary>
            The vertex indices of the tree roots.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphForest.Trees">
            <summary>
            The trees in the forest.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphForest.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphForest.ContainsTree(System.Int32)">
            <summary>
            Does the forest contain this tree.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphForest.GetTree(System.Int32)">
            <summary>
            Get the tree with this root.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphForest.AddTree(Common.GraphTheory.AdjacencyGraphs.GraphTree)">
            <summary>
            Add a tree to the forest.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphForest.RemoveTree(System.Int32)">
            <summary>
            Remove a tree from the forest.
            </summary>
        </member>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.GraphTree">
            <summary>
            Represents a tree of a given graph.
            The tree only holds the indices of
            the vertices from the graph it was 
            created from. A tree may not contain 
            all the vertices in the graph even 
            if the graph is not completely connected.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.#ctor(Common.GraphTheory.AdjacencyGraphs.AdjacencyGraph,System.Int32)">
            <summary>
            Create a new tree. Must be the same
            size graph and include space for all
            vertices of the graph even if they are 
            not in the tree.
            </summary>
            <param name="root">The trees root.</param>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphTree.Count">
            <summary>
            The number of verices in the graph.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphTree.Root">
            <summary>
            The root vertex.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphTree.Parent">
            <summary>
            The vertices parents. A vertex that is 
            not in the tree has -1 as its parent.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphTree.Children">
            <summary>
            The children of each vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.TagAll(System.Int32)">
            <summary>
            Tag all the vertices in the tree.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetPathToRoot(System.Int32)">
            <summary>
            Get a path from the vertex to the root.
            The path is made up of the vertices index 
            in the graph the tree was created from.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetPathToRoot(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Get a path from the vertex to the root.
            The path is made up of the vertices index 
            in the graph the tree was created from.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetParent(System.Int32)">
            <summary>
            Gets the parent vertex of the child vertex.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.SetParent(System.Int32,System.Int32)">
            <summary>
            Set the parent of a vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.SetChild(System.Int32,System.Int32)">
            <summary>
            Set a child of a vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.RemoveBranch(System.Int32)">
            <summary>
            Removes the vertex i from the tree 
            and all other vertices decended
            from that vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.InTree(System.Int32)">
            <summary>
            Is this vert included in the tree.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.IsLeaf(System.Int32)">
            <summary>
            Is this vertex a leaf.
            Leaf vertices have no children.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.TreeSize">
            <summary>
            The number of vertices in the graph  
            that are included in the tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetDegree(System.Int32)">
            <summary>
            Get the degree of this vertex.
            The degree represents the number 
            of children a vertex has.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.CreateChildren">
            <summary>
            Presuming each vert has its parent set 
            then find the children of each vertex.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.DepthFirstOrder">
            <summary>
            Returns the vertices of the tree in depth first order.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.BreadthFirstOrder">
            <summary>
            Returns the vertices of the tree in breadth first order.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetLeaves(System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the index of all leaf vertices.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetLeavesData``1(System.Collections.Generic.List{``0})">
            <summary>
            Get the data of all leaf vertices.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetData``1(System.Collections.Generic.List{``0})">
            <summary>
            Get the data of all vertices.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.GetAllEdges(System.Collections.Generic.List{Common.GraphTheory.AdjacencyGraphs.GraphEdge})">
            <summary>
            Get a flattened list of all edges in the tree.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.FindWeightSum">
            <summary>
            Find the sum of the weights from this tree.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphTree.FindWeightSum(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Find the sum of the weights from this path.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.#ctor(System.Int32)">
            <summary>
            Create a vertex with a index.
            </summary>
            <param name="index">The index of the vertex in its graph.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.#ctor(System.Int32,System.Object)">
            <summary>
            Create a vertex with a index and data.
            </summary>
            <param name="index">The index of the vertex in its graph.</param>
            <param name="data">The vertices data.</param>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphVertex.Index">
            <summary>
            The index of this vertex in the graph.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphVertex.Tag">
             <summary>
            Use to tempory mark the vertex.
             </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphVertex.Cost">
            <summary>
            The cost of this vertex.
            Used in some search algorithms.
            ie shortest paths.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.AdjacencyGraphs.GraphVertex.Data">
            <summary>
            The vertices data.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.CompareTo(Common.GraphTheory.AdjacencyGraphs.GraphVertex)">
            <summary>
            Used to sort vertices by cost.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.GraphVertex.Copy(System.Func{System.Object,System.Object})">
            <summary>
            Create deep copy of vertex.
            </summary>
            <param name="dataCopy">Function to copy data. If null shallow copy will be used.</param>
            <returns>A copy of the vertex.</returns>
        </member>
        <member name="T:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph">
            <summary>
            A undirected adjacency graph made op of vertices and edges.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.#ctor(System.Int32)">
            <summary>
            Create a graph with a fixed number of vertices.
            </summary>
            <param name="size">The number of vertices.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.#ctor(System.Collections.Generic.IEnumerable{Common.GraphTheory.AdjacencyGraphs.GraphVertex})">
            <summary>
            Create a graph from a set of vertices.
            These vertices must have already had there
            index set correctly.
            </summary>
            <param name="vertices">The graphs vertices.</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.Copy(System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Create a deep copy of the graph.
            </summary>
            <param name="edgeDataCopy">Optonal func to copy edge data.</param>
            <param name="vertDataCopy">ptonal func to copy vertex data.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.AddUndirectedEdge(Common.GraphTheory.AdjacencyGraphs.GraphEdge,Common.GraphTheory.AdjacencyGraphs.GraphEdge)">
            <summary>
            Add a edge to the graph.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.AddUndirectedEdge(System.Int32,System.Int32)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single,System.Object)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight">The edges weight</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Single,System.Single,System.Object,System.Object)">
            <summary>
            Add a undirected edge.
            A undirected edge has a edge going both ways
            </summary>
            <param name="from">The from vertex index</param>
            <param name="to">The to vertex index</param>
            <param name="weight0">The edge going from-to weight</param>
            <param name="weight1">The edge going to-from weigh</param>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.FromData``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a graph of vertices from the enumeration of data.
            A vertex for each data object will be created.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.ToDirectedGraph">
            <summary>
            Convert to a directed graph.
            No new edges are added.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.KruskalsMinimumSpanningForest">
            <summary>
            Create a forest of trees from the graph.
            Each tree represents connected sets of vertices
            ordered as a minimum spanning tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.AdjacencyGraphs.UndirectedGraph.PrimsMinimumSpanningTree(System.Int32)">
            <summary>
            Create a graph tree representing the minimum 
            spanning tree between the vertices in the graph.
            </summary>
            <param name="root">The vertex index to start at.</param>
            <returns>The minimum  spanning tree.</returns>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.FlowGridGraph">
            <summary>
            A graph were the vertices make up a grid
            like the pixels in a image. If a vertex has a 
            capacity to a neighbouring vertex it is presumed 
            they are connected via a edge.
            
            Each edge has a capacity and a flow value
            and are used to perfrom the max flow / min cut algorithm.
            
            The edge directions are in the folling order.
            See Common.Core.Directions.D8 script.
            
            LEFT = 0;
            LEFT_TOP = 1;
            TOP = 2;
            RIGHT_TOP = 3;
            RIGHT = 4;
            RIGHT_BOTTOM = 5;
            BOTTOM = 6;
            LEFT_BOTTOM = 7;
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new graph.
            </summary>
            <param name="width">The graphs size on the x axis.</param>
            <param name="height">The graphs size on the y axis.</param>
            <param name="isOrthogonal">Is the graph orthogonal.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.#ctor(System.Single[0:,0:],System.Boolean)">
            <summary>
            Create a new graph and set the vertices edge 
            capacities with the values in the araay.
            The graph will have the same dimensions as the array. 
            </summary>
            <param name="capacities">The array of capacities.</param>
            <param name="isOrthogonal">Is the graph orthogonal.</param>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.VertexCount">
            <summary>
            THe number of vertices in the graph 
            which is the width times the height.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Width">
            <summary>
            The width of the graph on the x axis.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Height">
            <summary>
            The height of the graph on the y axis.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.IsOrthogonal">
            <summary>
            Does the graph use only orthogonal and not diagonal directions.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Capacity">
            <summary>
            THe vertices edges capacity value.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Flow">
            <summary>
            THe vertices edges flow value.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Label">
            <summary>
            THe vertices label.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.FlowGridGraph.Directions">
            <summary>
            The neigbour directions each pixel is connect to.
            If orthogonal there will be 4 neighbours (left, bottom, right and top).
            If not orthogonal there will be 8 neighbours which includes the diagonals.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetEdgeDirection(Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i)">
            <summary>
            Get the edge direction from the from and to indices.
            </summary>
            <param name="from">The x,y index the edge is from.</param>
            <param name="to">The x,y index the edge goes to.</param>
            <returns>The edge direction of -1 if from and to indices are not valid.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetEdgeDirection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the edge direction from the from and to indices.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns>The edge direction of -1 if from and to indices are not valid.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetIsOrthogonal(System.Boolean)">
            <summary>
            The neigbour directions each pixel is connect to.
            If orthogonal there will be 4 neighbours (left, bottom, right and top).
            If not orthogonal there will be 8 neighbours which includes the diagonals.
            </summary>
            <param name="isOrthogonal">Is the grapgh orthogonal</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.Clear">
            <summary>
            Clear the graph by setting all capacity, flow and labels to 0.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.CreateSearch">
            <summary>
            Creates a new helper search data structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.InBounds(System.Int32,System.Int32)">
            <summary>
            Are the indices within the bounds of the graph.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.Iterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over all vertices in the graph
            and apply the function.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.Iterate(System.Action{System.Int32,System.Int32,System.Int32})">
            <summary>
            Iterate over all vertices edges in the graph
            and apply the function.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.EnumerateDirections">
            <summary>
            Iterate over the graphs edge directions.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.EnumerateInBoundsDirections(System.Int32,System.Int32)">
            <summary>
            Iterate over the graphs edge directions.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.FillCapacity(System.Single[0:,0:])">
            <summary>
            Fill the capacity off all edges with the values in the array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetCapacity(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the capacity of the vertex edge at x,y 
            going to the neighbour vertex at i.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="i">The  neigbour vertices index.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetCapacity(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a edges capacity.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetCapacity(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the capacity of the vertex edge at x,y 
            going to the neighbour vertex at i.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="i">The  neigbour vertices index.</param>
            <param name="capacity"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetCapacity(System.Int32,System.Int32,System.Single)">
            <summary>
            Set the capacity of the vertex edge at x,y 
            going to the neighbour vertex.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="capacity"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetCapacity(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set a edges capacity.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <param name="capacity">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetFlow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the flow of the vertex edge at x,y 
            going to the neighbour vertex at i.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="i">The  neigbour vertices index.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetFlow(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a edges flow.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetFlow(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the flow of the vertex edge at x,y 
            going to the neighbour vertex at i.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="i">The  neigbour vertices index.</param>
            <param name="flow"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetFlow(System.Int32,System.Int32,System.Single)">
            <summary>
            Set the flow of the vertex edge at x,y 
            going to the neighbour vertex.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="flow"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetFlow(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set a edges flow.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <param name="flow">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.GetLabel(System.Int32,System.Int32)">
            <summary>
            Get the label of the vertex at x,y.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetLabel(System.Int32,System.Int32,Common.GraphTheory.GridGraphs.FLOW_GRAPH_LABEL)">
            <summary>
            Set the label of the vertex at x,y.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="label"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetLabelAndCapacity(System.Int32,System.Int32,Common.GraphTheory.GridGraphs.FLOW_GRAPH_LABEL,System.Int32)">
            <summary>
            Set the label of the vertex at x,y.
            Set all edges capacity going from this vertex.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <param name="label">The vertices label.</param>
            <param name="capacity">The vertices edges capacity.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetLabelAndCapacityInBounds(Common.Core.Shapes.Box2i,Common.GraphTheory.GridGraphs.FLOW_GRAPH_LABEL,System.Int32)">
            <summary>
            Sets the labels of the vertices in the bounds of the box.
            </summary>
            <param name="bounds">The box.</param>
            <param name="label">The label.</param>
            <param name="capacity">The vertices edges capacity.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.SetLabelAndCapacityInPerimeter(System.Int32,Common.GraphTheory.GridGraphs.FLOW_GRAPH_LABEL,System.Int32)">
            <summary>
            Sets the labels of the vertices in the perimeter of the box.
            </summary>
            <param name="width">The width of the perimeters border.</param>
            <param name="label">The label.</param>
            <param name="capacity">The vertices edges capacity.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.IsSource(System.Int32,System.Int32)">
            <summary>
            Is this vertex labeled as a source.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <returns>True is this vertex is labeled as a source.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.IsSink(System.Int32,System.Int32)">
            <summary>
            Is this vertex labeled as a sink.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <returns>True this vertex is labeled as a sink.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.IsBoundaryPoint(System.Int32,System.Int32)">
            <summary>
            Does the vertex at x,y have a neighbour with a different label.
            </summary>
            <param name="x">The x axis index.</param>
            <param name="y">The y axis index</param>
            <returns>True if the vertex at x,y have a neighbour with a different label.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.FindBoundaryPoints(System.Boolean,System.Boolean)">
            <summary>
            Find the vertices that are labeled as source or sink and
            have at least one neighbour that has a different label.
            </summary>
            <param name="includeSource">Should source vertices be checked.</param>
            <param name="includeSink">Should sink vertices be checked.</param>
            <returns>A list of all the vertices.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.Calculate">
            <summary>
            Calculate the max flow / min cut of the graph.
            </summary>
            <returns>The max flow.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.Calculate(Common.GraphTheory.GridGraphs.FlowGridSearch,System.Int32)">
            <summary>
            Calculate the max flow / min cut of the graph.
            </summary>
            <param name="search">The helper search data structure.</param>
            <param name="seed">The random generators seed.</param>
            <returns>The max flow.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.FordFulkersonMaxFlow(Common.GraphTheory.GridGraphs.FlowGridSearch,System.Int32)">
            <summary>
            
            </summary>
            <param name="search"></param>
            <param name="seed"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.CalculateMinCut(Common.GraphTheory.GridGraphs.FlowGridSearch)">
            <summary>
            
            </summary>
            <param name="search"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.FlowGridGraph.BreadthFirstSearch(Common.GraphTheory.GridGraphs.FlowGridSearch,System.Int32,System.Collections.Generic.IList{System.Int32},Common.Core.Numerics.Point3i@)">
            <summary>
            Find if there exists a path to the sink.
            </summary>
            <param name="search">The helper search data structure.</param>
            <param name="step">Used to determine if vertex has been visited.</param>
            <param name="sink">The index of the sink point.</param>
            <returns></returns>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.FlowGridSearch">
            <summary>
            A data structure to store the results 
            from a algorithm on a grid flow graph.
            </summary>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.GridGraph">
            <summary>
            A graph were the vertices make up a grid
            like the pixels in a image. Each vertex
            has a byte flag where the bits represent 
            if a edge is present to a neighbouring
            vertex.
            
            The edge directions are in the folling order.
            See Common.Core.Directions.D8 script.
            
            LEFT = 0;
            LEFT_TOP = 1;
            TOP = 2;
            RIGHT_TOP = 3;
            RIGHT = 4;
            RIGHT_BOTTOM = 5;
            BOTTOM = 6;
            LEFT_BOTTOM = 7;
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new graph.
            </summary>
            <param name="width">The graphs size on the x axis.</param>
            <param name="height">The graphs size on the y axis.</param>
            <param name="isOrthogonal">Is the graph orthogonal.</param>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.VertexCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.EdgeCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.IsOrthogonal">
            <summary>
            Does the graph use only orthogonal and not diagonal directions.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.Edges">
            <summary>
            The graphs vertices edge connections.
            A vertex can only connect to any of its 8 neighbours.
            A connection is represented by a bit in the edges byte
            being set to 1.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridGraph.Directions">
            <summary>
            The neigbour directions each pixel is connect to.
            If orthogonal there will be 4 neighbours (left, bottom, right and top).
            If not orthogonal there will be 8 neighbours which includes the diagonals.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.SetIsOrthogonal(System.Boolean)">
            <summary>
            The neigbour directions each pixel is connect to.
            If orthogonal there will be 4 neighbours (left, bottom, right and top).
            If not orthogonal there will be 8 neighbours which includes the diagonals.
            </summary>
            <param name="isOrthogonal">Is the grapgh orthogonal</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.GetEdgeDirection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the edge direction from the from and to indices.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns>The edge direction of -1 if from and to indices are not valid.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.InBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y indices within the bounds of the graph.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Print">
            <summary>
            Prints each vertices edge connections.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Print(System.Text.StringBuilder)">
            <summary>
            Prints each vertices edge connections.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Clear">
            <summary>
            Clears the graph.
            All vertices connections and weights are removed.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Iterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the graphs vertices using a lambda.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Iterate(System.Action{System.Int32,System.Int32,System.Int32})">
            <summary>
            Iterate over the graphs vertices edge connection using a lambda.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.HasDirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Is there a edge from the vertex at x,y to the 
            neighbour vertex in direction i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.HasDirectedEdge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Is the there a edge from the the vertex at fx,fy
            to a neighbour vertex at tx,ty.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.HasUndirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Is there a edge from the vertex at x,y to the 
            neighbour vertex in direction i is either direction. 
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.HasUndirectedEdge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Is the there a edge from the the vertex at fx,fy
            to a neighbour vertex at tx,ty in either direction.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.Degree(System.Int32,System.Int32)">
            <summary>
            Get the number of edges the vertex at x,y has.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.AddDirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a edge from the vertex at x,y to the vertices
            neighbour i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.AddDirectedEdge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a edge from the vertex at x,y to the vertices
            neighbour tx,ty.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.RemoveDirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove the edge from the vertex at x,y to the 
            neighour vertex at i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <exception cref="T:System.ArgumentException">If i less than 0 or greater than 7.</exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.AddUndirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a edge to and from the vertex at x,y to the vertices
            neighbour i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <exception cref="T:System.ArgumentException">If i less than 0 or greater than 7.</exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.AddUndirectedEdge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a edge to and from the vertex at fx,fy to the vertices
            neighbour tx,ty.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.RemoveUndirectedEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove the edge to and from the vertex at x,y to the vertices
            neighbour i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <exception cref="T:System.ArgumentException">If i less than 0 or greater than 7.</exception>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.GetAllVertices(System.Collections.Generic.List{Common.GraphTheory.GridGraphs.GridVertex})">
            <summary>
            For each vertex in the graph create a GridVertex object
            and add them to the provided list.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.GetEdges(System.Int32,System.Int32)">
            <summary>
            Get the vertex at x,y edge connections value.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridGraph.SetEdges(System.Int32,System.Int32,System.Byte)">
            <summary>
            Set the vertex at x,y edge connections value.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="edges"></param>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.GridSearch">
            <summary>
            A data structure to store the results 
            from a search algorithm on a grid graph.
            </summary>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.GridVertex">
            <summary>
            A vertex for a grid graph. A grid graph normally
            use a grid of indices to represent vertices
            but if they need to be instantied into objects
            this class is used.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridVertex.Index">
            <summary>
            The index in the grid this vertex
            belongs to.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.GridVertex.Cost">
            <summary>
            The cost of the vertex. used in
            algorithms such as shortest paths.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.GridVertex.CompareTo(Common.GraphTheory.GridGraphs.GridVertex)">
            <summary>
            Used to sort vertices by their cost.
            </summary>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.WeighedGridEdge">
            <summary>
            A edge for a grid graph. A grid graph normally
            use a grid of byte flags to represent edges
            but if they need to be instantied into objects
            this class is used.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.WeighedGridEdge.From">
            <summary>
            The index of the vertex this edge starts at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.WeighedGridEdge.To">
            <summary>
            The index of the vertex this edge ends at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.WeighedGridEdge.Weight">
            <summary>
            The weight of this edge.
            used in algorithms like spanning trees.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeighedGridEdge.CompareTo(Common.GraphTheory.GridGraphs.WeighedGridEdge)">
            <summary>
            Used to sort edges by their weight.
            </summary>
        </member>
        <member name="T:Common.GraphTheory.GridGraphs.WeightedGridGraph">
            <summary>
            A graph were the vertices make up a grid
            like the pixels in a image. Each vertex
            has a byte flag where the bits represent 
            if a edge is present to a neighbouring
            vertex.
            
            The edge directions are in the folling order.
            See Common.Core.Directions.D8 script.
            
            LEFT = 0;
            LEFT_TOP = 1;
            TOP = 2;
            RIGHT_TOP = 3;
            RIGHT = 4;
            RIGHT_BOTTOM = 5;
            BOTTOM = 6;
            LEFT_BOTTOM = 7;
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new graph.
            </summary>
            <param name="width">The graphs size on the x axis.</param>
            <param name="height">The graphs size on the y axis.</param>
            <param name="isOrthogonal">Is the graph orthogonal.</param>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.WeightedGridGraph.HasWeights">
            <summary>
            Does the graph have weights for the edges.
            The weights are optional and are only created if needed.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.GridGraphs.WeightedGridGraph.Weights">
            <summary>
            The edges weights.
            The weights are optional and are only created if needed.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.Print(System.Boolean)">
            <summary>
            Prints each vertices edge connections.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.Print(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Prints each vertices edge connections.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.Copy">
            <summary>
            Create a deep copy of the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.Clear">
            <summary>
            Clears the graph.
            All vertices connections and weights are removed.
            
            </summary>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.SetWeight(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set a edges weight.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <param name="w">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.SetWeight(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set a edges weight.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <param name="w">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetWeight(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a edges weight.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetWeight(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a edges weight.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.AddDirectedWeightedEdge(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Add a edge from the vertex at x,y to the vertices
            neighbour i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <param name="w">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.AddUndirectedWeightedEdge(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Add a edge to and from the vertex at x,y to the vertices
            neighbour i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <param name="w">The edges weight.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a GridEdge object for the edge
            from the vertex at x,y to the neighbour
            vertex at i.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="i">The bit position in the edge connections byte value.</param>
            <exception cref="T:System.ArgumentException">If i less than 0 or greater than 7.</exception>
            <returns>The edge object or null if there is no edge between the vertices.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetEdge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a GridEdge object for the edge
            from the vertex at fx,fy to the neighbour
            vertex at tx,ty.
            </summary>
            <param name="fx">The x index the edge is from.</param>
            <param name="fy">The y index the edge is from.</param>
            <param name="tx">The x index the edge goes to.</param>
            <param name="ty">The y index the edge goes to.</param>
            <returns>The edge object or null if there is no edge between the vertices.</returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetAllEdges(System.Collections.Generic.List{Common.GraphTheory.GridGraphs.WeighedGridEdge},System.Func{Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i,System.Single})">
            <summary>
            For each edge create a GridEdge object
            and add it to the provided list.
            </summary>
            <param name="edges">The list of edges to add to.</param>
            <param name="GetWeightFunc">A optional function to provide the edges weight. 
            If null the edges weight in the graph is used.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.GetEdges(System.Int32,System.Int32,System.Collections.Generic.List{Common.GraphTheory.GridGraphs.WeighedGridEdge},System.Func{Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i,System.Single})">
            <summary>
            Foreach edge the vertex at x,y has create a GridEdge object
            and add it to the provided list.
            </summary>
            <param name="x">The vertices x index.</param>
            <param name="y">The vertices y index.</param>
            <param name="edges">The list of edges to add to.</param>
            <param name="GetWeightFunc">A optional function to provide the edges weight. 
            If null the edges weight in the graph is used.</param>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.ToDirectedGraph">
            <summary>
            Convert the GridGraph to a adjacency DirectedGraph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.GridGraphs.WeightedGridGraph.ToUndirectedGraph">
            <summary>
            Convert the GridGraph to a adjacency UndirectedGraph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.GraphTheory.MatrixGraphs.MatrixEdge.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.MatrixGraphs.MatrixEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a edge going from and to these vertex indices.
            </summary>
            <param name="from">The from vertex index.</param>
            <param name="to">The to vertex index.</param>
        </member>
        <member name="M:Common.GraphTheory.MatrixGraphs.MatrixEdge.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a edge going from and to these vertex indices
            with a edge weight.
            </summary>
            <param name="from">The from vertex index.</param>
            <param name="to">The to vertex index.</param>
            <param name="weight">The weight of the edge.</param>
        </member>
        <member name="P:Common.GraphTheory.MatrixGraphs.MatrixEdge.From">
            <summary>
            The vertex index the edge starts at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.MatrixGraphs.MatrixEdge.To">
            <summary>
            The vertex index the edge ends at.
            </summary>
        </member>
        <member name="P:Common.GraphTheory.MatrixGraphs.MatrixEdge.Weight">
            <summary>
            The edges weight. Used in some search algorithms.
            ie spanning trees.
            </summary>
        </member>
        <member name="M:Common.GraphTheory.MatrixGraphs.MatrixEdge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
