<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessing</name>
    </assembly>
    <members>
        <member name="T:ImageProcessing.Images.FilterKernel2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="size"></param>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Single[0:,0:],System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="data"></param>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.Sum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.BoxKernel(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.GaussianKernel(System.Single)">
            <summary>
            
            </summary>
            <param name="sigma"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.SharpenKernel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.UnsharpenKernel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.GreyScaleImage2D">
            <summary>
            A 2D image containing only float values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SqrDistance(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Returns the normalized square distance between the two images.
            </summary>
            <param name="image">The other image to compare.</param>
            <returns>The normalized square distance.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Min(System.Single)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Max(System.Single)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Clamp(System.Single,System.Single)">
            <summary>
            Clamp each value to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Normalize">
            <summary>
            Normalize each value in the image to be between (inclusive) 0 and 1.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Invert">
            <summary>
            Inverts the values in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.OffsetScale(System.Single,System.Single,System.Boolean)">
            <summary>
            Offset and scale each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ScaleOffset(System.Single,System.Single,System.Boolean)">
            <summary>
            Scale then offset each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Sqrt">
            <summary>
            Take the sqrt of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Log">
            <summary>
            Take the log base e of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Log(System.Single)">
            <summary>
            Take the log of each value in the image using the provided base value of a.
            </summary>
            <param name="a">The base to use.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Log10">
            <summary>
            Take the log base 10 of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Abs">
            <summary>
            Apply th abs fuction to each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Add(System.Single)">
            <summary>
            Add the values in the image.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Subtract(System.Single,System.Boolean)">
            <summary>
            Subtract the values in the image.
            </summary>
            <param name="value">The value.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Multiply(System.Single)">
            <summary>
            Multiply the values in the image.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Divide(System.Single,System.Boolean)">
            <summary>
            Add the values in the image.
            </summary>
            <param name="value">The value.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Addition(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Adds the two images together.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Subtraction(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Subtracts the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Multiply(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Multiple the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Division(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Divide the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Addition(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Add each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Subtraction(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Subtract each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Multiply(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Multiply each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Division(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Divide each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Overlay(ImageProcessing.Images.GREYSCALE_OVERLAY_MODE,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Overlay two images.
            https://en.wikipedia.org/wiki/Blend_modes
            </summary>
            <param name="mode">The overlay mode</param>
            <param name="image">The other image.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Add(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Add the two images together.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Subtract(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Subtract the two images.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Multiply(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Multiply the two images.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Divide(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Divide the two images.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Screen(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            With Screen blend mode, the values of the pixels in the two layers are inverted, multiplied, 
            and then inverted again. The result is the opposite of Multiply: wherever either layer was 
            darker than white, the composite is brighter.
            This mode is commutative: exchanging two layers does not change the result. 
            If one layer contains a homogeneous gray, Screen blend mode is equivalent to using 
            this gray value as opacity when doing "normal mode" blend with white top layer.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Overlay(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Overlay combines Multiply and Screen blend modes.
            Where the base layer is light, the top layer becomes lighter; where the base layer is dark, 
            the top becomes darker; where the base layer is mid grey, the top is unaffected. 
            An overlay with the same picture looks like an S-curve.
            Depending on the value a of the base layer, one gets a linear interpolation between 
            black (a=0), the top layer (a=0.5), and white(a= 1).
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Difference(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Difference subtracts the bottom layer from the top layer or the other way around, 
            to always get a non-negative value.Blending with black produces no change, 
            as values for all colors are 0. (The RGB value for black is (0,0,0).) 
            Blending with white inverts the picture.
            One of the main utilities for this is during the editing process, 
            when it can be used to verify alignment of pictures with similar content.
            Exclusion is a very similar blend mode with lower contrast.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SoftLight(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Soft light is most closely related to Overlay and is only similar to Hard Light by name. 
            Applying pure black or white does not result in pure black or white.
            There are a variety of different methods of applying a soft light blend.
            All the flavors produce the same result when the top layer is pure black; 
            same for when the top layer is pure neutral gray.The Photoshop and illusions.
            hu flavors also produce the same result when the top layer is pure white 
            (the differences between these two are in how one interpolates between these 3 results).
            These three results coincide with gamma correction of the bottom layer with γ=2 (for top black),
            unchanged bottom layer(or, what is the same, γ= 1; for top neutral gray), and γ = 0.5(for top white).
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Min(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Darken Only creates a pixel that retains the smallest components of the foreground and background pixels. 
            If the foreground pixel has the components and the background has, the resultant pixel is
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Max(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Lighten Only has the opposite action of Darken Only. 
            It selects the maximum of each component from the foreground and background pixels. 
            The mathematical expression for Lighten Only is
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Single[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.GreyScaleImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y and mipmap m.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetValue(System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="value">The value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetRow(System.Single[],System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetRow(System.Single[],System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetColumn(System.Single[],System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetColumn(System.Single[],System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetSlope(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the slope from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetSlope(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the slope from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetNormal(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the normal from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetNormal(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the normal from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstDerivative(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the frist derivative from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstDerivative(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first derivative from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstAndSecondDerivative(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first and second derivative from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstAndSecondDerivative(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first and second derivative from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.FirstMipmap">
            <summary>
            Get the first mipmap.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.LastMipmap">
            <summary>
            Get the last mipmap.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="wrap">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Open(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Open(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Close(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Close(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Dilate(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Dilate all values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Dilate(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Dilate all values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Erode(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Erode(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.DilateFindMax(System.Int32,System.Int32,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the max value around the pixel at i,j.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ErodeFindMin(System.Int32,System.Int32,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the min value around the pixel at i,j.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ForwardDFT(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Calculate the 2D DFT on a greyscale image.
            Here we are using a vector to store the complex numbers
            where the x component is the real part and the y component is the imaginary part.
            </summary>
            <returns>A vector image containing the spectrum as complex numbers.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ForwardDCT(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Calculate the 2D DCT on a greyscale image.
            Here we are using a greyscale image to store the real numbers.
            </summary>
            <returns>A greyscale image containing the spectrum.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.InverseDCT(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Calculate the 2D inverse DCT on a greyscale image.
            </summary>
            <param name="image">The image to transform.</param>
            <returns>The transformed greyscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.MinMax(System.Single@,System.Single@)">
            <summary>
            The minimum and maximum values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Sum">
            <summary>
            The sum of all values in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Mean">
            <summary>
            The mean of the values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Variance(System.Single)">
            <summary>
            The variance of the values in the image.
            </summary>
            <param name="mean">The mean of the values in the image.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Threshold(ImageProcessing.Thresholding.GLOBAL_THRESHOLD,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.Image2D`1">
            <summary>
            Base class for 2D images.
            </summary>
            <typeparam name="T">The element type</typeparam>
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.BoxBlur``1(``0,System.Int32,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a box blur and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied. Must be the same size as the image.</param> 
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GaussianBlur``1(``0,System.Single,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a Gaussian blur and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="sigma">The standard deviation of the blur kernel.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied. Must be the same size as the image.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SharpenFilter``1(``0,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a sharpen filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.Must be the same size as the image.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.UnsharpenFilter``1(``0,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a unsharpen filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.Must be the same size as the image.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Filter``1(``0,ImageProcessing.Images.FilterKernel2D,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="k">The filter to apply.</param>
            <param name="bounds">The area to apply filter.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied. Must be the same size as the image.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Filter``1(System.Int32,System.Int32,``0,ImageProcessing.Images.FilterKernel2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a filter to the image at index i,j.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="image">The input image.</param>
            <param name="k">The filter to apply.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The filter result.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MedianFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a median filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MinFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a min filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MaxFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a max filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannels``1(System.Int32,System.Int32,System.Int32,``0,System.Collections.Generic.List{System.Single},System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get all the surrounding channel values from the image centered at i,j and in a area of size.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="c">The channels index.</param>
            <param name="image">The input image.</param>
            <param name="list">The list of surrounding pixels.</param>
            <param name="size">The size of the surroundng box.</param>
            <param name="mode">The wrapping mode.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetMinMax``1(System.Int32,System.Int32,System.Int32,``0,System.Int32,ImageProcessing.Images.WRAP_MODE,System.Single@,System.Single@)">
            <summary>
            Find the min and max values from the image centered at i,j and in a area of size.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="c">The channels index.</param>
            <param name="image">The input image.</param>
            <param name="size">The size of the surroundng box.</param>
            <param name="mode">The wrapping mode.</param>
            <param name="min">The min value found.</param>
            <param name="max">The max value found.</param>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.HasMipmaps">
            <summary>
            Does the image have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Size">
            <summary>
            The size of the image as a vector.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Bounds">
            <summary>
            The size of the image as a box.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Name">
            <summary>
            The images optional name.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Properties">
            <summary>
            A optional properties.
            Will remain null until a property is added.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToString">
            <summary>
            The images description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Clear">
            <summary>
            Clear the image of all data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.NewImage``1(System.Int32,System.Int32)">
            <summary>
            Helper function to create generic image.
            </summary>
            <typeparam name="IMAGE">THe images generic type.</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.HashCode">
            <summary>
            Create a hashcode by hasing all pixels in the image together.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelInterpolated(System.Single,System.Single,ImageProcessing.Images.INTERPOLATION,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="method">The interpolation method.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Single,System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannelInterpolated(System.Single,System.Single,System.Int32,ImageProcessing.Images.INTERPOLATION,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="method">The interpolation method.</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetPixelMipmap(System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetValue(System.Int32,System.Int32,`0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreSameSize(ImageProcessing.Images.IImage2D)">
            <summary>
            Is this array the same size as the other array.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreNotSameSize(ImageProcessing.Images.IImage2D)">
            <summary>
            Are the images the same size.
            </summary>
            <param name="image"></param>
            <returns>True if the images are not the same size.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.InBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index in the bounds of the array.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.NotInBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index not in the bounds of the array.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Indices(System.Int32@,System.Int32@,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the indices values depending on the wrapping mode.
            </summary>
            <param name="x">The index on the x axis.</param>
            <param name="y">The index on the y axis.</param>
            <param name="mode">The wrapping mode.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Copy(ImageProcessing.Images.Image2D{`0})">
            <summary>
            Can be called from a derived class to
            set any data found in the base class.
            </summary>
            <param name="copy">The copy of this image.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.BlockSize(System.Int32)">
            <summary>
            Recommended blocks for parallel processing.
            </summary>
            <param name="divisions">Number of divisions on each axis to make.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Iterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelIterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelIterate(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(Common.Core.Colors.ColorRGBA)">
            <summary>
            Fill the array with the pixel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0)">
            <summary>
            Fill the array with the value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(Common.Core.Colors.ColorRGBA[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(Common.Core.Colors.ColorRGBA[0:,0:],System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the image from a array.
            </summary>
            <param name="source">The array to fill from.</param>
            <param name="x">The x index to start filling image from.</param>
            <param name="y">The y index to start filling image from.</param>
            <param name="wrap">The wrap mode for out of bounds indices into the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0[0:,0:],System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the image from a array.
            </summary>
            <param name="source">The array to fill from.</param>
            <param name="x">The x index to start filling image from.</param>
            <param name="y">The y index to start filling image from.</param>
            <param name="wrap">The wrap mode for out of bounds indices into the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FillChannel(System.Single[0:,0:],System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the images channel from a array.
            </summary>
            <param name="source">The array to fill from.</param>
            <param name="channel">The channel to fill.</param>
            <param name="x">The x index to start filling image from.</param>
            <param name="y">The y index to start filling image from.</param>
            <param name="wrap">The wrap mode for out of bounds indices into the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Single[0:,0:,0:],System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the images channel from a array.
            </summary>
            <param name="source">The array to fill from.</param>
            <param name="x">The x index to start filling image from.</param>
            <param name="y">The y index to start filling image from.</param>
            <param name="wrap">The wrap mode for out of bounds indices into the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(ImageProcessing.Images.IImage2D,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(ImageProcessing.Images.IImage2D,Common.Core.Shapes.Box2i,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="bounds"></param>
            <param name="image_wrap">The wrap mode for indices outside image bounds.</param>
            <param name="source_wrap">The wrap mode for indices outside source bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Func{System.Int32,System.Int32,Common.Core.Colors.ColorRGBA})">
            <summary>
            Fill the image with the value from the function.
            </summary>
            <param name="func">The function that creates the pixels.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the image with the value from the function.
            </summary>
            <param name="func">The function that creates the pixels.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Collections.Generic.IList{ImageProcessing.Pixels.PixelIndex2D{`0}},ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the image with the values at the provided indices.
            </summary>
            <param name="indices">The indices and value to fill.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Collections.Generic.IList{Common.Core.Numerics.Point2i},`0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the image with the value at the provided indices.
            </summary>
            <param name="indices">The indices to fill.</param>
            <param name="value">The value to fill.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(Common.Core.Shapes.Box2i,`0,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the image with the value at the provided indices.
            </summary>
            <param name="bounds">The area to fill.</param>
            <param name="mask">A area in the bounds to not fill if true. 
            Optional and can be null. 
            Should match the dimensions of the bounds.</param>
            <param name="value">The value to fill.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <exception cref="T:System.ArgumentException">Throw if the bounds and mask are not the same size.</exception>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelFill(System.Func{System.Int32,System.Int32,`0},ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
            <param name="func"></param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelFill(System.Int32,System.Func{System.Int32,System.Int32,`0},ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
            <param name="blockSize"></param>
            <param name="func"></param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Modify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelModify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelModify(System.Int32,System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToIndexList(System.Collections.Generic.List{Common.Core.Numerics.Point2i},System.Func{`0,System.Boolean})">
            <summary>
            Return a index list of all pixels that match the predicate.
            </summary>
            <param name="list">The list the pixels will be added to.</param>
            <param name="predicate">The predicate that decides what pixels to include.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToPixelIndexList(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{`0}},System.Func{`0,System.Boolean})">
            <summary>
            Return a index list of all pixels that match the predicate.
            </summary>
            <param name="list">The list the pixels will be added to.</param>
            <param name="predicate">The predicate that decides what pixels to include.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToArray">
            <summary>
            Convert to a 2D array.
            </summary>
            <returns>A 2D arry fill with the images values.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToFloatArray(System.Int32)">
            <summary>
            Convert to a 2D array.
            </summary>
            <param name="channel">The channel to fill array with.</param>
            <returns>A 2D arry fill with the images values.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToFloatArray">
            <summary>
            Convert to a 2D array.
            </summary>
            <returns>A 2D arry fill with the images values.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreEqual(ImageProcessing.Images.Image2D{`0})">
            <summary>
            Do these two images contain the the same contents.
            </summary>
            <param name="image">The other image.</param>
            <returns>Do these two images contain the the same contents.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToGreyScaleImage">
            <summary>
            Convert to a greyscale image.
            </summary>
            <returns>The greayscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToBinaryImage(System.Single)">
            <summary>
            Convert to a binary image.
            </summary>
            <param name="threshold">The threshold that determines 
            if the images values are tru or false.</param>
            <returns>The binary image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToColorImage">
            <summary>
            Convert to a color image.
            </summary>
            <returns>The color image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToVectorImage">
            <summary>
            Convert to a vector image.
            </summary>
            <returns>The color image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapWidth(System.Int32)">
            <summary>
            Get the mipmaps width at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps width.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapHeight(System.Int32)">
            <summary>
            Get the mipmaps height at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps height.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapSize(System.Int32)">
            <summary>
            Get the mipmaps size at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps size.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CalculateMipmapLevels(System.Int32,System.Int32)">
            <summary>
            Calculate how many mipmap levels a image of thie size would have.
            </summary>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <returns>How many mipmap levels a image of thie size would have</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CreateMipmaps(ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create.</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AddProperty(System.String,System.Object)">
            <summary>
            Add a property to the image. Could be any object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The properties value.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetProperty(System.String)">
            <summary>
            Get a property by its name.
            </summary>
            <param name="name">The properties name.</param>
            <returns>The property if found or null if not.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.RemoveProperty(System.String)">
            <summary>
            Remove a property.
            </summary>
            <param name="name">The properties name.</param>
            <returns>True if tthe property was removed.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ClearProperties">
            <summary>
            Clear all properties.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ReadRAW(System.String,ImageProcessing.IO.RawParams)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.WriteRAW(System.String,ImageProcessing.IO.RawParams)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ReadTGA(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.WriteTGA(System.String,ImageProcessing.IO.TGAParams)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelInterpolated(System.Single,System.Single,ImageProcessing.Interpolation.InterpolationFunction,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="func"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannelInterpolated(System.Single,System.Single,System.Int32,ImageProcessing.Interpolation.InterpolationFunction,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="c"></param>
            <param name="func"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rescale``1(``0,System.Int32,System.Int32,ImageProcessing.Images.RESCALE,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.PointRescale``1(``0,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rescale``1(``0,System.Int32,System.Int32,ImageProcessing.Interpolation.InterpolationFunction,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="func"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawPoint(Common.Core.Numerics.Point2f,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(Common.Core.Shapes.Box2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="box"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBoxOutline(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBoxFilled(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(Common.Core.Shapes.Circle2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="circle"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(Common.Core.Numerics.Point2f,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(System.Single,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipse(Common.Core.Numerics.Point2f,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="radiusX"></param>
            <param name="radiusY"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipse(System.Single,System.Single,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radiusX"></param>
            <param name="radiusY"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipseOutline(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            TODO - Draws as filled?
            
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipseFilled(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf  
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawLineDDA(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            <param name="mask"></param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawLineBresenham(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            <param name="mode"></param>
        </member>
        <member name="F:ImageProcessing.Images.Image2D`1.INSIDE">
            <summary>
            Bitfields used to partition the space into 9 regions
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Clip(Common.Core.Shapes.Box2i,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with 
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm for details</remarks>
            <returns>a list of two points in the resulting clipped line, or zero</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ComputeOutCode(Common.Core.Shapes.Box2i,System.Double,System.Double)">
            <summary>
            Compute the bit code for a point (x, y) using the clip rectangle
            bounded diagonally by (xmin, ymin), and (xmax, ymax)
            ASSUME THAT xmax , xmin , ymax and ymin are global constants.
            </summary>
            <param name="extents">The extents.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawFilledPolygon(System.Int32[],Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a filled polygon. 
            Add the first point also at the end of the array if the line should be closed.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawShape(Common.Core.Shapes.IShape2f,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draw a shape into image by setting any pixels 
            in the image to the color if they are contained in the shape.
            </summary>
            <param name="shape">The shape interface.</param>
            <param name="color">The color to use.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawShape(Common.Core.Shapes.IShape2d,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draw a shape into image by setting any pixels 
            in the image to the color if they are contained in the shape.
            </summary>
            <param name="shape">The shape interface.</param>
            <param name="color">The color to use.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawFilledTriangle(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.HalfOffset``1(``0,System.Boolean)">
            <summary>
            Offsets the pixels in the image by half the images size.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to offset.</param>
            <param name="forwards">Should the offset by forwards or backwards.</param>
            <returns>The offset image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Offset``1(``0,System.Int32,System.Int32)">
            <summary>
            Offsets the pixels in the image.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to offset.</param>
            <param name="offsetX">The offset on the x axis.</param>
            <param name="offsetY">The offset on the y axis.</param>
            <returns>The offset image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FlipHorizontal``1(``0)">
            <summary>
            Flip the image on the x axis.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to flip.</param>
            <returns>The flipped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FlipVertical``1(``0)">
            <summary>
            Flip the image on the y axis.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image ti flip.</param>
            <returns>The flipped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate90``1(``0)">
            <summary>
            Returen a copy of the image rotated 90 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate180``1(``0)">
            <summary>
            Returen a copy of the image rotated 180 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate270``1(``0)">
            <summary>
            Returen a copy of the image rotated 270 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Crop``1(``0,Common.Core.Shapes.Box2i,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Return a copy of the image cropped to the bounds.
            </summary>
            <param name="image">The image to crop.</param>
            <param name="bounds">The bounds to crop.</param>
            <param name="mode">The wrap mode to use for pixels outside the bounds.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Crop``1(``0,System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Cut a image into smaller images.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to cut.</param>
            <param name="numX">The number of images to cut on the x axis.</param>
            <param name="numY">The number of images to cut on the y axis.</param>
            <param name="overlap">The amount to overlap with the previous images.</param>
            <param name="mode">The wrap mode</param>
            <returns>A list of the new images.</returns>
        </member>
        <member name="T:ImageProcessing.Images.BinaryImage2D">
            <summary>
            A 2D image containing only true or false values.
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Invert">
            <summary>
            Invert each bit in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Or(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            Or the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Xor(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            XOr the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.And(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            And the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="F:ImageProcessing.Images.BinaryImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Threshold">
            <summary>
            The threshold at which a value in the image is true or false.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetValue(System.Int32,System.Int32,System.Boolean,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="value">The value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetRow(System.Boolean[],System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetRow(System.Boolean[],System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetColumn(System.Boolean[],System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetColumn(System.Boolean[],System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.FirstMipmap">
            <summary>
            Get the first mipmap.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.LastMipmap">
            <summary>
            Get the last mipmap.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="wrap">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Open(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a"></param>
            <param name="size">The size of structure element. Size shoould be at least 3 and a odd number.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Open(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Close(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a"></param>
            <param name="size">The size of structure element. Size shoould be at least 3 and a odd number.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Close(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Border(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the border of all connected blocks of true values in the image.
            </summary>
            <param name="a"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Diluate all true values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Diluate all true values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if a pixel in the image should be dilated.
            A pixel should be dilated if any surrounding pixel
            and the element both have a true value.
            The element is centered on the pixel.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all true values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all true values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if a pixel in the image should be eroded.
            A pixel should be eroded if any surrounding pixel
            has a false value and the element a true value.
            The element is centered on the pixel.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Thinning(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.WRAP_MODE,System.Int32)">
            <summary>
            Iteratively thin a image by removing pixels on the border
            if they match the structure element.
            Will exit early if image can not be thinned anymore.
            </summary>
            <param name="a">The image.</param>
            <param name="iterations">The number of times to thin the image.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Thinning(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{System.Boolean}},ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,System.Int32,ImageProcessing.Images.WRAP_MODE,System.Boolean@)">
            <summary>
            Thin the image with the two structure elements and remove 
            any thinned points from the image.
            </summary>
            <param name="points">The current pixels in the image with a true value.</param>
            <param name="a">The image to be thinned.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="i">The rotation index for the elements.</param>
            <param name="done">If the image has not changed this iteration.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that matchs the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that match the structure element
            in any of its 4 rotations.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that match either of the two 
            structure elements in any of there 4 rotations.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if the pixel in the image matches the structure element
            in any of its 4 rotations.
            </summary>
            <param name="x">The x index in the source image.</param>
            <param name="y">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if the pixel in the image matches either of the 
            structure elements in any of there 4 rotations.
            </summary>
            <param name="x">The x index in the source image.</param>
            <param name="y">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if all surrounding pixels in a image match the 
            structure element.
            </summary>
            <param name="i">The x index in the source image.</param>
            <param name="j">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="rotate">The element rotation.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Segmentation(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.MinimumSpanningForest(ImageProcessing.Images.BinaryImage2D,System.Func{Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i,System.Single})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ColorizeForest(ImageProcessing.Images.BinaryImage2D,System.Int32,Common.GraphTheory.AdjacencyGraphs.GraphForest)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="seed"></param>
            <param name="forest"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.ColorImage2D">
            <summary>
            A 2D image containing RGB color values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.OffsetScale(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Offset and scale each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ScaleOffset(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Scale then offset each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Sqrt(System.Boolean)">
            <summary>
            Take the sqrt of each value in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Log(System.Boolean)">
            <summary>
            Take the log base e of each value in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Log(System.Single,System.Boolean)">
            <summary>
            Take the log of each value in the image using the provided base value of a.
            </summary>
            <param name="a">The base to use.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Log10(System.Boolean)">
            <summary>
            Take the log base 10 of each value in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetChannel(System.Int32,System.Single)">
            <summary>
            Set the channel at index c of each pixel to the value.
            </summary>
            <param name="c">The channels index (0-3).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SqrDistance(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Returns the normalized square distance between the two images.
            </summary>
            <param name="image">The other image to compare.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
            <returns>The normalized square distance.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.NormalizeRGBA(System.Boolean)">
            <summary>
            Normalize each pixels rgba values in the image to be between (inclusive) 0 and 1.
            </summary>
            <param name="includeAlpha">Should the alpha channel be normalized.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.NormalizeIntensity(System.Boolean)">
            <summary>
            Normalize each pixels rgba values by intensity in the image to be between (inclusive) 0 and 1.
            </summary>
            <param name="includeAlpha">Should the alpha channel be normalized.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Min(System.Single,System.Boolean)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Max(System.Single,System.Boolean)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Clamp(System.Single,System.Single,System.Boolean)">
            <summary>
            Clamp each pixel to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MakeHSV">
            <summary>
            Presuming the image color space is rgb 
            convert all pixels to hsv color space.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MakeRGB">
            <summary>
            Presuming the image color space is hsv 
            convert all pixels to rgb color space.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Gamma(System.Single,System.Single)">
            <summary>
            Applies the gamma function to the pixels in the image.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="a">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Invert(System.Boolean)">
            <summary>
            Inverts the pixels in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Add(Common.Core.Colors.ColorRGBA,System.Boolean)">
            <summary>
            Add the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Subtract(Common.Core.Colors.ColorRGBA,System.Boolean,System.Boolean)">
            <summary>
            Subtract the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
            <param name="includeAlpha">Should the alpha channel the included.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Multiply(Common.Core.Colors.ColorRGBA,System.Boolean)">
            <summary>
            Multiply the pixels in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
            <param name="pixel">The pixel.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Divide(Common.Core.Colors.ColorRGBA,System.Boolean,System.Boolean)">
            <summary>
            Add the pixels in the image.
            </summary>
            <param name="includeAlpha">Should the alpha channel the included.</param>
            <param name="pixel">The pixel.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Addition(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Adds the two images together.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Subtraction(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Subtracts the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Multiply(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Multiply the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Division(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Divide the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Addition(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Subtraction(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Multiply(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Division(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Divide each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Overlay(ImageProcessing.Images.COLOR_OVERLAY_MODE,ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Overlay two images.
            https://en.wikipedia.org/wiki/Blend_modes
            </summary>
            <param name="mode">The overlay mode</param>
            <param name="image">The other image.</param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.AlphaBlend(ImageProcessing.Images.ColorImage2D)">
            <summary>
            Alpha blend the two images.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Add(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Add the two images together.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Subtract(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Subtract the two images.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Multiply(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Multiply the two images.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Divide(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Divide the two images.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Screen(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            With Screen blend mode, the values of the pixels in the two layers are inverted, multiplied, 
            and then inverted again. The result is the opposite of Multiply: wherever either layer was 
            darker than white, the composite is brighter.
            This mode is commutative: exchanging two layers does not change the result. 
            If one layer contains a homogeneous gray, Screen blend mode is equivalent to using 
            this gray value as opacity when doing "normal mode" blend with white top layer.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Overlay(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Overlay combines Multiply and Screen blend modes.
            Where the base layer is light, the top layer becomes lighter; where the base layer is dark, 
            the top becomes darker; where the base layer is mid grey, the top is unaffected. 
            An overlay with the same picture looks like an S-curve.
            Depending on the value a of the base layer, one gets a linear interpolation between 
            black (a=0), the top layer (a=0.5), and white(a= 1).
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Difference(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Difference subtracts the bottom layer from the top layer or the other way around, 
            to always get a non-negative value.Blending with black produces no change, 
            as values for all colors are 0. (The RGB value for black is (0,0,0).) 
            Blending with white inverts the picture.
            One of the main utilities for this is during the editing process, 
            when it can be used to verify alignment of pictures with similar content.
            Exclusion is a very similar blend mode with lower contrast.
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SoftLight(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Soft light is most closely related to Overlay and is only similar to Hard Light by name. 
            Applying pure black or white does not result in pure black or white.
            There are a variety of different methods of applying a soft light blend.
            All the flavors produce the same result when the top layer is pure black; 
            same for when the top layer is pure neutral gray.The Photoshop and illusions.
            hu flavors also produce the same result when the top layer is pure white 
            (the differences between these two are in how one interpolates between these 3 results).
            These three results coincide with gamma correction of the bottom layer with γ=2 (for top black),
            unchanged bottom layer(or, what is the same, γ= 1; for top neutral gray), and γ = 0.5(for top white).
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Min(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Darken Only creates a pixel that retains the smallest components of the foreground and background pixels. 
            If the foreground pixel has the components and the background has, the resultant pixel is
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Max(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Lighten Only has the opposite action of Darken Only. 
            It selects the maximum of each component from the foreground and background pixels. 
            The mathematical expression for Lighten Only is
            </summary>
            <param name="image"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(Common.Core.Colors.ColorRGBA[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.ColorImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y and mipmap m.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetValue(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetRow(Common.Core.Colors.ColorRGBA[],System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetRow(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetRow(Common.Core.Colors.ColorRGBA[],System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetRow(System.Single[],System.Int32,System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetColumn(Common.Core.Colors.ColorRGBA[],System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetColumn(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetColumn(Common.Core.Colors.ColorRGBA[],System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetColumn(System.Single[],System.Int32,System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ToGreyScaleImage(System.Int32)">
            <summary>
            Convert to a greyscale image.
            </summary>
            <param name="c">The channel to use.</param>
            <returns>The greayscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.FirstMipmap">
            <summary>
            Get the first mipmap.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.LastMipmap">
            <summary>
            Get the last mipmap.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="wrap">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ForwardDCT(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Calculate the 2D DCT on a vector image.
            Each channel is transformed independantly.
            </summary>
            <returns>A Vector image containing the spectrum.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.InverseDCT(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Calculate the 2D DCT on a vector image.
            Each channel is transformed independantly.
            </summary>
            <returns>A Vector image containing the spectrum.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MinMaxRGBA(Common.Core.Colors.ColorRGBA@,Common.Core.Colors.ColorRGBA@)">
            <summary>
            The minimum and maximum values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MinMaxIntensity(System.Single@,System.Single@)">
            <summary>
            The minimum and maximum values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Sum">
            <summary>
            The sum of all pixels in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Mean">
            <summary>
            The mean of the pixels in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.VectorImage2D">
            <summary>
            A 2D image containing RGB color values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.OffsetScale(System.Single,System.Single,System.Boolean)">
            <summary>
            Offset and scale each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ScaleOffset(System.Single,System.Single,System.Boolean)">
            <summary>
            Scale then offset each value in the image
            with the option of taking the abs value first.
            </summary>
            <param name="scale">The amount to scale the result of the function.</param>
            <param name="offset">The amount to add to the value before appling the function.</param>
            <param name="abs">True to take the abs of the value before appling the function.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Sqrt">
            <summary>
            Take the sqrt of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Log">
            <summary>
            Take the log base e of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Log(System.Single)">
            <summary>
            Take the log of each value in the image using the provided base value of a.
            </summary>
            <param name="a">The base to use.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Log10">
            <summary>
            Take the log base 10 of each value in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Min(System.Single)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Max(System.Single)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Clamp(System.Single,System.Single)">
            <summary>
            Clamp each value to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Normalize">
            <summary>
            Normalize each vector in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Invert">
            <summary>
            Inverts the vectors in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Add(Common.Core.Numerics.Vector2f)">
            <summary>
            Add the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Subtract(Common.Core.Numerics.Vector2f,System.Boolean)">
            <summary>
            Subtract the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Multiply(Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Divide(Common.Core.Numerics.Vector2f,System.Boolean)">
            <summary>
            Add the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Addition(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Adds the two images together.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Subtraction(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Subtracts the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Multiply(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Multiply the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Division(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Divide the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Addition(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Add each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Subtraction(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Multiply(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Division(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Divide each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(System.Int32,System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(Common.Core.Numerics.Vector2f[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.VectorImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y and mipmap m.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a vector from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The vector at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a vector from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The vector at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetValue(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the vector at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="vector">The vector.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetRow(Common.Core.Numerics.Vector2f[],System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetRow(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the values of a row in the image. 
            </summary>
            <param name="row">The array to hold the values.</param>
            <param name="y">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetRow(Common.Core.Numerics.Vector2f[],System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetRow(System.Single[],System.Int32,System.Int32)">
            <summary>
            Set the values of a row in the image. 
            </summary>
            <param name="row">The array to holding the values.</param>
            <param name="y">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row length does not match the images width.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetColumn(Common.Core.Numerics.Vector2f[],System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetColumn(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the values of a column in the image. 
            </summary>
            <param name="column">The array to hold the values.</param>
            <param name="x">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetColumn(Common.Core.Numerics.Vector2f[],System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetColumn(System.Single[],System.Int32,System.Int32)">
            <summary>
            Set the values of a column in the image. 
            </summary>
            <param name="column">The array to holding the values.</param>
            <param name="x">The column index.</param>
            <param name="c">The channels index.</param>
            <exception cref="T:System.ArgumentException">Thrown if the column length does not match the images height.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ToGreyScaleImage">
            <summary>
            Convert to a greyscale image.
            </summary>
            <returns>The greayscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ToGreyScaleImage(System.Int32)">
            <summary>
            Convert to a greyscale image.
            </summary>
            <param name="c">The channel to use.</param>
            <returns>The greayscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.FirstMipmap">
            <summary>
            Get the first mipmap.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.LastMipmap">
            <summary>
            Get the last mipmap.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="wrap">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.InverseDFT(ImageProcessing.Images.VectorImage2D)">
            <summary>
            Calculate the 2D inverse DFT on a vector image.
            Here we are using a vector to store the complex numbers
            where the x component is the real part and the y component is the imaginary part.
            </summary>
            <param name="image">The image to transform.</param>
            <returns>THe real part of the transform in a greyscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ForwardDCT(ImageProcessing.Images.VectorImage2D)">
            <summary>
            Calculate the 2D DCT on a vector image.
            Each channel is transformed independantly.
            </summary>
            <returns>A Vector image containing the spectrum.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.InverseDCT(ImageProcessing.Images.VectorImage2D)">
            <summary>
            Calculate the 2D DCT on a vector image.
            Each channel is transformed independantly.
            </summary>
            <returns>A Vector image containing the spectrum.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.MinMax(Common.Core.Numerics.Vector2f@,Common.Core.Numerics.Vector2f@)">
            <summary>
            The minimum and maximum values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Sum">
            <summary>
            The sum of all values in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Mean">
            <summary>
            The mean of the values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Variance(System.Single)">
            <summary>
            The variance of the values in the image.
            </summary>
            <param name="mean">The mean of the values in the image.</param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.WRAP_MODE">
            <summary>
            Wrap mode options for when sampling a image.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.BLEND_MODE">
            <summary>
            The mode pixels are blended based on there alpha value.
            Only applies to images with a alpha channel.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.BIT_DEPTH">
            <summary>
            The bit depth the values in a pixel.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.PIXEL_FORMAT_IO">
            <summary>
            The format of a pixel is how the channels are layed out.
            This format is restricted to what form should be used 
            when saving/loading the pixels data from a file.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.IImage2D">
            <summary>
            General interface for a 2 dimensional image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Width">
            <summary>
            The images size on the x axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Height">
            <summary>
            The images size on the y axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Size">
            <summary>
            The size of the image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.MipmapWidth(System.Int32)">
            <summary>
            Get the mipmaps width at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps width.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.MipmapHeight(System.Int32)">
            <summary>
            Get the mipmaps height at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps height.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Single,System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelInterpolated(System.Single,System.Single,ImageProcessing.Images.INTERPOLATION,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="method">The interpolation method.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetChannelInterpolated(System.Single,System.Single,System.Int32,ImageProcessing.Images.INTERPOLATION,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="method">The interpolation method.</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetPixelMipmap(System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-3).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.AddProperty(System.String,System.Object)">
            <summary>
            Add a property to the image. Could be any object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The properties value.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetProperty(System.String)">
            <summary>
            Get a property by its name.
            </summary>
            <param name="name">The properties name.</param>
            <returns>The property if found or null if not.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.RemoveProperty(System.String)">
            <summary>
            Remove a property.
            </summary>
            <param name="name">The properties name.</param>
            <returns>True if tthe property was removed.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.ClearProperties">
            <summary>
            Clear all properties.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Fill(Common.Core.Colors.ColorRGBA)">
            <summary>
            
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Fill(Common.Core.Colors.ColorRGBA[])">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Fill(Common.Core.Colors.ColorRGBA[0:,0:],System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="wrap"></param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Fill(ImageProcessing.Images.IImage2D,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="wrap"></param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.FillChannel(System.Single[0:,0:],System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Fill the images channel from a array.
            </summary>
            <param name="source">The array to fill from.</param>
            <param name="channel">The channel to fill.</param>
            <param name="x">The x index to start filling image from.</param>
            <param name="y">The y index to start filling image from.</param>
            <param name="wrap">The wrap mode for out of bounds indices into the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Fill(System.Func{System.Int32,System.Int32,Common.Core.Colors.ColorRGBA})">
            <summary>
            Fill the image with the value from the function.
            </summary>
            <param name="func">The function that creates the pixels.</param>
        </member>
        <member name="T:ImageProcessing.Images.StructureElement2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32[0:,0:])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:ImageProcessing.Images.StructureElement2D.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.StructureElement2D.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.Fill(Common.Core.Shapes.IShape2f,System.Boolean)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="center"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ToFloatArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rotate"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated0(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated90(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated180(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated270(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.BoxElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.CircleElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.HitMissCornerElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ThinningElements">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.CityBlockElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ChessBoardElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.InterpolationFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.InterpolationFunction.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.Pow2(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.Pow3(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.LinearInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LinearInterpolation.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LinearInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.LinearInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.CubicInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Smooth">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Sharp">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.CubicInterpolation.a">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.GetWeight(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.SplineInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.CatmullRom">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.CubicBSpline">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.MitchellNetravli">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.SplineInterpolation.a">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.SplineInterpolation.b">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.GetWeight(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.LanzcosInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default2">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default3">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default4">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.LanzcosInterpolation.n">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.GetWeight(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.PolyphaseKernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.#ctor(ImageProcessing.Interpolation.InterpolationFunction,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="func"></param>
            <param name="srcLength"></param>
            <param name="dstLength"></param>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.WindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Samples">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Weights">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.GetWeight(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.ApplyHorizontal``1(System.Int32,``0,``0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="y"></param>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.ApplyVertical``1(System.Int32,``0,``0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="x"></param>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.SampleWindow(ImageProcessing.Interpolation.InterpolationFunction,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="func"></param>
            <param name="x"></param>
            <param name="scale"></param>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.Read(ImageProcessing.Images.IImage2D,System.String,ImageProcessing.IO.RawParams)">
            <summary>
            Load from a byte array.
            </summary>
            <param name="image"></param>
            <param name="filename">The file name.</param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.Write(ImageProcessing.Images.IImage2D,System.String,ImageProcessing.IO.RawParams)">
            <summary>
            Save the image as raw bytes.
            </summary>
            <param name="image"></param>
            <param name="filename">The filename.</param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.ToBytes(ImageProcessing.Images.IImage2D,ImageProcessing.IO.RawParams)">
            <summary>
            Get the images data as bytes.
            </summary>
            <param name="image">The image to process.</param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.FromBytes(ImageProcessing.Images.IImage2D,System.Byte[],ImageProcessing.IO.RawParams)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="bytes"></param>
            <param name="param"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.Read(System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bitDepth"></param>
            <param name="bigEndian"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.Write(System.Single,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bitDepth"></param>
            <param name="bigEndian"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.ReadShort(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bigEndian"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.ReadFloat(System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.WriteShort(System.Single,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bigEndian"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteRaw.WriteFloat(System.Single,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
        </member>
        <member name="T:ImageProcessing.IO.ReadWriteTGA">
            <summary>
            stb_image_write - v1.16 - public domain.
            writes out PNG/BMP/TGA/JPEG/HDR images to C stdio - Sean Barrett 2010-2015.
            no warranty implied; use at your own risk.
            https://github.com/nothings/stb
            https://github.com/nothings/stb/blob/master/stb_image.h
            https://github.com/nothings/stb/blob/master/stb_image_write.h
            http://www.paulbourke.net/dataformats/tga/
            </summary>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteTGA.Read(ImageProcessing.Images.IImage2D,System.String)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="filename"></param>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteTGA.Read``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.IO.ReadWriteTGA.Write(ImageProcessing.Images.IImage2D,System.String,ImageProcessing.IO.TGAParams)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="filename"></param>
            <param name="param"></param>
        </member>
        <member name="T:ImageProcessing.Pixels.ColorPixelSet2D">
            <summary>
            A set of pixel indices.
            Can be used to calculate some proerties of the set. 
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.#ctor(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{Common.Core.Colors.ColorRGBA}})">
            <summary>
            
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.CalculateMean">
            <summary>
            The mean value of the pixels in the set.
            </summary>
            <returns>The mean value of the pixels in the set.</returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelIndex2D`1">
            <summary>
            Struct to hold a pixels value and its index in a image.
            </summary>
            <typeparam name="T">The pixels type</typeparam>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.x">
            <summary>
            The pixels index in a image.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.y">
            <summary>
            The pixels index in a image.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.Value">
            <summary>
            The pixels value.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.Tag">
            <summary>
            Tag for algorithms on the image can mark or 
            id the image if needed. May change at any point.
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Create a new PixelIndex2D.
            </summary>
            <param name="x">The pixels x coordinate.</param>
            <param name="y">The pixels y coordinate.</param>
            <param name="value">The pixels value</param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.#ctor(System.Int32,System.Int32,`0,System.Int32)">
            <summary>
            Create a new PixelIndex2D.
            </summary>
            <param name="x">The pixels x coordinate.</param>
            <param name="y">The pixels y coordinate.</param>
            <param name="value">The pixels value</param>
            <param name="tag"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelSegmentation2D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.#ctor(ImageProcessing.Images.Image2D{`0})">
            <summary>
            
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Image">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Sets">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.AddPixel(Common.Core.Numerics.Point2i,ImageProcessing.Pixels.PixelIndex2D{`0})">
            <summary>
            
            </summary>
            <param name="root"></param>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.ColorizeSegmentation(System.Int32)">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.SegmentationColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.SegmentationColors.Generate(System.Int32,System.Collections.Generic.IEnumerable{Common.Core.Numerics.Point2i})">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelSet2D`1">
            <summary>
            A set of pixel indices.
            Can be used to calculate some proerties of the set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.#ctor">
            <summary>
            /
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.#ctor(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{`0}})">
            <summary>
            
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSet2D`1.Count">
            <summary>
            The number of pixels in the set.
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSet2D`1.Pixels">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.Add(ImageProcessing.Pixels.PixelIndex2D{`0})">
            <summary>
            Add a new pixel index to the set.
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CompareTo(ImageProcessing.Pixels.PixelSet2D{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateBounds">
            <summary>
            Calculate the bounding box of the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateRoundness(System.Single)">
            <summary>
            Calcuate the roundness of the set.
            </summary>
            <param name="perimeter"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateCentroid">
            <summary>
            Calcuate the centriod of the set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Spectral.DCT1DDirect">
            <summary>
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/spectral/dct/Dct1dDirect.java
            </summary>
        </member>
        <member name="T:ImageProcessing.Spectral.DCT2D">
            <summary>
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/spectral/dct/Dct2d.java
            </summary>
        </member>
        <member name="M:ImageProcessing.Spectral.DCT2D.Forward(System.Single[0:,0:])">
            <summary>
            Performs an "in-place" 2D DCT forward transformation on the supplied data.
            The input signal is replaced by the associated DCT spectrum.
            </summary>
            <param name="g">the signal to be transformed (modified)</param>
        </member>
        <member name="M:ImageProcessing.Spectral.DCT2D.Inverse(System.Single[0:,0:])">
             <summary>
            Performs an "in-place" 2D DCT inverse transformation on the supplied spectrum.
             The input spectrum is replaced by the associated signal.
             </summary>
             <param name="G">the spectrum to be transformed (modified)</param>
        </member>
        <member name="M:ImageProcessing.Spectral.DCT2D.Transform(System.Single[0:,0:],System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="forward"></param>
        </member>
        <member name="T:ImageProcessing.Spectral.DFT1DDirect">
            <summary>
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/spectral/dft/Dft1dDirect.java
            </summary>
        </member>
        <member name="T:ImageProcessing.Spectral.DFT2D">
            <summary>
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/spectral/dft/Dft2d.java
            </summary>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.Forward(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Performs an "in-place" 2D DFT forward transformation on the supplied data.
            The input signal is replaced by the associated DFT spectrum.
            </summary>
            <param name="gRe">gRe real part of the signal (modified)</param>
            <param name="gIm">gIm imaginary part of the signal (modified)</param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.Inverse(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Performs an "in-place" 2D DFT inverse transformation on the supplied spectrum.
            The input spectrum is replaced by the associated signal.
            </summary>
            <param name="GRe">real part of the spectrum (modified)</param>
            <param name="GIm">imaginary part of the spectrum (modified)</param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.Transform(System.Single[0:,0:],System.Single[0:,0:],System.Boolean)">
            <summary>
            Transforms the given 2D arrays 'in-place'. Separate arrays of identical size
            must be supplied for the real and imaginary parts of the signal(forward)
            or spectrum(inverse), neither of which may be null.
            </summary>
            <param name="inRe">real part of the input signal or spectrum (modified)</param>
            <param name="inIm">imaginary part of the input signal or spectrum (modified)</param>
            <param name="forward">forward transformation if true, inverse transformation if false</param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.extractRow(System.Single[0:,0:],System.Int32,System.Single[])">
            <summary>
            extract the values of row 'v' of 'g' into 'row'
            </summary>
            <param name="g"></param>
            <param name="v"></param>
            <param name="row"></param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.insertRow(System.Single[0:,0:],System.Int32,System.Single[])">
            <summary>
            insert 'row' into row 'v' of 'g'
            </summary>
            <param name="g"></param>
            <param name="v"></param>
            <param name="row"></param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.extractCol(System.Single[0:,0:],System.Int32,System.Single[])">
            <summary>
            extract the values of column 'u' of 'g' into 'cols'
            </summary>
            <param name="g"></param>
            <param name="u"></param>
            <param name="col"></param>
        </member>
        <member name="M:ImageProcessing.Spectral.DFT2D.insertCol(System.Single[0:,0:],System.Int32,System.Single[])">
            <summary>
            insert 'col' into column 'u' of 'g'
            </summary>
            <param name="g"></param>
            <param name="u"></param>
            <param name="col"></param>
        </member>
        <member name="T:ImageProcessing.Statistics.ColorHistogram">
            <summary>
            A histogram for color images which consists 
            of a float histogram for each channel in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.#ctor(System.Int32)">
            <summary>
            Create a new histogram.
            </summary>
            <param name="bins">The number of bins in the histogram.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.#ctor(ImageProcessing.Images.ColorImage2D,System.Int32)">
            <summary>
            Create a new histogram.
            </summary>
            <param name="image">The image to load.</param>
            <param name="bins">The number of bins in the histogram.</param>
        </member>
        <member name="P:ImageProcessing.Statistics.ColorHistogram.BinSize">
            <summary>
            The number of bins in the histogram.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.ColorHistogram.Channels">
            <summary>
            The number of channels in the histogram.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.ColorHistogram.Histograms">
            <summary>
            The histograms, one for each channel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageProcessing.Statistics.ColorHistogram.Item(System.Int32,System.Int32)">
            <summary>
            Array accessor for the histograms bin count.
            </summary>
            <param name="c">The histograms channel.</param>
            <param name="i">The bins index.</param>
            <returns>The bin count at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Clear">
            <summary>
            Clear the histogram of all data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.GetChannel(System.Int32)">
            <summary>
            Get the histogram for a channel.
            </summary>
            <param name="i">The channels index.</param>
            <returns>The histogram for channel i.</returns>
            <exception cref="T:System.NullReferenceException">If the channels have not been created.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.SqrDistance(ImageProcessing.Statistics.ColorHistogram)">
            <summary>
            The normalized sqr distance between the histograms.
            </summary>
            <param name="histo"></param>
            <returns>The normalized sqr distance between the histograms.</returns>
            <exception cref="T:System.ArgumentException">If the histograms dont have the same bin size or number of channels.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Sample(System.Random)">
            <summary>
            Sample the histogram for a random value.
            Will create the histograms CFD if not already created.
            </summary>
            <param name="rng">The random number generator.</param>
            <returns>A random value that matchs the distribution of the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Equalize">
            <summary>
            Equalizes the histogram.
            Attempts to make the histogram of a uniform distribution. 
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Match(ImageProcessing.Statistics.ColorHistogram)">
            <summary>
            Attempts to match the hisogram to the other histogram.
            </summary>
            <param name="other">THe histogram to match.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Load(ImageProcessing.Images.ColorImage2D,System.Boolean)">
            <summary>
            Load the color image into the histogram.
            </summary>
            <param name="image">The color image.</param>
            <param name="inculdeAlpha">Should a histogram of the alpha channel be created.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.Normalize">
            <summary>
            Normalize the histogram.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.ToImage">
            <summary>
            Convert the histogram back into a image.
            </summary>
            <returns>The image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateHistogramBarGraph(System.Int32,Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the bar graph of the histogram.
            Used for debugging.
            </summary>
            <param name="channel">The channel to create the graph from.</param>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The bar graph image.</returns>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateHistogramLineGraph(Common.Core.Colors.ColorRGBA[],Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the line graph of the histogram.
            Used for debugging.
            </summary>
            <param name="colors">The color array for each channel.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The line graph image.</returns>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateHistogramLineGraph(System.Int32,Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the line graph of the histogram.
            Used for debugging.
            </summary>
            <param name="channel">The channel to create the graph from.</param>
            <param name="color">The lines color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The line graph image.</returns>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateHistogramLineGraphCFD(Common.Core.Colors.ColorRGBA[],Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the line graph of the histogram CFD.
            Used for debugging.
            </summary>
            <param name="colors">The color array for each channel.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The line graph image.</returns>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateHistogramBarGraphCFD(System.Int32,Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the bar graph of the histograms CFD.
            Used for debugging.
            </summary>
            <param name="channel">The channel to create the graph from.</param>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The bar graph image.</returns>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.ColorHistogram.CreateCumulativeHistograms">
            <summary>
            Create the cumulative function distribution (CFD).
            </summary>
            <exception cref="T:System.NullReferenceException">If no data has been loaded into the histogram.</exception>
        </member>
        <member name="T:ImageProcessing.Statistics.Histogram">
            <summary>
            A histogram of a single channel of values in a image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.#ctor(System.Int32)">
            <summary>
            Create a new histogram.
            </summary>
            <param name="bins">The number of bins in the histogram.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.#ctor(ImageProcessing.Images.GreyScaleImage2D,System.Int32)">
            <summary>
            Create a new histogram.
            </summary>
            <param name="image">The image to load.</param>
            <param name="bins">The number of bins in the histogram.</param>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.BinSize">
            <summary>
            The number of bins in the histogram.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.ImageWidth">
            <summary>
            The width of the image the histogram was created from.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.ImageHeight">
            <summary>
            The height of the image the histogram was created from.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.HasCDF">
            <summary>
            Has the CFD been calculated.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.Bins">
            <summary>
            The histograms bins the pixels are divided up into.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.CDF">
            <summary>
            The CFD bins the pixels are divided up into.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageProcessing.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Array accessor for the bin count.
            </summary>
            <param name="i">The bins index.</param>
            <returns>The bin count at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Clear">
            <summary>
            Clear the histogram of all data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.GetCDF(System.Int32)">
            <summary>
            Get the cdf value for a bin in the histogram.
            Will create the CDF if not already created.
            </summary>
            <param name="i">The bin index.</param>
            <returns>The bins cdf value</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.GetBinCount(System.Int32)">
            <summary>
            Get the number of pixels in the bin at the index.
            </summary>
            <param name="index">The bin index.</param>
            <returns>The number of pixels in the bin.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.MaxBinCount">
            <summary>
            Find the bin with the most pixels in it.
            </summary>
            <returns>The largest bin size.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.MinValue">
            <summary>
            Find the minimum value in the histogram.
            </summary>
            <returns>The minimum value in the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.MaxValue">
            <summary>
            Find the maximum value in the histogram.
            </summary>
            <returns>The maximum value in the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.BinSum">
            <summary>
            The sum of all the bin sizes.
            </summary>
            <returns>The sum of all the bin sizes.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Mean">
            <summary>
            Calculate the mean of the histogram.
            </summary>
            <returns>The mean of the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Variance(System.Single)">
            <summary>
            Calculate the variance of the histogram.
            </summary>
            <param name="mean">The mean of all the pixels in the bin.</param>
            <returns>The variance of the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.SqrDistance(ImageProcessing.Statistics.Histogram)">
            <summary>
            The normalized sqr distance between the histograms.
            </summary>
            <param name="histo"></param>
            <returns>The normalized sqr distance between the histograms.</returns>
            <exception cref="T:System.ArgumentException">If the histograms dont have the same bin size.</exception>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Sample(System.Random)">
            <summary>
            Sample the histogram for a random value.
            Will create the histograms CFD if not already created.
            </summary>
            <param name="rng">The random generator.</param>
            <returns>A random value that matchs the distribution of the histogram.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Equalize">
            <summary>
            Equalizes the histogram.
            Attempts to make the histograom of a uniform distribution. 
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Match(ImageProcessing.Statistics.Histogram)">
            <summary>
            Attempts to match the hisograom to the other histogram.
            </summary>
            <param name="other">THe histogram to match.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Load(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Load the histogram with the data from a greyScale image.
            </summary>
            <param name="image">THe greyScale image to load.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Load(ImageProcessing.Images.ColorImage2D,System.Int32)">
            <summary>
            Load the histogram with the data from a color images channel.
            </summary>
            <param name="image">The color image.</param>
            <param name="channel">The channel to load.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Load(System.Collections.Generic.IList{ImageProcessing.Pixels.PixelIndex2D{System.Single}},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pixels"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.ToImage">
            <summary>
            Convert the histogram back into a image.
            </summary>
            <returns>The image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.FillChannel(ImageProcessing.Images.ColorImage2D,System.Int32)">
            <summary>
            Fill the channel of the color image.
            </summary>
            <param name="image">The color image to fill.</param>
            <param name="c">The images channel to fill.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.Normalize">
            <summary>
            Normalize the histogram.
            The range of the histogram will be modified
            to start at 0 and go to the bin size.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateHistogramBarGraph(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the bar graph of the histogram.
            Used for debugging.
            </summary>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The bar graph image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateHistogramLineGraph(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the line graph of the histogram.
            Used for debugging.
            </summary>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The line graph image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateHistogramBarGraphCFD(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the bar graph of the histograms CFD.
            Used for debugging.
            </summary>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The bar graph image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateHistogramLineGraphCFD(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Int32)">
            <summary>
            Creates a image with the line graph of the histograms CFD.
            Used for debugging.
            </summary>
            <param name="color">The bars color.</param>
            <param name="background">The background color.</param>
            <param name="height">The images height. The width will be the bin size.</param>
            <returns>The line graph image.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateCDF">
            <summary>
            Create the cumulative function distribution (CFD).
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateBins(System.Int32)">
            <summary>
            Creates the histograms bins.
            </summary>
            <param name="bins"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.ToArray">
            <summary>
            Get the bins as a int array.
            </summary>
            <returns>The int array where each value represents 
            the numper of pixels in the bin.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.Histogram.CreateMappingFunction(ImageProcessing.Statistics.Histogram)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:ImageProcessing.Statistics.HistogramBin">
            <summary>
            A bin in a histogram that holds the pixels from a image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.#ctor(System.Int32)">
            <summary>
            Create a new bin.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.#ctor(System.Int32,System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{System.Single}})">
            <summary>
            Create a new bin.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.HistogramBin.BinValue">
            <summary>
            The unnomalized value pixels for this bin.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.HistogramBin.Count">
            <summary>
            THe number of pixels in the bin.
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.HistogramBin.Pixels">
            <summary>
            THe bins pixels.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.Clear">
            <summary>
            Clear the bin of all pixels.
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.SetPixels(System.Single)">
            <summary>
            Sets all pixels in the bin.
            </summary>
            <param name="value">The pixels value.</param>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.GetPixel(System.Int32)">
            <summary>
            Get a pixel from the bin.
            </summary>
            <param name="i">The pixels index.</param>
            <returns>The pixel.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.Add(ImageProcessing.Pixels.PixelIndex2D{System.Single})">
            <summary>
            Add a pixel index to the bin.
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.Mean">
            <summary>
            Calculate the mean of all pixels in the bin.
            </summary>
            <returns>The mean of all pixels in the bin.</returns>
        </member>
        <member name="M:ImageProcessing.Statistics.HistogramBin.Variance(System.Single)">
            <summary>
            Calculate the variance of all pixels in the bin.
            </summary>
            <param name="mean">The mean of all the pixels in the bin.</param>
            <returns>The variance of all pixels in the bin.</returns>
        </member>
        <member name="T:ImageProcessing.Statistics.KMeans">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeans.Clusters">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.Run(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
            <param name="weighted"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitializeClustersRandom(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitializeClustersWeighted(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateWeights(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="weights"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.ChoosePixel(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.GreyScaleImage2D,System.Double)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="weights"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitialAssignment(ImageProcessing.Images.ColorImage2D)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateAssignment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateClusterMeans">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.Closest(Common.Core.Colors.ColorRGBA)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Statistics.KMeansCluster">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.#ctor(System.Int32,Common.Core.Colors.ColorRGBA)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="mean"></param>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Mean">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Set">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Synthesis.Exemplar">
            <summary>
            A exemplar is a sub-image of a larger images and
            is used as a example image for image synthesis.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.#ctor(Common.Core.Numerics.Point2i,System.Int32,ImageProcessing.Images.ColorImage2D)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="size"></param>
            <param name="source"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.#ctor(Common.Core.Numerics.Point2i,System.Int32,System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="size"></param>
            <param name="sources"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.#ctor(Common.Core.Numerics.Point2i,System.Int32,System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D},ImageProcessing.Synthesis.EXEMPLAR_VARIANT)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="size"></param>
            <param name="sources"></param>
            <param name="original"></param>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Index">
            <summary>
            The exemplars pixel index in the source image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Name">
            <summary>
            Optional name for exemplar.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Cost">
            <summary>
            The exemplars cost value that can be set to sort the exemplar.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.SourceCount">
            <summary>
            The number of images in the tile.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.ExemplarSize">
            <summary>
            The exemplars size on the x axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Used">
            <summary>
            Has this exemplar been used.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Variant">
            <summary>
            Is the exemplar a variant of another one.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Sources">
            <summary>
            The exemplars source image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Images">
            <summary>
            The exemplars optional images. Null and not created by default.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Exemplar.Histograms">
            <summary>
            The exemplars optional histograms. Null and not created by default.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.GetPixel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="wrap"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.AddImages(Common.Core.Numerics.Point2i,System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="sources"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.CreateImages">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.CreateHistograms">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.CompareTo(ImageProcessing.Synthesis.Exemplar)">
            <summary>
            Compare the exemplar to another by there costs.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.HistogramSqrDistance(System.Int32,ImageProcessing.Statistics.ColorHistogram)">
            <summary>
            Find the square distance between this exemplars histogram and the other.
            </summary>
            <param name="i">The images histogram index to compare to.</param>
            <param name="histo">The other histogram.</param>
            <returns>The square distance between the two.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.EdgeSqrDistance">
            <summary>
            Find the square distance between each images edges for each image in the exemplar.
            This can help determine which exemplars will create better tileable textures.
            </summary>
            <returns>The square distance between the edges of the images.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.GetImageCopy(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.GetTileCopy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.IncrementUsed">
            <summary>
            Increment the used count by 1.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.ResetUsed">
            <summary>
            Reset the used count to 0.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.GetIndex(System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Exemplar.CreateVariants(ImageProcessing.Synthesis.EXEMPLAR_VARIANT)">
            <summary>
            Create new variants of this exemplar.
            </summary>
            <param name="flags">The type of variant to create.</param>
            <returns>A list of new variants.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.#ctor(ImageProcessing.Images.ColorImage2D,System.Boolean,System.Int32)">
            <summary>
            Create a new exemplat set.
            </summary>
            <param name="source">The source image the exemplars are created from.</param>
            <param name="sourceIsTileable">Is the source texture tileable.</param>
            <param name="exemplarSize">The size of a exemplar.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.#ctor(System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D},System.Boolean,System.Int32)">
            <summary>
            Create a new exemplat set.
            </summary>
            <param name="sources">The source image the exemplars are created from is the first image in the list. 
            Any otyhers are optional textures like heights, normasl, metalness, etc.</param>
            <param name="sourceIsTileable">Is the source texture tileable.</param>
            <param name="exemplarSize">The size of a exemplar.</param>
        </member>
        <member name="P:ImageProcessing.Synthesis.ExemplarSet.SourceCount">
            <summary>
            The numer of source images in the set.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.ExemplarSet.ExemplarSize">
            <summary>
            The width and height of a exemplars image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.ExemplarSet.SourceIsTileable">
            <summary>
            Is the source texture tileable.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.ExemplarSet.Exemplars">
            <summary>
            The exemplars
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.ExemplarSet.Sources">
            <summary>
            The exemplars source image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.Clear">
            <summary>
            Clear the set of all exemplars.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.Copy">
            <summary>
            Creates a deep copy of the set.
            Exemplars are deep copied. The source images are not deep copied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetExemplars">
            <summary>
            Get a copy of the list of exemplars in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.ResetUsedCount">
            <summary>
            Reset the used count of each exemplar in the set.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.PercentageUsed">
            <summary>
            Get the percentage of exemplars in the set have been used.
            </summary>
            <returns>The percentage of used exemplars from 0 to 1.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.CreateVariants(ImageProcessing.Synthesis.EXEMPLAR_VARIANT)">
            <summary>
            Create new variants of each exemplar and add the to the set.
            </summary>
            <param name="flags">The types of exemplars to create.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetVariants(System.Int32,ImageProcessing.Synthesis.EXEMPLAR_VARIANT)">
            <summary>
            Create the variants for a exemplar and return in a list.
            The list contains the original exemplar.
            </summary>
            <param name="index">The exemplars index.</param>
            <param name="flags">The variant flag that controls which variants to create.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetTiles">
            <summary>
            Get a list of each exemplars tiles.
            Tile are deep copied.
            </summary>
            <returns>The list of tiles.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetRandomTiles(System.Int32,System.Int32)">
            <summary>
            Get a list of random tiles.
            Tile are deep copied.
            </summary>
            <param name="count">The number of tiles to get. 
            If the count is larger than the set size then all tiles are returned.</param>
            <param name="seed">The seed for the random generator.</param>
            <returns>The list of tiles.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetRandomSourcePixel(System.Int32,System.Random)">
            <summary>
            Get a random pixel from the source image.
            </summary>
            <param name="i">The source images index.</param>
            <param name="rnd">The random generator.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetMaxUsedCount">
            <summary>
            Find the most times a exemplar has been used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.CreateExemplarImages">
            <summary>
            Create the exemplar images from the source images.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.CreateExemplarHistograms">
            <summary>
            Create the exemplar histograms from there images.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.Shuffle(System.Int32)">
            <summary>
            Shuffles the exemplars.
            </summary>
            <param name="seed">The random generators seed used to shuffle exemplars.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.Trim(System.Int32)">
            <summary>
            Trims the list size.
            </summary>
            <param name="trim">The size the exemplar list should be trimmmed to.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.TrimByBestEdgeCost(System.Int32)">
            <summary>
            Trims the exemplars based on there edge costs.
            </summary>
            <param name="trim">The amount to trim by.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetRandomExemplars(System.Int32,System.Int32)">
            <summary>
            Get a list of random exemplars.
            </summary>
            <param name="count">The number of exemplars to get. 
            If the count is larger than the set size then all exemplars are returned.</param>
            <param name="seed">The seed for the random generator.</param>
            <returns>The list of exemplars.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.CreateExemplarsFromCrop">
            <summary>
            Create a new set of exemplars by dividing the sources image into even parts.
            Presumes the exemplar size divides evenly in the source image size.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetCropIndices(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="numX"></param>
            <param name="numY"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.CreateExemplarsFromRandom(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new set of exeplars by taking random parts of the source image.
            </summary>
            <param name="count">The number of exemplas to create. 
            The actual number of exemplars to create maybe smaller 
            than this if new area of the source image run out.</param>
            <param name="seed">The seed for the random generator.</param>
            <param name="maxCoverage">The max amount (in percentage 0-1) of the source image already 
            sampled that a new exemplar can be created from.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.GetCoverage(ImageProcessing.Images.BinaryImage2D,System.Int32,System.Int32)">
            <summary>
            Get the percentage of pixels in a area of the mask that are set to true.
            </summary>
            <param name="mask">The mask image thats the same size as the source image.</param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.ExemplarSet.AddCoverage(ImageProcessing.Images.BinaryImage2D,System.Int32,System.Int32)">
            <summary>
            Set a area of the mask images pixels to true.
            </summary>
            <param name="mask">The mask image thats the same size as the source image.</param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:ImageProcessing.Synthesis.Tile">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.#ctor(ImageProcessing.Images.ColorImage2D)">
            <summary>
            
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.#ctor(System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D})">
            <summary>
            
            </summary>
            <param name="images"></param>
        </member>
        <member name="P:ImageProcessing.Synthesis.Tile.Name">
            <summary>
            Optional name for tile.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Tile.Width">
            <summary>
            The tiles size on the x axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Tile.Height">
            <summary>
            The tiles size on the y axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.Tile.Images">
            <summary>
            The tiles images.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.GetImageNames">
            <summary>
            Get all the images names as a string for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.Copy">
            <summary>
            Create a deep copy of the tile.
            </summary>
            <returns>A deep copy of the tile.</returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.Fill(System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D})">
            <summary>
            Copy the images in tile.
            </summary>
            <param name="images">The images to copy.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.CreateImages(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.Offset(System.Int32,System.Int32)">
            <summary>
            Offset each image.
            </summary>
            <param name="xoffset">The amount to offset on the x axis.</param>
            <param name="yoffset">The amount to offset on the y axis.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.HalfOffset(System.Boolean)">
            <summary>
            Offset each image in the tile by half.
            </summary>
            <param name="forwards">The offset direction.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.Tile.Blur(ImageProcessing.Images.GreyScaleImage2D,System.Nullable{Common.Core.Shapes.Box2i},System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Blur the tile.
            </summary>
            <param name="mask">The mask that determines what areas will be blurred and the blur strength. 
            Is optional and can be null.</param>
            <param name="bounds">A box that determines what areas will be blurred. 
            Is optional and can be null.</param>
            <param name="strength">The blurs strength.</param>
            <param name="wrap">The wrap mode used to determine how out of bounds pixels are handled.</param>
        </member>
        <member name="T:ImageProcessing.Synthesis.WangTile">
            <summary>
            A wang tile consists of a square tile where each edge is assigned a number commonly referred to as a color.
            The edges color is then used to determine what other tiles it can be adjacent to in a tiling pattern.
            This implementation presumes the edges numbers range from 0 to 3.
            https://en.wikipedia.org/wiki/Wang_tile
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new wang tile.
            </summary>
            <param name="left">The tiles edge color on its left side (-x)</param>
            <param name="bottom">The tiles edge color on its bottom side (-y)</param>
            <param name="right">The tiles edge color on its right side (+x)</param>
            <param name="top">The tiles edge color on its top side (+y)</param>
            <param name="tileSize">The tiles size.</param>
            <param name="height">The tiles height.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new wang tile.
            </summary>
            <param name="left">The tiles edge color on its left side (-x)</param>
            <param name="bottom">The tiles edge color on its bottom side (-y)</param>
            <param name="right">The tiles edge color on its right side (+x)</param>
            <param name="top">The tiles edge color on its top side (+y)</param>
            <param name="width">The tiles width.</param>
            <param name="height">The tiles height.</param>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Index1">
            <summary>
            A 1D number representing the tiles index in a 1D array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Index2">
            <summary>
            A 2D number representing the tiles index in a 2D array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Left">
            <summary>
            The tiles edge color on its left side (-x)
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Bottom">
            <summary>
            The tiles edge color on its bottom side (-y)
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Right">
            <summary>
            The tiles edge color on its right side (+x)
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Top">
            <summary>
            The tiles edge color on its top side (+y)
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Edges">
            <summary>
            The tiles edge colors.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Width">
            <summary>
            The width of  the tile.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Height">
            <summary>
            The height of  the tile.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.Tile">
            <summary>
            The tiles image.
            </summary>
        </member>
        <member name="F:ImageProcessing.Synthesis.WangTile.Colors">
            <summary>
            A list of colors the tiles edges can be represented as.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTile.IsConst">
            <summary>
            Are all the edge colors in this the same.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.Copy">
            <summary>
            Create a deep copy of the tile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.Fill(System.Collections.Generic.IList{ImageProcessing.Images.ColorImage2D})">
            <summary>
            Copy the images in tile.
            </summary>
            <param name="images">The images to copy.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.CreateMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.CreateEdgeColorMap(System.Int32,System.Single)">
            <summary>
            Colors the edges of the image according to its edge color id.
            </summary>
            <param name="thickness">The thickness of the border.</param>
            <param name="alpha">The colors alpha.</param>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTile.CreateColorMap(System.Single)">
            <summary>
            Colors the image according to its edge color id.
            </summary>
            <param name="alpha"></param>
        </member>
        <member name="T:ImageProcessing.Synthesis.WangTileSet">
            <summary>
            A set of wang tiles.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new set of wang tiles.
            </summary>
            <param name="numHColors">The number of colors on the x axis (must be 2-4)</param>
            <param name="numVColors">The number of colors on the y axis (must be 2-4)</param>
            <param name="tileSize">The tiles image data size.</param>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumHColors">
            <summary>
            The number of colors on the horizontal xaxis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumVColors">
            <summary>
            The number of colors on the vertical yaxis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumHTiles">
            <summary>
            The number of tiles on the horizontal xaxis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumVTiles">
            <summary>
            The number of tiles on the vertical yaxis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumTileImages">
            <summary>
            The number of images in each tile.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.NumTiles">
            <summary>
            The total number of tiles in the set.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.TileSize">
            <summary>
            The size of a tiles image data.
            </summary>
        </member>
        <member name="P:ImageProcessing.Synthesis.WangTileSet.Tiles">
            <summary>
            The 2D array of the tiles.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.ToFlattenedList">
            <summary>
            Get the 2D array of tiles as a 1D list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.CreateTileMap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new tile mapping where the mapping is a 2D array of 
            randomly selected tiles with the constraint that each tiles 
            edge colors must match is 4 neighbours colors.
            </summary>
            <param name="numHTiles">The number of tiles on the horizontal xaxis.</param>
            <param name="numVTiles">The number of tiles on the vertical yaxis.</param>
            <param name="seed">The random generators seed.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.GetNextTile(System.Int32,System.Int32,ImageProcessing.Synthesis.WangTile[0:,0:],System.Random)">
            <summary>
            Get a new tile with random edge colors with the constraint that the edges colors
            match its 4 neighbours edge colors.
            </summary>
            <param name="i">The first index of the tile in the tiles array.</param>
            <param name="j">The second index of the tile in the tiles array.</param>
            <param name="tiles"></param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.IsNeighbourTile(System.Int32,System.Int32,ImageProcessing.Synthesis.WangTile[0:,0:],ImageProcessing.Synthesis.WangTile)">
            <summary>
            Determine if any of a tiles neighbours are the same.
            A tile counts as being the same if all the edge colors
            are the same and can be determined by comparing the tiles index.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="tiles"></param>
            <param name="tile"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.GetEdgeOrder(System.Int32)">
            <summary>
            Given a number of edge colors then create a array
            where each edge color is used and matched its neighbours edges.
            </summary>
            <param name="numColors"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.TileIndex2D(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Given the 4 edges colors get the index the tile 
            should be in a 2D array where its colors will match its neighbour tiles.
            </summary>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.TileIndex1D(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Given the 4 edges colors get the index the tile 
            should be in a 1D array where its colors will match its neighbour tiles.
            </summary>
            <param name="left"></param>
            <param name="bottom"></param>
            <param name="right"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Synthesis.WangTileSet.TileIndex1D(System.Int32,System.Int32)">
            <summary>
            Given the 2 edges colors get the index the tile 
            should be in a 1D array where its colors will match its neighbour tiles.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.IsodataThresholder.GetThreshold(ImageProcessing.Images.GreyScaleImage2D)">
             <summary>
              This thresholder implements the algorithm proposed by Ridler and Calvard (1978),
             T.W.Ridler, S.Calvard, Picture thresholding using an iterative selection method,
             IEEE Trans.System, Man and Cybernetics, SMC-8 (August 1978) 630-632.
             described in Glasbey/Horgan: "Image Analysis for the Biological Sciences" (Ch. 4).
            
             Fast version using tables of background and foreground means.
             
             https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/threshold/global/IsodataThresholder.java
             </summary>
             <param name="image"></param>
             <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.IsodataThresholder.MakeMeanTables(ImageProcessing.Statistics.Histogram,System.Double[]@,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="M0"></param>
            <param name="M1"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.MaxEntropyThresholder.GetThreshold(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Maximum entropy thresholder modeled after Kapur et al. (1985).
            
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/threshold/global/MaxEntropyThresholder.java
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.MaxEntropyThresholder.Normalize(ImageProcessing.Statistics.Histogram)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.MaxEntropyThresholder.MakeTables(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="S0"></param>
            <param name="S1"></param>
        </member>
        <member name="M:ImageProcessing.Thresholding.MeanThresholder.GetThreshold(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/threshold/global/MeanThresholder.java
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.MinErrorThresholder.GetThreshold(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Minimum Error thresholder after Kittler and Illingworth (1986).
            
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/threshold/global/MinErrorThresholder.java
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.MinErrorThresholder.MakeSigmaTables(ImageProcessing.Statistics.Histogram,System.Double[]@,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="S2_0"></param>
            <param name="S2_1"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.OtusThresholder.GetThreshold(ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Thresholder as described in N. Otsu, "A threshold selection method from gray-level histograms",
            IEEE Transactions on Systems, Man, and Cybernetics 9(1), 62-66 (1979).
            https://github.com/imagingbook/imagingbook-common/blob/master/src/main/java/imagingbook/common/threshold/global/OtsuThresholder.java
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Thresholding.OtusThresholder.MakeMeanTables(ImageProcessing.Statistics.Histogram,System.Double[]@,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="M0"></param>
            <param name="M1"></param>
            <returns></returns>
        </member>
    </members>
</doc>
