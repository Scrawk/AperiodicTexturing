<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessing</name>
    </assembly>
    <members>
        <member name="T:ImageProcessing.Images.ColorImage2D">
            <summary>
            A 2D image containing RGB color values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetChannel(System.Int32,System.Single)">
            <summary>
            Set the channel at index c of each pixel to the value.
            </summary>
            <param name="c">The channels index (0-3).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Min(System.Single)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Max(System.Single)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Clamp(System.Single,System.Single)">
            <summary>
            Clamp each pixel to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MakeHSV">
            <summary>
            Presuming the image color space is rgb 
            convert all pixels to hsv color space.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.MakeRGB">
            <summary>
            Presuming the image color space is hsv 
            convert all pixels to rgb color space.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Gamma(System.Single,System.Single)">
            <summary>
            Applies the gamma function to the pixels in the image.
            </summary>
            <param name="lambda">The power to raise each channel to.</param>
            <param name="a">The constant the result is multiplied by. Defaults to 1.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Invert">
            <summary>
            Inverts the pixels in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Add(Common.Core.Colors.ColorRGBA)">
            <summary>
            Add the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Subtract(Common.Core.Colors.ColorRGBA,System.Boolean)">
            <summary>
            Subtract the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Multiply(Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Divide(Common.Core.Colors.ColorRGBA,System.Boolean)">
            <summary>
            Add the pixels in the image.
            </summary>
            <param name="pixel">The pixel.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Addition(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Adds the two images together.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Subtraction(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Subtracts the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Multiply(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Multiply the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Division(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.ColorImage2D)">
            <summary>
            Divide the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Addition(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Subtraction(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Multiply(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.op_Division(ImageProcessing.Images.ColorImage2D,Common.Core.Colors.ColorRGBA)">
            <summary>
            Divide each pixel in the image with pixel.
            </summary>
            <param name="image1">The first image.</param>
            <param name="pixel">The pixel.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.#ctor(Common.Core.Colors.ColorRGBA[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.ColorImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.ColorImage2D.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Sum">
            <summary>
            The sum of all pixels in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.ColorImage2D.Mean">
            <summary>
            The mean of the pixels in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.FilterKernel2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="size"></param>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.#ctor(System.Single[0:,0:],System.Single)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="data"></param>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.FilterKernel2D.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.Sum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.BoxKernel(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.GaussianKernel(System.Single)">
            <summary>
            
            </summary>
            <param name="sigma"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.SharpenKernel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.FilterKernel2D.UnsharpenKernel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.GreyScaleImage2D">
            <summary>
            A 2D image containing only float values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Min(System.Single)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Max(System.Single)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Clamp(System.Single,System.Single)">
            <summary>
            Clamp each value to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Normalize">
            <summary>
            Normalize each value in the image to be between (inclusive) 0 and 1.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Invert">
            <summary>
            Inverts the values in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Add(System.Single)">
            <summary>
            Add the values in the image.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Subtract(System.Single,System.Boolean)">
            <summary>
            Subtract the values in the image.
            </summary>
            <param name="value">The value.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Multiply(System.Single)">
            <summary>
            Multiply the values in the image.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Divide(System.Single,System.Boolean)">
            <summary>
            Add the values in the image.
            </summary>
            <param name="value">The value.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Addition(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Adds the two images together.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Subtraction(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Subtracts the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Multiply(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Multiple the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Division(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            Divide the two images.
            The resulting inage will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Addition(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Add each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Subtraction(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Subtract each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Multiply(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Multiply each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.op_Division(ImageProcessing.Images.GreyScaleImage2D,System.Single)">
            <summary>
            Divide each value in the image with value.
            </summary>
            <param name="image1">The first image.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.#ctor(System.Single[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.GreyScaleImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.GreyScaleImage2D.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetValue(System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="value">The value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetSlope(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the slope from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetSlope(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the slope from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetNormal(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the normal from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetNormal(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the normal from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstDerivative(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the frist derivative from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstDerivative(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first derivative from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstAndSecondDerivative(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first and second derivative from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetFirstAndSecondDerivative(System.Single,System.Single,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the first and second derivative from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="w">The size of the pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Open(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Open(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Close(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Close(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Dilate(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Dilate all values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Dilate(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Dilate all values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Erode(ImageProcessing.Images.GreyScaleImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Erode(ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.DilateFindMax(System.Int32,System.Int32,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the max value around the pixel at i,j.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.ErodeFindMin(System.Int32,System.Int32,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the min value around the pixel at i,j.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.MinMax">
            <summary>
            The minimum and maximum values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Sum">
            <summary>
            The sum of all values in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Mean">
            <summary>
            The mean of the values in the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.GreyScaleImage2D.Variance(System.Single)">
            <summary>
            The variance of the values in the image.
            </summary>
            <param name="mean">The mean of the values in the image.</param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.Image2D`1">
            <summary>
            Base class for 2D images.
            </summary>
            <typeparam name="T">The element type</typeparam>
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.BoxBlur``1(``0,System.Int32,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a box blur and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GaussianBlur``1(``0,System.Single,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a Gaussian blur and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="sigma">The standard deviation of the blur kernel.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SharpenFilter``1(``0,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a sharpen filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.UnsharpenFilter``1(``0,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a unsharpen filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="bounds">The area to apply the filter to.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Filter``1(``0,ImageProcessing.Images.FilterKernel2D,System.Nullable{Common.Core.Shapes.Box2i},ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="k">The filter to apply.</param>
            <param name="bounds">The area to apply filter.</param>
            <param name="mask">If not null only areas where mask has a value will have the filter applied.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Filter``1(System.Int32,System.Int32,``0,ImageProcessing.Images.FilterKernel2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a filter to the image at index i,j.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="image">The input image.</param>
            <param name="k">The filter to apply.</param>
            <param name="mode">The wrap mode to use.</param>
            <returns>The filter result.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MedianFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a median filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MinFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a min filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MaxFilter``1(``0,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Apply a max filter and return as a new image.
            </summary>
            <param name="image">The input image.</param>
            <param name="size">The size in pixels of the kernel.</param>
            <param name="mode">The wrapping mode.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannels``1(System.Int32,System.Int32,System.Int32,``0,System.Collections.Generic.List{System.Single},System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get all the surrounding channel values from the image centered at i,j and in a area of size.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="c">The channels index.</param>
            <param name="image">The input image.</param>
            <param name="list">The list of surrounding pixels.</param>
            <param name="size">The size of the surroundng box.</param>
            <param name="mode">The wrapping mode.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetMinMax``1(System.Int32,System.Int32,System.Int32,``0,System.Int32,ImageProcessing.Images.WRAP_MODE,System.Single@,System.Single@)">
            <summary>
            Find the min and max values from the image centered at i,j and in a area of size.
            </summary>
            <param name="i">The first index.</param>
            <param name="j">The second index.</param>
            <param name="c">The channels index.</param>
            <param name="image">The input image.</param>
            <param name="size">The size of the surroundng box.</param>
            <param name="mode">The wrapping mode.</param>
            <param name="min">The min value found.</param>
            <param name="max">The max value found.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Random``1(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Create a image filled with randow values.
            </summary>
            <typeparam name="IMAGE">The images generic type</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <param name="seed">The random generators seed.</param>
            <param name="min">The min value generated.</param>
            <param name="max">The max value generated.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Random``1(System.Int32,System.Int32,System.Random,System.Single,System.Single)">
            <summary>
            Create a image filled with randow values.
            </summary>
            <typeparam name="IMAGE">The images generic type</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <param name="rnd">The random generator.</param>
            <param name="min">The min value generated.</param>
            <param name="max">The max value generated.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Const``1(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a image filled with a single value.
            </summary>
            <typeparam name="IMAGE">The images generic type</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <param name="value">The constant value.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Const``1(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA)">
            <summary>
            Create a image filled with a single value.
            </summary>
            <typeparam name="IMAGE">The images generic type</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <param name="value">The constant value.</param>
            <returns>The new image.</returns>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.HasMipmaps">
            <summary>
            Does the image have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Size">
            <summary>
            The size of the image as a vector.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Bounds">
            <summary>
            The size of the image as a box.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Tag">
            <summary>
            Tag for algorithms on the image can mark or 
            id the image if needed. May change at any point.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.Image2D`1.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToString">
            <summary>
            The images description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Clear">
            <summary>
            Clear the image of all data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.NewImage``1(System.Int32,System.Int32)">
            <summary>
            Helper function to create generic image.
            </summary>
            <typeparam name="IMAGE">THe images generic type.</typeparam>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.HashCode">
            <summary>
            Create a hashcode by hasing all pixels in the image together.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetPixelMipmap(System.Single,System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetPixelMipmap(System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreSameSize(ImageProcessing.Images.IImage2D)">
            <summary>
            Is this array the same size as the other array.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreNotSameSize(ImageProcessing.Images.IImage2D)">
            <summary>
            Are the images the same size.
            </summary>
            <param name="image"></param>
            <returns>True if the images are not the same size.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.InBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index in the bounds of the array.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.NotInBounds(System.Int32,System.Int32)">
            <summary>
            Are the x and y index not in the bounds of the array.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Indices(System.Int32@,System.Int32@,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get the indices values depending on the wrapping mode.
            </summary>
            <param name="x">The index on the x axis.</param>
            <param name="y">The index on the y axis.</param>
            <param name="mode">The wrapping mode.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.BlockSize(System.Int32)">
            <summary>
            Recommended blocks for parallel processing.
            </summary>
            <param name="divisions">Number of divisions on each axis to make.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Iterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelIterate(System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelIterate(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Iterate over the array with the action in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0)">
            <summary>
            Fill the array with the value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0[0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(`0[])">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(ImageProcessing.Images.IImage2D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(ImageProcessing.Images.IImage2D,Common.Core.Shapes.Box2i)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Collections.Generic.IList{ImageProcessing.Pixels.PixelIndex2D{`0}})">
            <summary>
            Fill the image with the values at the provided indices.
            </summary>
            <param name="indices">The indices and value to fill.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Fill(System.Collections.Generic.IList{Common.Core.Numerics.Point2i},`0)">
            <summary>
            Fill the image with the value at the provided indices.
            </summary>
            <param name="indices">The indices to fill.</param>
            <param name="value">The value to fill.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelFill(System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelFill(System.Int32,System.Func{System.Int32,System.Int32,`0})">
            <summary>
            Fill the array with the value from the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Modify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelModify(System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ParallelModify(System.Int32,System.Func{`0,`0})">
            <summary>
            Modify the array with the function in parallel.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToIndexList(System.Collections.Generic.List{Common.Core.Numerics.Point2i},System.Func{`0,System.Boolean})">
            <summary>
            Return a index list of all pixels that match the predicate.
            </summary>
            <param name="list">The list the pixels will be added to.</param>
            <param name="predicate">The predicate that decides what pixels to include.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToPixelIndexList(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{`0}},System.Func{`0,System.Boolean})">
            <summary>
            Return a index list of all pixels that match the predicate.
            </summary>
            <param name="list">The list the pixels will be added to.</param>
            <param name="predicate">The predicate that decides what pixels to include.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToArray">
            <summary>
            Convert to a 2D array.
            </summary>
            <returns>A 2D arry fill with the images values.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.AreEqual(ImageProcessing.Images.Image2D{`0})">
            <summary>
            Do these two images contain the the same contents.
            </summary>
            <param name="image">The other image.</param>
            <returns>Do these two images contain the the same contents.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToGreyScaleImage">
            <summary>
            Convert to a greyscale image.
            </summary>
            <returns>The greayscale image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToBinaryImage(System.Single)">
            <summary>
            Convert to a binary image.
            </summary>
            <param name="threshold">The threshold that determines 
            if the images values are tru or false.</param>
            <returns>The binary image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToColorImage">
            <summary>
            Convert to a color image.
            </summary>
            <returns>The color image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapWidth(System.Int32)">
            <summary>
            Get the mipmaps width at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps width.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapHeight(System.Int32)">
            <summary>
            Get the mipmaps height at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps height.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.MipmapSize(System.Int32)">
            <summary>
            Get the mipmaps size at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps size.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CalculateMipmapLevels(System.Int32,System.Int32)">
            <summary>
            Calculate how many mipmap levels a image of thie size would have.
            </summary>
            <param name="width">The images width.</param>
            <param name="height">The images height.</param>
            <returns>How many mipmap levels a image of thie size would have</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CreateMipmaps(ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create.</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.GetInterpolatedPixel(System.Single,System.Single,ImageProcessing.Interpolation.InterpolationFunction,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="func"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rescale``1(``0,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.PointRescale``1(``0,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rescale``1(``0,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Interpolation.InterpolationFunction)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="func"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SaveAsRaw(System.String,System.Boolean,ImageProcessing.Images.BIT_DEPTH,System.Boolean)">
            <summary>
            Save the image as raw bytes.
            </summary>
            <param name="filename">The filename.</param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
            <param name="bitDepth">The bitdepth of the file.</param>
            <param name="bigEndian">The endianness if 16 bits.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.SaveMipmapsAsRaw(System.String,System.Boolean,ImageProcessing.Images.BIT_DEPTH,System.Boolean)">
            <summary>
            Save the images mipmaps as raw bytes.
            </summary>
            <param name="filename">The filename.</param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
            <param name="bitDepth">The bitdepth of the file.</param>
            <param name="bigEndian">The endianness if 16 bits.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ToBytes(ImageProcessing.Images.BIT_DEPTH,System.Boolean,System.Boolean)">
            <summary>
            Get the images data as bytes.
            </summary>
            <param name="bitDepth">The bitdepth of the bytes.</param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
            <param name="bigEndian">The endianness if 16 bits.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FromBytes(System.Byte[],ImageProcessing.Images.BIT_DEPTH,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
            <param name="bitDepth"></param>
            <param name="bigEndian"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Read(System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bitDepth"></param>
            <param name="bigEndian"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Write(System.Single,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bitDepth"></param>
            <param name="bigEndian"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ReadShort(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bigEndian"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ReadFloat(System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.WriteShort(System.Single,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
            <param name="bigEndian"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.WriteFloat(System.Single,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="i"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawPoint(Common.Core.Numerics.Point2f,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(Common.Core.Shapes.Box2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="box"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBox(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBoxOutline(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawBoxFilled(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(Common.Core.Shapes.Circle2f,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="circle"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(Common.Core.Numerics.Point2f,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawCircle(System.Single,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipse(Common.Core.Numerics.Point2f,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="radiusX"></param>
            <param name="radiusY"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipse(System.Single,System.Single,System.Single,System.Single,Common.Core.Colors.ColorRGBA,System.Boolean,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radiusX"></param>
            <param name="radiusY"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipseOutline(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            
            TODO - Draws as filled?
            
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawEllipseFilled(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf  
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawLineDDA(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawLineBresenham(System.Int32,System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
            <param name="mode"></param>
        </member>
        <member name="F:ImageProcessing.Images.Image2D`1.INSIDE">
            <summary>
            Bitfields used to partition the space into 9 regions
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Clip(Common.Core.Shapes.Box2i,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with 
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm for details</remarks>
            <returns>a list of two points in the resulting clipped line, or zero</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.ComputeOutCode(Common.Core.Shapes.Box2i,System.Double,System.Double)">
            <summary>
            Compute the bit code for a point (x, y) using the clip rectangle
            bounded diagonally by (xmin, ymin), and (xmax, ymax)
            ASSUME THAT xmax , xmin , ymax and ymin are global constants.
            </summary>
            <param name="extents">The extents.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawFilledPolygon(System.Int32[],Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Draws a filled polygon. 
            Add the first point also at the end of the array if the line should be closed.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawShape(Common.Core.Shapes.IShape2f,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draw a shape into image by setting any pixels 
            in the image to the color if they are contained in the shape.
            </summary>
            <param name="shape">The shape interface.</param>
            <param name="color">The color to use.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawShape(Common.Core.Shapes.IShape2d,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Draw a shape into image by setting any pixels 
            in the image to the color if they are contained in the shape.
            </summary>
            <param name="shape">The shape interface.</param>
            <param name="color">The color to use.</param>
            <param name="wrap">The wrap mode for out of bounds indices. Defaults to clamp.</param>
            <param name="blend">The blend mode for the pixels. Defalus to alpha.</param>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.DrawFilledTriangle(Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Numerics.Point2f,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.GreyScaleImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Offset``1(``0,System.Int32,System.Int32)">
            <summary>
            Offsets the pixels in the image.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to offset.</param>
            <param name="offsetX">The offset on the x axis.</param>
            <param name="offsetY">The offset on the y axis.</param>
            <returns>The offset image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FlipHorizontal``1(``0)">
            <summary>
            Flip the image on the x axis.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to flip.</param>
            <returns>The flipped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.FlipVertical``1(``0)">
            <summary>
            Flip the image on the y axis.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image ti flip.</param>
            <returns>The flipped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate90``1(``0)">
            <summary>
            Returen a copy of the image rotated 90 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate180``1(``0)">
            <summary>
            Returen a copy of the image rotated 180 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Rotate270``1(``0)">
            <summary>
            Returen a copy of the image rotated 270 degrees.
            </summary>
            <param name="image">The image to rotate.</param>
            <returns>The rotated image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Crop``1(``0,Common.Core.Shapes.Box2i,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Return a copy of the image cropped to the bounds.
            </summary>
            <param name="image">The image to crop.</param>
            <param name="bounds">The bounds to crop.</param>
            <param name="mode">The wrap mode to use for pixels outside the bounds.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:ImageProcessing.Images.Image2D`1.Crop``1(``0,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Cut a image into smaller images.
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="image">The image to cut.</param>
            <param name="numX">The number of images to cut on the x axis.</param>
            <param name="numY">The number of images to cut on the y axis.</param>
            <param name="mode">The wrap mode</param>
            <returns>A list of the new images.</returns>
        </member>
        <member name="T:ImageProcessing.Images.BinaryImage2D">
            <summary>
            A 2D image containing only true or false values.
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Invert">
            <summary>
            Invert each bit in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Or(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            Or the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Xor(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            XOr the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.And(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            And the bits in this image with another.
            </summary>
            <param name="image">Another image of the same size.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="F:ImageProcessing.Images.BinaryImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Threshold">
            <summary>
            The threshold at which a value in the image is true or false.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.BinaryImage2D.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetValue(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetValue(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetValue(System.Int32,System.Int32,System.Boolean,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="value">The value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Open(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Open(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Open the image by performing a erode followed by a dilate.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Close(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Close(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Close the image by performing a dilate followed by a erode.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Border(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find the border of all connected blocks of true values in the image.
            </summary>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Diluate all true values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Diluate all true values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Dilate(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if a pixel in the image should be dilated.
            A pixel should be dilated if any surrounding pixel
            and the element both have a true value.
            The element is centered on the pixel.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(ImageProcessing.Images.BinaryImage2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all true values in a image by the structure element.
            </summary>
            <param name="a"></param>
            <param name="size"></param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Erode all true values in a image by the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Erode(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if a pixel in the image should be eroded.
            A pixel should be eroded if any surrounding pixel
            has a false value and the element a true value.
            The element is centered on the pixel.
            </summary>
            <param name="i">x index in source image.</param>
            <param name="j">y index in source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Thinning(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.WRAP_MODE,System.Int32)">
            <summary>
            Iteratively thin a image by removing pixels on the border
            if they match the structure element.
            Will exit early if image can not be thinned anymore.
            </summary>
            <param name="a">The image.</param>
            <param name="iterations">The number of times to thin the image.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Thinning(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{System.Boolean}},ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,System.Int32,ImageProcessing.Images.WRAP_MODE,System.Boolean@)">
            <summary>
            Thin the image with the two structure elements and remove 
            any thinned points from the image.
            </summary>
            <param name="points">The current pixels in the image with a true value.</param>
            <param name="a">The image to be thinned.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="i">The rotation index for the elements.</param>
            <param name="done">If the image has not changed this iteration.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that matchs the structure element.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that match the structure element
            in any of its 4 rotations.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Remove all pixels in the image that match either of the two 
            structure elements in any of there 4 rotations.
            </summary>
            <param name="a">The image.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if the pixel in the image matches the structure element
            in any of its 4 rotations.
            </summary>
            <param name="x">The x index in the source image.</param>
            <param name="y">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss4(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.StructureElement2D,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if the pixel in the image matches either of the 
            structure elements in any of there 4 rotations.
            </summary>
            <param name="x">The x index in the source image.</param>
            <param name="y">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element b.</param>
            <param name="c">The structure element c.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.HitAndMiss(System.Int32,System.Int32,ImageProcessing.Images.BinaryImage2D,ImageProcessing.Images.StructureElement2D,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Find if all surrounding pixels in a image match the 
            structure element.
            </summary>
            <param name="i">The x index in the source image.</param>
            <param name="j">The y index in the source image.</param>
            <param name="a">The source image.</param>
            <param name="b">The structure element.</param>
            <param name="rotate">The element rotation.</param>
            <param name="wrap">The wrap mode.</param>
            <param name="wrap">The wrap mode for out of bounds indices, Defaluts to clamp.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.Segmentation(ImageProcessing.Images.BinaryImage2D)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.MinimumSpanningForest(ImageProcessing.Images.BinaryImage2D,System.Func{Common.Core.Numerics.Point2i,Common.Core.Numerics.Point2i,System.Single})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.BinaryImage2D.ColorizeForest(ImageProcessing.Images.BinaryImage2D,System.Int32,Common.GraphTheory.AdjacencyGraphs.GraphForest)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="seed"></param>
            <param name="forest"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.VectorImage2D">
            <summary>
            A 2D image containing RGB color values.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Min(System.Single)">
            <summary>
            Make each value in image the smaller of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Max(System.Single)">
            <summary>
            Make each value in image the larger of the two values.
            </summary>
            <param name="value">The another value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Clamp(System.Single,System.Single)">
            <summary>
            Clamp each value to be no more or less that the min and max.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Normalize">
            <summary>
            Normalize each vector in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Invert">
            <summary>
            Inverts the vectors in the image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Add(Common.Core.Numerics.Vector2f)">
            <summary>
            Add the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Subtract(Common.Core.Numerics.Vector2f,System.Boolean)">
            <summary>
            Subtract the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Multiply(Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Divide(Common.Core.Numerics.Vector2f,System.Boolean)">
            <summary>
            Add the vectors in the image.
            </summary>
            <param name="vector">The vector.</param>
            <param name="reverse">Reverse the operations order.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Addition(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Adds the two images together.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Subtraction(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Subtracts the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Multiply(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Multiply the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Division(ImageProcessing.Images.VectorImage2D,ImageProcessing.Images.VectorImage2D)">
            <summary>
            Divide the two images.
            The resulting image will be the same size as the first image.
            If the second image is a different size then bilinear filtering will be used sample the image.
            </summary>
            <param name="image1">The first image.</param>
            <param name="image2">The second image.</param>
            <returns>A image the same size as the first.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Addition(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Add each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Subtraction(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Multiply(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.op_Division(ImageProcessing.Images.VectorImage2D,Common.Core.Numerics.Vector2f)">
            <summary>
            Divide each vector in the image with vector.
            </summary>
            <param name="image1">The first image.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor">
            <summary>
            Create a default of image.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(Common.Core.Numerics.Point2i)">
            <summary>
            Create a image of a given size.
            </summary>
            <param name="size">The size of the image. x is the width and y is the height.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(System.Int32,System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Create a image of a given width and height and filled with a value.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="value">The value to fill the image with.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a image of a given width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.#ctor(Common.Core.Numerics.Vector2f[0:,0:])">
            <summary>
            Create a image from the given data.
            </summary>
            <param name="data">The images data.</param>
        </member>
        <member name="F:ImageProcessing.Images.VectorImage2D.Data">
            <summary>
            The images pixels.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Mipmaps">
            <summary>
            The images mipmaps.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Count">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Width">
            <summary>
            The size of the arrays 1st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Height">
            <summary>
            The size of the arrays 2st dimention.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Item(System.Int32,System.Int32)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.VectorImage2D.Item(Common.Core.Numerics.Point2i)">
            <summary>
            Access a element at index x,y.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ToString">
            <summary>
            Return the image description.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Clear">
            <summary>
            Sets all elements in the array to default value.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.ClearMipmaps">
            <summary>
            Clear the image of all mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a channels value from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The value at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetVector(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a vector from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The vector at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetVector(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a vector from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The vector at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetVector(System.Int32,System.Int32,Common.Core.Numerics.Vector2f,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the vector at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="vector">The vector.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first index.</param>
            <param name="v">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the channel value at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The channel index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.Copy">
            <summary>
            Return a copy of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetMipmap(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is out of bounds or if there are no mipmaps.</exception>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.GetMipmapInterface(System.Int32)">
            <summary>
            Get the mipmap at index i.
            </summary>
            <param name="i">The mipmap level.</param>
            <returns>The mipmap at index i.</returns>
        </member>
        <member name="M:ImageProcessing.Images.VectorImage2D.CreateMipmaps(System.Int32,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.RESCALE)">
            <summary>
            Creates the images mipmaps.
            </summary>
            <param name="maxLevel">The max level of mipmaps to create. -1 to ignore</param>
            <param name="mode">The wrap mode to use.</param>
            <param name="method">The interpolation method to use.</param>
            <exception cref="T:System.ArgumentException">If max levels is not greater than 0.</exception>
        </member>
        <member name="T:ImageProcessing.Images.WRAP_MODE">
            <summary>
            Wrap mode options for when sampling a image.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.BLEND_MODE">
            <summary>
            The mode pixels are blended based on there alpha value.
            Only applies to images with a alpha channel.
            </summary>
        </member>
        <member name="T:ImageProcessing.Images.IImage2D">
            <summary>
            General interface for a 2 dimensional image.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Width">
            <summary>
            The images size on the x axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Height">
            <summary>
            The images size on the y axis.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.Channels">
            <summary>
            The number of channels in the images pixel.
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.IImage2D.MipmapLevels">
            <summary>
            The number of mipmap levels in image.
            CreateMipmaps must be called for the image to have mipmaps.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.MipmapWidth(System.Int32)">
            <summary>
            Get the mipmaps width at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps width.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.MipmapHeight(System.Int32)">
            <summary>
            Get the mipmaps height at level m.
            </summary>
            <param name="m">The mipmap level.</param>
            <returns>The mipmaps height.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the array. Will clear any existing data.
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixel(System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixelMipmap(System.Single,System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="m">The mipmap normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetPixel(System.Single,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixel from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
            <returns>The pixel at index x,y.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetChannel(System.Int32,System.Int32,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.GetChannel(System.Single,System.Single,System.Int32,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Get a pixels channel value from the image at normalized index u,v.
            </summary>
            <param name="u">The first normalized (0-1) index.</param>
            <param name="v">The second normalized (0-1) index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="mode">The wrap mode for indices outside image bounds</param>
            <returns>The pixels channel at index x,y,c.</returns>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetPixel(System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetPixelMipmap(System.Int32,System.Int32,System.Int32,Common.Core.Colors.ColorRGBA,ImageProcessing.Images.WRAP_MODE,ImageProcessing.Images.BLEND_MODE)">
            <summary>
            Set the pixel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="m">The mipmap index.</param>
            <param name="pixel">The pixel.</param>
            <param name="wrap">The wrap mode for indices outside image bounds.</param>
            <param name="blend">The mode pixels are blended based on there alpha value. 
            Only applies to images with a alpha channel.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.SetChannel(System.Int32,System.Int32,System.Int32,System.Single,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            Set the pixels channel at index x,y.
            </summary>
            <param name="x">The first index.</param>
            <param name="y">The second index.</param>
            <param name="c">The pixels channel index (0-2).</param>
            <param name="value">The pixels channel value.</param>
            <param name="mode">The wrap mode for indices outside image bounds.</param>
        </member>
        <member name="M:ImageProcessing.Images.IImage2D.ToBytes(ImageProcessing.Images.BIT_DEPTH,System.Boolean,System.Boolean)">
            <summary>
            Get the images data as bytes.
            </summary>
            <param name="bitDepth">The bitdepth of the bytes.</param>
            <param name="includeAlpha">Should the alpha channel be included.</param>
            <param name="bigEndian">The endianness if 16 bits.</param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Images.StructureElement2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.#ctor(System.Int32[0:,0:])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:ImageProcessing.Images.StructureElement2D.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Images.StructureElement2D.Item(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.Fill(Common.Core.Shapes.IShape2f,System.Boolean)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="center"></param>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ToFloatArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rotate"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated0(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated90(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated180(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.GetRotated270(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.BoxElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.CircleElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.HitMissCornerElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ThinningElements">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.CityBlockElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Images.StructureElement2D.ChessBoardElement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.InterpolationFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.InterpolationFunction.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.Pow2(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.InterpolationFunction.Pow3(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.LinearInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LinearInterpolation.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LinearInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.LinearInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.CubicInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Smooth">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Sharp">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.CubicInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.CubicInterpolation.a">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.CubicInterpolation.GetWeight(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.SplineInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.CatmullRom">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.CubicBSpline">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.MitchellNetravli">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.SplineInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.SplineInterpolation.a">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.SplineInterpolation.b">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.SplineInterpolation.GetWeight(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.LanzcosInterpolation">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default2">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default3">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Default4">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.LanzcosInterpolation.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageProcessing.Interpolation.LanzcosInterpolation.n">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.GetWeight(System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.LanzcosInterpolation.GetWeight(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Interpolation.PolyphaseKernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.#ctor(ImageProcessing.Interpolation.InterpolationFunction,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="func"></param>
            <param name="srcLength"></param>
            <param name="dstLength"></param>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.WindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Samples">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Interpolation.PolyphaseKernel.Weights">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.GetWeight(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.ApplyHorizontal``1(System.Int32,``0,``0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="y"></param>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.ApplyVertical``1(System.Int32,``0,``0,ImageProcessing.Images.WRAP_MODE)">
            <summary>
            
            </summary>
            <typeparam name="IMAGE"></typeparam>
            <param name="x"></param>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="mode"></param>
        </member>
        <member name="M:ImageProcessing.Interpolation.PolyphaseKernel.SampleWindow(ImageProcessing.Interpolation.InterpolationFunction,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="func"></param>
            <param name="x"></param>
            <param name="scale"></param>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.ColorPixelSet2D">
            <summary>
            A set of pixel indices.
            Can be used to calculate some proerties of the set. 
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.#ctor(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{Common.Core.Colors.ColorRGBA}})">
            <summary>
            
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.ColorPixelSet2D.CalculateMean">
            <summary>
            The mean value of the pixels in the set.
            </summary>
            <returns>The mean value of the pixels in the set.</returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelIndex2D`1">
            <summary>
            Struct to hold a pixels value and its index in a image.
            </summary>
            <typeparam name="T">The pixels type</typeparam>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.x">
            <summary>
            The pixels index in a image.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.y">
            <summary>
            The pixels index in a image.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.Value">
            <summary>
            The pixels value.
            </summary>
        </member>
        <member name="F:ImageProcessing.Pixels.PixelIndex2D`1.Tag">
            <summary>
            Tag for algorithms on the image can mark or 
            id the image if needed. May change at any point.
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Create a new PixelIndex2D.
            </summary>
            <param name="x">The pixels x coordinate.</param>
            <param name="y">The pixels y coordinate.</param>
            <param name="value">The pixels value</param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.#ctor(System.Int32,System.Int32,`0,System.Int32)">
            <summary>
            Create a new PixelIndex2D.
            </summary>
            <param name="x">The pixels x coordinate.</param>
            <param name="y">The pixels y coordinate.</param>
            <param name="value">The pixels value</param>
            <param name="tag"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelIndex2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelSegmentation2D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.#ctor(ImageProcessing.Images.Image2D{`0})">
            <summary>
            
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Image">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSegmentation2D`1.Sets">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.AddPixel(Common.Core.Numerics.Point2i,ImageProcessing.Pixels.PixelIndex2D{`0})">
            <summary>
            
            </summary>
            <param name="root"></param>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSegmentation2D`1.ColorizeSegmentation(System.Int32)">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.SegmentationColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.SegmentationColors.Generate(System.Int32,System.Collections.Generic.IEnumerable{Common.Core.Numerics.Point2i})">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Pixels.PixelSet2D`1">
            <summary>
            A set of pixel indices.
            Can be used to calculate some proerties of the set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.#ctor">
            <summary>
            /
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.#ctor(System.Collections.Generic.List{ImageProcessing.Pixels.PixelIndex2D{`0}})">
            <summary>
            
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSet2D`1.Count">
            <summary>
            The number of pixels in the set.
            </summary>
        </member>
        <member name="P:ImageProcessing.Pixels.PixelSet2D`1.Pixels">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.Add(ImageProcessing.Pixels.PixelIndex2D{`0})">
            <summary>
            Add a new pixel index to the set.
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CompareTo(ImageProcessing.Pixels.PixelSet2D{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateBounds">
            <summary>
            Calculate the bounding box of the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateRoundness(System.Single)">
            <summary>
            Calcuate the roundness of the set.
            </summary>
            <param name="perimeter"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Pixels.PixelSet2D`1.CalculateCentroid">
            <summary>
            Calcuate the centriod of the set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Statistics.KMeansCluster">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.#ctor(System.Int32,Common.Core.Colors.ColorRGBA)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="mean"></param>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Mean">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeansCluster.Set">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeansCluster.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageProcessing.Statistics.KMeans">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageProcessing.Statistics.KMeans.Clusters">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.Run(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
            <param name="weighted"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitializeClustersRandom(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitializeClustersWeighted(ImageProcessing.Images.ColorImage2D,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateWeights(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.GreyScaleImage2D)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="weights"></param>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.ChoosePixel(ImageProcessing.Images.ColorImage2D,ImageProcessing.Images.GreyScaleImage2D,System.Double)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="weights"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.InitialAssignment(ImageProcessing.Images.ColorImage2D)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateAssignment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.UpdateClusterMeans">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageProcessing.Statistics.KMeans.Closest(Common.Core.Colors.ColorRGBA)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
    </members>
</doc>
